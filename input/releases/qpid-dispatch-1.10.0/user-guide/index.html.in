<h1>Using Qpid Dispatch</h1>
<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#overview-qdr">1. Overview</a>
<ul class="sectlevel2">
<li><a href="#key-features-qdr">1.1. Key features</a></li>
<li><a href="#supported-standards-protocols-qdr">1.2. Supported standards and protocols</a></li>
<li><a href="#important-terms-concepts-qdr">1.3. Important terms and concepts</a>
<ul class="sectlevel3">
<li><a href="#overview-of-amqp-qdr">1.3.1. Overview of AMQP</a></li>
<li><a href="#what-routers-are-qdr">1.3.2. What routers are</a></li>
<li><a href="#how-routers-route-messages-qdr">1.3.3. How routers route messages</a></li>
<li><a href="#router-security-qdr">1.3.4. Router security</a></li>
<li><a href="#router-management-qdr">1.3.5. Router management</a></li>
</ul>
</li>
<li><a href="#document-conventions-qdr">1.4. Document conventions</a></li>
</ul>
</li>
<li><a href="#installing-router-qdr">2. Installing Dispatch Router</a></li>
<li><a href="#getting-started-qdr">3. Getting started</a>
<ul class="sectlevel2">
<li><a href="#viewing-default-router-configuration-file-qdr">3.1. Viewing the default router configuration file</a></li>
<li><a href="#starting-router-getting-started-qdr">3.2. Starting the router</a></li>
<li><a href="#sending-test-messages-qdr">3.3. Sending test messages</a></li>
<li><a href="#next-steps-qdr">3.4. Next steps</a></li>
</ul>
</li>
<li><a href="#creating-router-network-topology-qdr">4. Creating a router network topology</a>
<ul class="sectlevel2">
<li><a href="#router-deployment-guidelines-qdr">4.1. Dispatch Router deployment guidelines</a>
<ul class="sectlevel3">
<li><a href="#router-operating-modes-qdr">4.1.1. Router operating modes</a></li>
<li><a href="#security-guidelines-qdr">4.1.2. Security guidelines</a></li>
<li><a href="#router-connection-guidelines-qdr">4.1.3. Router connection guidelines</a></li>
</ul>
</li>
<li><a href="#router-deployment-workflow-qdr">4.2. Dispatch Router deployment workflow</a></li>
</ul>
</li>
<li><a href="#configuring-router-qdr">5. Configuring Dispatch Router</a>
<ul class="sectlevel2">
<li><a href="#configuring-router-properties-qdr">5.1. Configuring router properties</a></li>
<li><a href="#configuring-network-connections-qdr">5.2. Configuring network connections</a>
<ul class="sectlevel3">
<li><a href="#connecting-routers-qdr">5.2.1. Connecting routers</a></li>
<li><a href="#listening-client-connections-qdr">5.2.2. Listening for client connections</a></li>
<li><a href="#connecting-to-external-amqp-containers-qdr">5.2.3. Connecting to external AMQP containers</a></li>
<li><a href="#understanding-connection-failover-qdr">5.2.4. Understanding connection failover</a></li>
</ul>
</li>
<li><a href="#securing-network-connections-qdr">5.3. Securing network connections</a>
<ul class="sectlevel3">
<li><a href="#securing-connections-between-routers-qdr">5.3.1. Securing connections between routers</a></li>
<li><a href="#securing-incoming-client-connections-qdr">5.3.2. Securing incoming client connections</a></li>
<li><a href="#securing-outgoing-connections-qdr">5.3.3. Securing outgoing connections</a></li>
</ul>
</li>
<li><a href="#authorizing-access-to-messaging-resources">5.4. Authorizing Access to Messaging Resources</a>
<ul class="sectlevel3">
<li><a href="#how_dispatch_router_enforces_connection_and_resource_limits">5.4.1. How Dispatch Router Enforces Connection and Resource Limits</a></li>
<li><a href="#setting_global_connection_limits">5.4.2. Setting Global Connection Limits</a></li>
<li><a href="#setting_connection_and_resource_limits_for_messaging_endpoints">5.4.3. Setting Connection and Resource Limits for Messaging Endpoints</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#routing">6. Routing messages through the router network</a>
<ul class="sectlevel2">
<li><a href="#comparison_of_message_routing_and_link_routing">6.1. Comparison of Message Routing and Link Routing</a>
<ul class="sectlevel3">
<li><a href="#when_to_use_message_routing">6.1.1. When to Use Message Routing</a></li>
<li><a href="#when_to_use_link_routing">6.1.2. When to Use Link Routing</a></li>
</ul>
</li>
<li><a href="#configuring-message-routing">6.2. Configuring Message Routing</a>
<ul class="sectlevel3">
<li><a href="#message_routing_flow_control">6.2.1. Message Routing Flow Control</a></li>
<li><a href="#addresses">6.2.2. Addresses</a></li>
<li><a href="#routing-patterns-overview">6.2.3. Routing Patterns</a></li>
<li><a href="#message_settlement_and_reliability">6.2.4. Message Settlement and Reliability</a></li>
<li><a href="#prioritized-message-delivery">6.2.5. Configuring Addresses for Prioritized Message Delivery</a></li>
<li><a href="#routing-messages-between-clients">6.2.6. Routing Messages Between Clients</a></li>
<li><a href="#routing-messages-through-broker">6.2.7. Routing Messages Through a Broker Queue</a></li>
<li><a href="#handling_undeliverable_messages_for_an_address">6.2.8. Handling Undeliverable Messages for an Address</a></li>
<li><a href="#example_routing_messages_through_broker_queues">6.2.9. Example: Routing Messages Through Broker Queues</a></li>
</ul>
</li>
<li><a href="#configuring-link-routing">6.3. Configuring Link Routing</a>
<ul class="sectlevel3">
<li><a href="#link_route_addresses">6.3.1. Link Route Addresses</a></li>
<li><a href="#link_route_routing_patterns">6.3.2. Link Route Routing Patterns</a></li>
<li><a href="#link_route_flow_control">6.3.3. Link Route Flow Control</a></li>
<li><a href="#creating-link-route">6.3.4. Creating a Link Route</a></li>
<li><a href="#example_using_a_link_route_to_provide_client_isolation">6.3.5. Example: Using a Link Route to Provide Client Isolation</a></li>
<li><a href="#router-address-pattern-matching">6.3.6. Pattern Matching for Addresses</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#monitoring-managing-router-network">7. Monitoring and managing the router network</a>
<ul class="sectlevel2">
<li><a href="#starting-router-qdr">7.1. Starting a router</a></li>
<li><a href="#logging">7.2. Logging</a>
<ul class="sectlevel3">
<li><a href="#logging-modules-you-can-configure">7.2.1. Logging Modules</a></li>
<li><a href="#configure-default-logging">7.2.2. Configuring Logging</a></li>
<li><a href="#viewing_log_entries">7.2.3. Viewing Log Entries</a></li>
</ul>
</li>
<li><a href="#using-router-console">7.3. Using Apache Qpid Dispatch Router Console</a>
<ul class="sectlevel3">
<li><a href="#setting_up_access_to_the_web_console">7.3.1. Setting up access to the web console</a></li>
<li><a href="#accessing_the_web_console">7.3.2. Accessing the web console</a></li>
<li><a href="#monitoring_the_router_network_using_the_web_console">7.3.3. Monitoring the router network using the web console</a></li>
<li><a href="#closing_a_connection">7.3.4. Closing a connection</a></li>
</ul>
</li>
<li><a href="#monitoring-using-qdstat">7.4. Monitoring Dispatch Router Using <code>qdstat</code></a>
<ul class="sectlevel3">
<li><a href="#syntax_for_using_code_qdstat_code">7.4.1. Syntax for Using <code>qdstat</code></a></li>
<li><a href="#creating_a_state_dump_of_the_router_network">7.4.2. Creating a State Dump of the Router Network</a></li>
<li><a href="#viewing_general_statistics_for_a_router">7.4.3. Viewing General Statistics for a Router</a></li>
<li><a href="#viewing_a_list_of_connections_to_a_router">7.4.4. Viewing a List of Connections to a Router</a></li>
<li><a href="#viewing_amqp_links_attached_to_a_router">7.4.5. Viewing AMQP Links Attached to a Router</a></li>
<li><a href="#viewing_known_routers_on_a_network">7.4.6. Viewing Known Routers on a Network</a></li>
<li><a href="#viewing_addresses_known_to_a_router">7.4.7. Viewing Addresses Known to a Router</a></li>
<li><a href="#viewing_a_router_s_autolinks">7.4.8. Viewing a Router&#8217;s Autolinks</a></li>
<li><a href="#viewing_the_status_of_a_router_s_link_routes">7.4.9. Viewing the Status of a Router&#8217;s Link Routes</a></li>
<li><a href="#viewing_memory_consumption_information">7.4.10. Viewing Memory Consumption Information</a></li>
</ul>
</li>
<li><a href="#managing-router">7.5. Managing Dispatch Router Using <code>qdmanage</code></a>
<ul class="sectlevel3">
<li><a href="#syntax_for_using_code_qdmanage_code">7.5.1. Syntax for Using <code>qdmanage</code></a></li>
<li><a href="#closing_a_connection_2">7.5.2. Closing a connection</a></li>
<li><a href="#managing_network_connections">7.5.3. Managing Network Connections</a></li>
<li><a href="#managing_security">7.5.4. Managing Security</a></li>
<li><a href="#managing_routing">7.5.5. Managing Routing</a></li>
<li><a href="#managing_logging">7.5.6. Managing Logging</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#technical-details-specifications">8. Technical Details and Specifications</a>
<ul class="sectlevel2">
<li><a href="#client-compatibility">8.1. Client Compatibility</a></li>
<li><a href="#amqp-mapping">8.2. AMQP Mapping</a>
<ul class="sectlevel3">
<li><a href="#message-annotations">8.2.1. Message Annotations</a></li>
<li><a href="#sourcetarget-capabilities">8.2.2. Source/Target Capabilities</a></li>
<li><a href="#dynamic-node-properties">8.2.3. Dynamic-Node-Properties</a></li>
<li><a href="#addresses-and-address-formats">8.2.4. Addresses and Address Formats</a></li>
<li><a href="#implementation-of-the-amqp-management-specification">8.2.5. Implementation of the AMQP Management Specification</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="sect1">
<h2 id="overview-qdr">1. Overview</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dispatch Router is a lightweight AMQP message router for building scalable, available, and performant messaging networks.</p>
</div>
<div class="sect2">
<h3 id="key-features-qdr">1.1. Key features</h3>
<div class="paragraph">
<p>You can use Dispatch Router to flexibly route messages between any AMQP-enabled endpoints, including clients, servers, and message brokers. Dispatch Router provides the following benefits:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Connects clients and message brokers into an internet-scale messaging network with uniform addressing</p>
</li>
<li>
<p>Supports high-performance direct messaging</p>
</li>
<li>
<p>Uses redundant network paths to route around failures</p>
</li>
<li>
<p>Streamlines the management of large deployments</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="supported-standards-protocols-qdr">1.2. Supported standards and protocols</h3>
<div class="paragraph">
<p>Dispatch Router supports the following industry-recognized standards and network protocols:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Version 1.0 of the Advanced Message Queueing Protocol (AMQP)</p>
</li>
<li>
<p>Modern TCP with IPv6</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The details of distributed transactions (XA) within AMQP are not provided in the 1.0 version of the specification. AMQ Interconnect does not support XA transactions.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="ulist">
<div class="title">Additional resources</div>
<ul>
<li>
<p><a href="http://www.amqp.org/resources/download">OASIS AMQP 1.0 Specification</a></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="important-terms-concepts-qdr">1.3. Important terms and concepts</h3>
<div class="paragraph">
<p>Before using Dispatch Router, you should be familiar with AMQP and understand some key concepts about Dispatch Router.</p>
</div>
<div class="sect3">
<h4 id="overview-of-amqp-qdr">1.3.1. Overview of AMQP</h4>
<div class="paragraph">
<p>Dispatch Router implements version 1.0 of the Advanced Message Queueing Protocol (AMQP) specification. Therefore, you should understand several key AMQP terms and concepts before deploying or configuring Dispatch Router.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Containers</dt>
<dd>
<p>AMQP is a wire-level messaging protocol for transferring messages between applications called <em>containers</em>. In AMQP, a container is any application that sends or receives messages, such as a client application or message broker.</p>
<div class="paragraph">
<p>Containers connect to each other over <em>connections</em>, which are channels for communication.</p>
</div>
</dd>
<dt class="hdlist1">Nodes</dt>
<dd>
<p>Containers contain addressable entities called <em>nodes</em> that are responsible for storing or delivering messages. For example, a queue on a message broker is a node.</p>
</dd>
<dt class="hdlist1">Links</dt>
<dd>
<p>Messages are transferred between connected containers over <em>links</em>. A link is a unidirectional route between nodes. Essentially, a link is a channel for sending or receiving messages.</p>
<div class="paragraph">
<p>Links are established over <em>sesssions</em>, which are contexts for sending and receiving messages. Sessions are established over connections.</p>
</div>
</dd>
</dl>
</div>
<div class="ulist">
<div class="title">Additional resources</div>
<ul>
<li>
<p><a href="http://www.amqp.org/resources/download">OASIS AMQP 1.0 Specification</a></p>
</li>
<li>
<p><a href="https://dzone.com/refcardz/amqp-essentials?chapter=1">AMQP Essentials Refcard</a></p>
</li>
<li>
<p><a href="https://channel9.msdn.com/Blogs/Subscribe/The-AMQP-10-Protocol-16-Overview">Video series introducing AMQP 1.0</a></p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="what-routers-are-qdr">1.3.2. What routers are</h4>
<div class="paragraph">
<p>Dispatch Router is an application layer program running as a normal user program or as a daemon. A running instance of Dispatch Router is called a <em>router</em>.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Routers do not take responsibility for messages</dt>
<dd>
<p>Routers transfer messages between producers and consumers, but unlike message brokers, they do not take responsibility for messages. Instead, routers propagate message settlement and disposition across a network such that delivery guarantees are met. That is, the router network will deliver the message &ndash; possibly through several intermediate routers &ndash; and then route the consumer&#8217;s acknowledgement of that message back across the same path. The responsibility for the message is transfered from the producer to the consumer as if they were directly connected.</p>
</dd>
<dt class="hdlist1">Routers are combined to form router networks</dt>
<dd>
<p>Routers are often deployed in topologies of multiple routers called a router network. Routers use link-state routing protocols and algorithms similar to the Open Shortest Path First (OSPF) and Intermediate System to Intermediate System (IS-IS) protocols to calculate the best path from every message source to every message destination, and to recover quickly from failures. A router network relies on redundant network paths to provide continued connectivity in case of system or network failure.</p>
</dd>
<dt class="hdlist1">Routers enhance both direct and indirect messaging patterns</dt>
<dd>
<p>A messaging client can make a single AMQP connection into a router network and, over that connection, exchange messages with one or more message brokers connected to any router in the network. At the same time, the client can exchange messages directly with other endpoints without involving a broker at all.</p>
<div class="exampleblock">
<div class="title">Example 1. Enhancing the use of message brokers</div>
<div class="content">
<div class="paragraph">
<p>Routers can enhance a cluster of message brokers that provide a scalable, distributed work queue.</p>
</div>
<div class="paragraph">
<p>The router network makes the broker cluster appear as a single queue, with producers publishing to a single address, and consumers subscribing to a single address. The router network can distribute work to any broker in the cluster, and collect work from any broker for any consumer.</p>
</div>
<div class="paragraph">
<p>The routers improve the scalability of the broker cluster, because brokers can be added or removed from the cluster without affecting the clients.</p>
</div>
<div class="paragraph">
<p>The routers also solve the common difficulty of "stuck messages". Without the router network, if a consumer is connected to a broker that does not have any messages (but other brokers in the cluster do have messages), you must either transfer the messages or leave them "stuck". The routers solve this issue, however, because all of the consumers are connected to all of the brokers through the router network. A message on any broker can be delivered to any of the consumers.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
</div>
<div class="sect3">
<h4 id="how-routers-route-messages-qdr">1.3.3. How routers route messages</h4>
<div class="paragraph">
<p>In a router network, <em>routing</em> is the process by which messages are delivered to their destinations. To accomplish this, Dispatch Router offers two different routing mechanisms:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Message routing</dt>
<dd>
<p>Message routing enables you to distribute messages in anycast and multicast patterns. These patterns can be used for both direct routing, in which the router distributes messages between clients without a message broker, and indirect routing, in which the router enables clients to exchange messages through a message broker.</p>
<div class="paragraph">
<p>Message routing is useful for the following types of requirements:</p>
</div>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>Default, basic message routing</p>
<div class="paragraph">
<p>Dispatch Router automatically routes messages by default, so manual configuration is only required if you want routing behavior that is different than the default.</p>
</div>
</li>
<li>
<p>Message-based routing patterns</p>
<div class="paragraph">
<p>Message routing supports both anycast and multicast routing patterns. You can load-balance individual messages across multiple consumers, and multicast (or fan-out) messages to multiple subscribers.</p>
</div>
</li>
<li>
<p>Sharding messages across multiple message brokers when message delivery order is not important</p>
<div class="paragraph">
<p>Sharding messages from one producer might cause that producer’s messages to be received in a different order than the order in which they were sent.</p>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd>
<dt class="hdlist1">Link routing</dt>
<dd>
<p>Link routing enables you to establish a dedicated, virtual "path" between a sender and receiver that travels through the router network. Link routes are typically used to connect clients to message brokers in scenarios in which a direct connection is unfeasible. Therefore, link routes enable messaging capabilities that are not possible with message routing, such as:</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>Transactional messaging</p>
<div class="paragraph">
<p>Link routing supports local transactions to a single broker. Distributed transactions are not supported.</p>
</div>
</li>
<li>
<p>Guaranteed message delivery order</p>
<div class="paragraph">
<p>Link routing to a sharded queue preserves the delivery order of the producer’s messages by causing all messages on that link to go to the same broker instance.</p>
</div>
</li>
<li>
<p>End-to-end flow control</p>
<div class="paragraph">
<p>Flow control is "real" in that credits flow across the link route from the receiver to the sender.</p>
</div>
</li>
<li>
<p>Server-side selectors</p>
<div class="paragraph">
<p>With a link route, consumers can provide server-side selectors for broker subscriptions.</p>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div class="ulist">
<div class="title">Additional resources</div>
<ul>
<li>
<p><a href="#configuring-message-routing">Configuring Message Routing</a></p>
</li>
<li>
<p><a href="#configuring-link-routing">Configuring Link Routing</a></p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="router-security-qdr">1.3.4. Router security</h4>
<div class="paragraph">
<p>Dispatch Router provides authentication and authorization mechanisms so that you can control who can access the router network, and what they can do with the messaging resources.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Authentication</dt>
<dd>
<p>Dispatch Router supports both SSL/TLS and SASL for encrypting and authenticating remote peers. Using these mechanisms, you can secure the router network in the following ways:</p>
<div class="ulist">
<ul>
<li>
<p>Authenticate incoming connections from remote peers (such as clients and message brokers)</p>
</li>
<li>
<p>Provide authentication credentials for outgoing connections to remote peers (such as clients and message brokers)</p>
</li>
<li>
<p>Secure the inter-router connections between the routers in the router network</p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1">Authorization</dt>
<dd>
<p>Dispatch Router provides a <code>policy</code> mechanism that you can use to enforce user connection restrictions and AMQP resource access control.</p>
</dd>
</dl>
</div>
<div class="ulist">
<div class="title">Additional resources</div>
<ul>
<li>
<p><a href="#securing-network-connections-qdr">Securing network connections</a></p>
</li>
<li>
<p><a href="#authorizing-access-to-messaging-resources">Authorizing Access to Messaging Resources</a></p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="router-management-qdr">1.3.5. Router management</h4>
<div class="paragraph">
<p>Dispatch Router provides both graphical and CLI tools for monitoring and managing a router network.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Apache Qpid Dispatch Router Console</dt>
<dd>
<p>A web console for monitoring the layout and health of the router network.</p>
</dd>
<dt class="hdlist1">qdstat</dt>
<dd>
<p>A command-line tool for monitoring the status of a router in the router network. Using this tool, you can view the following information about a router:</p>
<div class="ulist">
<ul>
<li>
<p>Incoming and outgoing connections</p>
</li>
<li>
<p>Incoming and outgoing links</p>
</li>
<li>
<p>Router network topology from the perspective of this router</p>
</li>
<li>
<p>Addresses known to this router</p>
</li>
<li>
<p>Link routes and autolinks</p>
</li>
<li>
<p>Memory consumption information</p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1">qdmanage</dt>
<dd>
<p>A command-line tool for viewing and updating the configuration of a router at runtime.</p>
</dd>
</dl>
</div>
<div class="ulist">
<div class="title">Additional resources</div>
<ul>
<li>
<p><a href="#monitoring-managing-router-network">Monitoring and managing the router network</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="document-conventions-qdr">1.4. Document conventions</h3>
<div class="paragraph">
<p>In this document, <code>sudo</code> is used for any command that requires root privileges. You should always exercise caution when using <code>sudo</code>, as any changes can affect the entire system.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="installing-router-qdr">2. Installing Dispatch Router</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dispatch Router is distributed as a set of RPM packages, which are available for <code>yum</code>/<code>dnf</code>-based Linux distributions. Alternatively, you can build the Dispatch Router from source.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Dispatch Router will not build on Windows.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Do one of the following:</p>
<div class="ulist">
<ul>
<li>
<p>Download and build the Dispatch Router source.</p>
<div class="paragraph">
<p>To download the source, see the <a href="https://qpid.apache.org/download.html" target="_blank" rel="noopener">Download page</a>. For instructions on building the source, see the <a href="https://gitbox.apache.org/repos/asf?p=qpid-dispatch.git;a=blob_plain;f=README;hb=1.10.0-SNAPSHOT" target="_blank" rel="noopener">Qpid Dispatch README</a>.</p>
</div>
</li>
<li>
<p>Install the Dispatch Router packages.</p>
<div class="paragraph">
<p>Packages are available for <code>yum</code>/<code>dnf</code>-based Linux distributions. For more information, see the <a href="https://qpid.apache.org/packages.html" target="_blank" rel="noopener">Packages page</a>.</p>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="getting-started-qdr">3. Getting started</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This section shows you how to start the Dispatch Router with the default configuration settings, and distribute messages between two clients.</p>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>Dispatch Router must be installed.</p>
<div class="paragraph">
<p>For more information, see <a href="#installing-router-qdr">Installing Dispatch Router</a>.</p>
</div>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="viewing-default-router-configuration-file-qdr">3.1. Viewing the default router configuration file</h3>
<div class="paragraph">
<p>The router&#8217;s configuration file (<code>qdrouterd.conf</code>) controls the way in which the router functions. The default configuration file contains the minimum number of settings required for the router to run. As you become more familiar with the router, you can add to or change these settings, or create your own configuration files.</p>
</div>
<div class="paragraph">
<p>By default, the router configuration file defines the following settings for the router:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Operating mode</p>
</li>
<li>
<p>How it listens for incoming connections</p>
</li>
<li>
<p>Routing patterns for the message routing mechanism</p>
</li>
</ul>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Open the following file: <code>/etc/qpid-dispatch/qdrouterd.conf</code>.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>When Dispatch Router is installed, <code>qdrouterd.conf</code> is installed in this directory. When the router is started, it runs with the settings defined in this file.</p>
</div>
</div>
</div>
</li>
<li>
<p>Review the default settings in <code>qdrouterd.conf</code>.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="title">Default Configuration File</div>
<div class="content">
<pre class="nowrap">router {
    mode: standalone <b class="conum">(1)</b>
    id: Router.A <b class="conum">(2)</b>
}

listener { <b class="conum">(3)</b>
    host: 0.0.0.0
    port: amqp
    authenticatePeer: no
}

address { <b class="conum">(4)</b>
    prefix: closest
    distribution: closest
}

address {
    prefix: multicast
    distribution: multicast
}

address {
    prefix: unicast
    distribution: closest
}

address {
    prefix: exclusive
    distribution: closest
}

address {
    prefix: broadcast
    distribution: multicast
}</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>By default, the router operates in <em>standalone</em> mode. This means that it can only communicate with endpoints that are directly connected to it. It cannot connect to other routers, or participate in a router network.</p>
</li>
<li>
<p>The unique identifier of the router. This ID is used as the <code>container-id</code> (container name) at the AMQP protocol level. If it is not specified, the router shall generate a random identifier at startup.</p>
</li>
<li>
<p>The <code>listener</code> entity handles incoming connections from client endpoints. By default, the router listens on all network interfaces on the default AMQP port (5672).</p>
</li>
<li>
<p>By default, the router is configured to use the message routing mechanism. Each <code>address</code> entity defines how messages that are received with a particular address <code>prefix</code> should be distributed. For example, all messages with addresses that start with <code>closest</code> will be distributed using the <code>closest</code> distribution pattern.</p>
</li>
</ol>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>If a client requests a message with an address that is not defined in the router&#8217;s configuration file, the <code>balanced</code> distribution pattern will be used automatically.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
</li>
</ol>
</div>
<div class="ulist">
<div class="title">Additional resources</div>
<ul>
<li>
<p>For more information about the router configuration file (including available entities and attributes), see the <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.html" target="_blank" rel="noopener">qdrouterd man page</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="starting-router-getting-started-qdr">3.2. Starting the router</h3>
<div class="paragraph">
<p>After installing Dispatch Router, you start the router by using the <code>qdrouterd</code> command.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Start the router:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-bash hljs" data-lang="bash">$ qdrouterd</code></pre>
</div>
</div>
<div class="paragraph">
<p>The router starts, using the default configuration file stored at <code>/etc/qpid-dispatch/qdrouterd.conf</code>.</p>
</div>
</div>
</div>
</li>
<li>
<p>Review the <code>qdrouterd</code> command output to verify the router status.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This example shows that the router was correctly installed, is running, and is ready to route traffic between clients:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdrouterd
Fri May 20 09:38:03 2017 SERVER (info) Container Name: Router.A
Fri May 20 09:38:03 2017 ROUTER (info) Router started in Standalone mode
Fri May 20 09:38:03 2017 ROUTER (info) Router Core thread running. 0/Router.A
Fri May 20 09:38:03 2017 ROUTER (info) In-process subscription M/$management
Fri May 20 09:38:03 2017 AGENT (info) Activating management agent on $_management_internal
Fri May 20 09:38:03 2017 ROUTER (info) In-process subscription L/$management
Fri May 20 09:38:03 2017 ROUTER (info) In-process subscription L/$_management_internal
Fri May 20 09:38:03 2017 DISPLAYNAME (info) Activating DisplayNameService on $displayname
Fri May 20 09:38:03 2017 ROUTER (info) In-process subscription L/$displayname
Fri May 20 09:38:03 2017 CONN_MGR (info) Configured Listener: 0.0.0.0:amqp proto=any role=normal
Fri May 20 09:38:03 2017 POLICY (info) Policy configured maximumConnections: 0, policyFolder: '', access rules enabled: 'false'
Fri May 20 09:38:03 2017 POLICY (info) Policy fallback defaultApplication is disabled
Fri May 20 09:38:03 2017 SERVER (info) Operational, 4 Threads Running</pre>
</div>
</div>
</div>
</div>
</li>
</ol>
</div>
<div class="ulist">
<div class="title">Additional resources</div>
<ul>
<li>
<p>The <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.html" target="_blank" rel="noopener">qdrouterd man page</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="sending-test-messages-qdr">3.3. Sending test messages</h3>
<div class="paragraph">
<p>After starting the router, send some test messages to see how the router can connect two endpoints by distributing messages between them.</p>
</div>
<div class="paragraph">
<p>This procedure demonstrates a simple configuration consisting of a single router with two clients connected to it: a sender and a receiver. The receiver wants to receive messages on a specific address, and the sender sends
messages to that address.</p>
</div>
<div class="paragraph">
<p>A broker is not used in this procedure, so there is no <em>"store and forward"</em> mechanism in the middle. Instead, the messages flow from the sender, through the router, to the receiver only if the receiver is online, and the sender can confirm that the messages have arrived at their destination.</p>
</div>
<div class="paragraph">
<div class="title">Prerequisites</div>
<p>Apache Qpid Proton Python must be installed. For more information, see <a href="https://qpid.apache.org/proton/" class="bare">https://qpid.apache.org/proton/</a>.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Navigate to the Apache Qpid Proton Python examples directory.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-bash hljs" data-lang="bash">$ cd <em>&lt;install-dir&gt;</em>/examples/python/</code></pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">&lt;install-dir&gt;</dt>
<dd>
<p>The directory where you installed Apache Qpid Proton Python.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>Start the <code>simple_recv.py</code> receiver client.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-bash hljs" data-lang="bash">$ python simple_recv.py -a 127.0.0.1:5672/examples -m 5</code></pre>
</div>
</div>
<div class="paragraph">
<p>This command starts the receiver and listens on the <code>examples</code> address (<code>127.0.0.1:5672/examples</code>). The receiver is also set to receive a maximum of five messages.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>In practice, the order in which you start senders and receivers does not matter. In both cases, messages will be sent as soon as the receiver comes online.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
</li>
<li>
<p>In a new terminal window, navigate to the Python examples directory and run the <code>simple_send.py</code> example:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-bash hljs" data-lang="bash">$ cd <em>&lt;install-dir&gt;</em>/examples/python/
$ python simple_send.py -a 127.0.0.1:5672/examples -m 5</code></pre>
</div>
</div>
<div class="paragraph">
<p>This command sends five auto-generated messages to the <code>examples</code> address (<code>127.0.0.1:5672/examples</code>) and then confirms that they were delivered and acknowledged by the receiver:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-bash hljs" data-lang="bash">all messages confirmed</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Verify that the receiver client received the messages.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>The receiver client should display the contents of the five messages:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-bash hljs" data-lang="bash">{u'sequence': 1L}
{u'sequence': 2L}
{u'sequence': 3L}
{u'sequence': 4L}
{u'sequence': 5L}</code></pre>
</div>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="next-steps-qdr">3.4. Next steps</h3>
<div class="paragraph">
<p>After using Dispatch Router to distribute messages between two clients, you can use the following sections to learn more about Dispatch Router configuration, deployment, and management.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#configuring-router-qdr">Configure non-default settings for the router</a></dt>
<dd>
<p>Dispatch Router ships with default settings that are suitable for many basic use cases. You can configure the router&#8217;s essential properties, network connections, security settings, logging, and routing mechanisms.</p>
</dd>
<dt class="hdlist1"><a href="#creating-router-network-topology-qdr">Plan a Dispatch Router deployment</a></dt>
<dd>
<p>Dispatch Router is typically deployed in router networks. You can design a router network of any arbitrary topology to interconnect the endpoints in your messaging network.</p>
</dd>
<dt class="hdlist1"><a href="#monitoring-managing-router-network">Monitor and manage Dispatch Router</a></dt>
<dd>
<p>You can use the web console and command-line management tools to monitor the status and performance of the routers in your router network.</p>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="creating-router-network-topology-qdr">4. Creating a router network topology</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can deploy Dispatch Router as a single standalone router, or as multiple routers connected together in a router network. Router networks may represent any arbitrary topology, enabling you to design the network to best fit your requirements.</p>
</div>
<div class="paragraph">
<p>With Dispatch Router, the router network topology is independent from the message routing. This means that messaging clients always experience the same message routing behavior regardless of the underlying network topology. Even in a multi-site or hybrid cloud router network, the connected endpoints behave as if they were connected to a single, logical router.</p>
</div>
<div class="paragraph">
<p>To create the router network topology, complete the following:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><a href="#router-deployment-guidelines-qdr">Understand the router network deployment guidelines</a>.</p>
<div class="paragraph">
<p>You should understand the different router operating modes you can deploy in your topology, and be aware of security requirements for the interior portion of the router network.</p>
</div>
</li>
<li>
<p><a href="#router-deployment-workflow-qdr">Build the router network by deploying routers one at a time</a>.</p>
</li>
</ol>
</div>
<div class="sect2">
<h3 id="router-deployment-guidelines-qdr">4.1. Dispatch Router deployment guidelines</h3>
<div class="paragraph">
<p>To plan your router network and design the network topology, you must first understand the different router modes and how you can use them to create different types of networks.</p>
</div>
<div class="sect3">
<h4 id="router-operating-modes-qdr">4.1.1. Router operating modes</h4>
<div class="paragraph">
<p>In Dispatch Router, each router can operate in <em>standalone</em>, <em>interior</em>, or <em>edge</em> mode. In a router network, you deploy multiple interior routers or a combination of interior and edge routers to create the desired network topology.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Standalone</dt>
<dd>
<p>The router operates as a single, standalone network node. A standalone router cannot be used in a router network - it does not establish connections with other routers, and only routes messages between directly-connected endpoints.</p>
</dd>
<dt class="hdlist1">Interior</dt>
<dd>
<p>The router is part of the interior of the router network. Interior routers establish connections with each other and automatically compute the lowest cost paths across the network. You can have up to 128 interior routers in the router network.</p>
</dd>
<dt class="hdlist1">Edge</dt>
<dd>
<p>The router maintains a single uplink connection to one or more interior routers. Edge routers do not participate in the routing protocol or route computation, but they enable you to efficiently scale the routing network. There are no limits to the number of edge routers you can deploy in a router network.</p>
</dd>
</dl>
</div>
</div>
<div class="sect3">
<h4 id="security-guidelines-qdr">4.1.2. Security guidelines</h4>
<div class="paragraph">
<p>In the router network, the interior routers should be secured with a strong authentication mechanism in which they identify themselves to each other. You should choose and plan this authentication mechanism before creating the router network.</p>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
<div class="paragraph">
<p>If the interior routers are not properly secured, unauthorized routers (or endpoints pretending to be routers) could join the router network, compromising its integrity and availability.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>You can choose a security mechanism that best fits your requirements. However, you should consider the following recommendations:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Create an X.509 Certificate Authority (CA) to oversee the interior portion of the router network.</p>
</li>
<li>
<p>Generate an individual certificate for each interior router.</p>
<div class="paragraph">
<p>Each interior router can be configured to use the CA to authenticate connections from any other interior routers.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Connections from edge routers and clients can use different levels of security, depending on your requirements.</p>
</div>
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>By using these recommendations, a new interior router cannot join the network until the owner of the CA issues a new certificate for the new router. In addition, an intruder wishing to spoof an interior router cannot do so because it would not have a valid X.509 certificate issued by the network’s CA.</p>
</div>
</div>
<div class="sect3">
<h4 id="router-connection-guidelines-qdr">4.1.3. Router connection guidelines</h4>
<div class="paragraph">
<p>Before creating a router network, you should understand how routers connect to each other, and the factors that affect the direction in which an inter-router connection should be established.</p>
</div>
<h5 id="inter_router_connections_are_bidirectional" class="discrete">Inter-router connections are bidirectional</h5>
<div class="paragraph">
<p>When a connection is established between routers, message traffic flows in both directions across that connection. Each connection has a client side (a <em>connector</em>) and a server side (a <em>listener</em>) for the purposes of connection establishment. Once the connection is established, the two sides become equal participants in a bidirectional connection. For the purposes of routing AMQP traffic across the network, the direction of connection establishment is not relevant.</p>
</div>
<h5 id="factors_that_affect_the_direction_of_connection_establishment" class="discrete">Factors that affect the direction of connection establishment</h5>
<div class="paragraph">
<p>When establishing inter-router connections, you must choose which router will be the "listener" and which will be the "connector". There should be only one connection between any pair of routers.</p>
</div>
<div class="paragraph">
<p>When determining the direction of inter-router connections in the network topology, consider the following factors:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">IP network boundaries and firewalls</dt>
<dd>
<p>Generally, inter-router connections should always be established from more private to more public. For example, to connect a router in a private IP network to another router in a public location (such as a public cloud provider), the router in the private network must have the connector and the router in the public location must have the listener. This is because the public location cannot reach the private location by TCP/IP without the use of VPNs or other firewall features designed to allow public-to-private access.</p>
</dd>
<dt class="hdlist1">Network topology</dt>
<dd>
<p>The topology of the router network may affect the direction in which connections should be established between the routers. For example, a star-topology that has a series of routers connected to one or two central "hub" routers should have listeners on the hub and connectors on the spokes. That way, new spoke routers may be added without changing the configuration of the hub.</p>
</dd>
</dl>
</div>
</div>
</div>
<div class="sect2">
<h3 id="router-deployment-workflow-qdr">4.2. Dispatch Router deployment workflow</h3>
<div class="paragraph">
<p>This workflow describes the basic workflow for deploying a Dispatch Router router. To create a router network, complete this workflow for each router in the network.</p>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>Dispatch Router is installed on the host.</p>
</li>
</ul>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p><a href="#configuring-router-properties-qdr">Configure essential router properties</a>.</p>
<div class="paragraph">
<p>To participate in a router network, a router must be configured with a unique ID and an operating mode.</p>
</div>
</li>
<li>
<p><a href="#configuring-network-connections-qdr">Configure network connections</a>.</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>Connect the router to any other routers in the router network.</p>
<div class="paragraph">
<p>Repeat this step for each additional router to which you want to connect this router.</p>
</div>
</li>
<li>
<p>If the router should connect with an AMQP client, configure a client connection.</p>
</li>
<li>
<p>If the router should connect to an external AMQP container (such as a message broker), configure the connection.</p>
</li>
</ol>
</div>
</li>
<li>
<p><a href="#securing-network-connections-qdr">Secure each of the connections that you configured in the previous step</a>.</p>
</li>
<li>
<p>(Optional) Configure any additional properties.</p>
<div class="paragraph">
<p>These properties should be configured the same way on each router. Therefore, you should only configure each one once, and then copy the configuration to each additional router in the router network.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="#authorizing-access-to-messaging-resources">Authorization</a></p>
<div class="paragraph">
<p>If necessary, configure policies to control which messaging resources clients are able to access on the router network.</p>
</div>
</li>
<li>
<p><a href="#routing">Routing</a></p>
<div class="paragraph">
<p>Dispatch Router automatically routes messages without any configuration: clients can send messages to the router network, and the router automatically routes them to their destinations. However, you can configure the routing to meet your exact requirements. You can configure the routing patterns to be used for certain addresses, create waypoints and autolinks to route messages through broker queues, and create link routes to connect clients to brokers.</p>
</div>
</li>
<li>
<p><a href="#logging">Logging</a></p>
<div class="paragraph">
<p>You can set the default logging configuration to ensure that events are logged at the correct level for your environment.</p>
</div>
</li>
</ul>
</div>
</li>
<li>
<p><a href="#starting-router-qdr">Start the router</a>.</p>
</li>
<li>
<p>Repeat this workflow for each additional router that you want to add to the router network.</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="configuring-router-qdr">5. Configuring Dispatch Router</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Each Dispatch Router router contains a <code>qdrouterd.conf</code> configuration file. You edit this file to define how the router should operate.</p>
</div>
<div class="paragraph">
<p>You can do the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="#configuring-router-properties-qdr">Configure essential router properties</a></p>
</li>
<li>
<p><a href="#configuring-network-connections-qdr">Configure network connections</a></p>
</li>
<li>
<p><a href="#securing-network-connections-qdr">Secure network connections</a></p>
</li>
<li>
<p><a href="#authorizing-access-to-messaging-resources">Authorize access to messaging resources</a></p>
</li>
<li>
<p><a href="#logging">Configure logging</a></p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="configuring-router-properties-qdr">5.1. Configuring router properties</h3>
<div class="paragraph">
<p>By default, Dispatch Router operates in <code>standalone</code> mode with a randomly-generated ID. If you want to use this router in a router network, you must change these properties.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Open the <code>/etc/qpid-dispatch/qdrouterd.conf</code> configuration file.</p>
</li>
<li>
<p>In the <code>router</code> section, specify the mode and ID.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This example shows a router configured to operate in <code>interior</code> mode:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">router {
    mode: interior
    id: Router.A
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>mode</code></dt>
<dd>
<p>Specify one of the following modes:</p>
<div class="ulist">
<ul>
<li>
<p><code>standalone</code> - Use this mode if the router does not communicate with
other routers and is not part of a router network. When operating in
this mode, the router only routes messages between directly connected
endpoints.</p>
</li>
<li>
<p><code>interior</code> - Use this mode if the router is part of a router network
and needs to collaborate with other routers.</p>
</li>
<li>
<p><code>edge</code> - Use this mode if the router is an edge router that will
connect to a network of interior routers.</p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><code>id</code></dt>
<dd>
<p>The unique
identifier for the router. This ID will also be the container name at
the AMQP protocol level.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>If necessary, configure any additional properties for the router.</p>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_router">router</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="configuring-network-connections-qdr">5.2. Configuring network connections</h3>
<div class="paragraph">
<p>Dispatch Router connects clients, servers, AMQP services, and other routers through network connections. To connect the router to other messaging endpoints, you configure <em>listeners</em> to accept connections, and <em>connectors</em> to make outbound connections. However, connections are bidirectional - once the connection is established, message traffic flows in both directions.</p>
</div>
<div class="paragraph">
<p>You can do the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="#connecting-routers-qdr">Connect a router to another router</a></p>
</li>
<li>
<p><a href="#listening-client-connections-qdr">Listen for client connections</a></p>
</li>
<li>
<p><a href="#connecting-to-external-amqp-containers-qdr">Connect a router to an external AMQP container</a></p>
</li>
<li>
<p><a href="#understanding-connection-failover-qdr">Understand connection failover</a></p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="connecting-routers-qdr">5.2.1. Connecting routers</h4>
<div class="paragraph">
<p>To connect a router to another router in the router network, you configure a <code>connector</code> on one router to create the outbound connection, and a <code>listener</code> on the other router to accept the connection.</p>
</div>
<div class="paragraph">
<p>Because connections are bidirectional, there should only be one connection between any pair of routers. Once the connection is established, message traffic flows in both directions.</p>
</div>
<div class="paragraph">
<p>This procedure describes how to connect a router to another router in the router network.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Determine the direction of the connection.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>Decide which router should be the "connector", and which should be the "listener". The direction of the connection establishment is sometimes arbitrary, but consider the following factors:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">IP network boundaries and firewalls</dt>
<dd>
<p>Generally, inter-router connections should always be established from more private to more public. For example, to connect a router in a private IP network to another router in a public location (such as a public cloud provider), the router in the private network must be the "connector" and the router in the public location must be the "listener". This is because the public location cannot reach the private location by TCP/IP without the use of VPNs or other firewall features designed to allow public-to-private access.</p>
</dd>
<dt class="hdlist1">Network topology</dt>
<dd>
<p>The topology of the router network may affect the direction in which connections should be established between the routers. For example, a star-topology that has a series of routers connected to one or two central "hub" routers should have "listeners" on the hub and "connectors" on the spokes. That way, new spoke routers may be added without changing the configuration of the hub.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>On the router that should create the connection, open the <code>/etc/qpid-dispatch/qdrouterd.conf</code> configuration file and add a <code>connector</code>.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This example creates a <code>connector</code> for an inter-router connection between two interior routers:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    host: 192.0.2.1
    port: 5001
    role: inter-router
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>host</code></dt>
<dd>
<p>The IP address (IPv4 or IPv6) or hostname on which the router will connect.</p>
</dd>
<dt class="hdlist1"><code>port</code></dt>
<dd>
<p>The port number or symbolic service name on which the router will connect.</p>
</dd>
<dt class="hdlist1"><code>role</code></dt>
<dd>
<p>The role of the connection. If the connection is between two interior routers, specify <code>inter-router</code>. If the connection is between an interior router and an edge router, specify <code>edge</code>.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>On the router that should accept the connection establishment, open the <code>/etc/qpid-dispatch/qdrouterd.conf</code> configuration file and verify that an inter-router <code>listener</code> is configured.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This example creates a <code>listener</code> to accept the connection establishment configured in the previous step:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    host: 0.0.0.0
    port: 5001
    role: inter-router
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>host</code></dt>
<dd>
<p>The IP address (IPv4 or IPv6) or hostname on which the router will listen.</p>
</dd>
<dt class="hdlist1"><code>port</code></dt>
<dd>
<p>The port number or symbolic service name on which the router will listen.</p>
</dd>
<dt class="hdlist1"><code>role</code></dt>
<dd>
<p>The role of the connection. If the connection is between two interior routers, specify <code>inter-router</code>. If the connection is between an interior router and an edge router, specify <code>edge</code>.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>If the router should connect to any other routers, repeat this procedure.</p>
<div class="paragraph">
<p>Edge routers can only connect to interior routers. They cannot connect to other edge routers.</p>
</div>
</li>
</ol>
</div>
<div class="ulist">
<div class="title">Additional resources</div>
<ul>
<li>
<p>After connecting a router to another router, secure the connection.</p>
<div class="paragraph">
<p>For more information, see <a href="#securing-connections-between-routers-qdr">Securing connections between routers</a>.</p>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="listening-client-connections-qdr">5.2.2. Listening for client connections</h4>
<div class="paragraph">
<p>To enable a router to listen for and accept connections from AMQP clients, you configure a <code>listener</code>.</p>
</div>
<div class="paragraph">
<p>Once the connection is enabled on the router, clients can connect to it using the same methods they use to connect to a broker. From the client&#8217;s perspective, the router connection and link establishment are identical to a broker connection and link establishment.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Instead of configuring a <code>listener</code> to listen for connections from the client, you can configure a <code>connector</code> to initiate connections to the client. In this case, the router will use the <code>connector</code> to initiate the connection, but it will not create any links. Links are only created by the peer that accepts the connection.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Open the <code>/etc/qpid-dispatch/qdrouterd.conf</code> configuration file.</p>
</li>
<li>
<p>Configure a <code>listener</code> with the <code>normal</code> role.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    host: primary.example.com
    port: 5672
    role: normal
    failoverUrls: secondary.example.com:20000, tertiary.example.com
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>host</code></dt>
<dd>
<p>The IP address (IPv4 or IPv6) or hostname on which the router will listen.</p>
</dd>
<dt class="hdlist1"><code>port</code></dt>
<dd>
<p>The port number or symbolic service name on which the router will listen.</p>
</dd>
<dt class="hdlist1"><code>role</code></dt>
<dd>
<p>The role of the connection. Specify <code>normal</code> to indicate that this connection is used for message delivery for AMQP clients.</p>
</dd>
<dt class="hdlist1"><code>failoverUrls</code> (optional)</dt>
<dd>
<p>A comma-separated list of backup URLs the client can use to reconnect if the established connection is lost. Each URL must use the following form:</p>
<div class="paragraph">
<p><code>[(amqp|amqps|ws|wss)://](<em>HOST</em>|<em>IP ADDRESS</em>)[:port]</code></p>
</div>
<div class="paragraph">
<p>For more information, see <a href="#understanding-connection-failover-qdr">Understanding connection failover</a>.</p>
</div>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ol>
</div>
<div class="ulist">
<div class="title">Additional resources</div>
<ul>
<li>
<p>After enabling a router to listen for client connections, secure the connection.</p>
<div class="paragraph">
<p>For more information, see <a href="#securing-incoming-client-connections-qdr">Securing incoming client connections</a>.</p>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="connecting-to-external-amqp-containers-qdr">5.2.3. Connecting to external AMQP containers</h4>
<div class="paragraph">
<p>To enable a router to establish a connection to an external AMQP container (such as a message broker), you configure a <code>connector</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Instead of configuring a <code>connector</code> to initiate connections to the AMQP container, you can configure a <code>listener</code> to listen for connections from the AMQP container. However, in this case, the addresses on the AMQP container are available for routing only after the AMQP container has created a connection.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Open the <code>/etc/qpid-dispatch/qdrouterd.conf</code> configuration file.</p>
</li>
<li>
<p>Configure a <code>connector</code> with the <code>route-container</code> role.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This example creates a <code>connector</code> that initiates connections to a broker. The addresses on the broker will be available for routing once the router creates the connection and it is accepted by the broker.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    name: my-broker
    host: 192.0.2.10
    port: 5672
    role: route-container
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>name</code></dt>
<dd>
<p>The name of the <code>connector</code>. Specify a name that describes the entity to which the router will connect.</p>
</dd>
<dt class="hdlist1"><code>host</code></dt>
<dd>
<p>The IP address (IPv4 or IPv6) or hostname to which the router will connect.</p>
</dd>
<dt class="hdlist1"><code>port</code></dt>
<dd>
<p>The port number or symbolic service name to which the router will connect.</p>
</dd>
<dt class="hdlist1"><code>role</code></dt>
<dd>
<p>The role of the connection. Specify <code>route-container</code> to indicate that this connection is for an AMQP container that holds known addresses.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ol>
</div>
<div class="ulist">
<div class="title">Additional resources</div>
<ul>
<li>
<p>After enabling a router to connect to an external AMQP container, configure any necessary security credentials.</p>
<div class="paragraph">
<p>For more information, see <a href="#securing-outgoing-connections-qdr">Securing outgoing connections</a>.</p>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="understanding-connection-failover-qdr">5.2.4. Understanding connection failover</h4>
<div class="paragraph">
<p>If a connection between a router and a remote host fails, connection failover enables the connection to be reestablished automatically on an alternate URL.</p>
</div>
<div class="paragraph">
<p>A router can use connection failover for both incoming and outgoing connections.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Connection failover for outgoing connections</dt>
<dd>
<p>By default, when you configure a <code>connector</code> on a router, the router attempts to maintain an open network transport connection to the configured remote host and port. If the connection cannot be established, the router continually retries until the connection is established. If the connection is established and then fails, the router immediately attempts to reestablish the connection.</p>
<div class="paragraph">
<p>When the router establishes a connection to a remote host, the client may provide the router with alternate connection information (sometimes called failover lists) that it can use if the connection is lost. In these cases, rather than attempting to reestablish the connection on the same host, the router will also try the alternate hosts.</p>
</div>
<div class="paragraph">
<p>Connection failover is particularly useful when the router establishes outgoing connections to a cluster of servers providing the same service.</p>
</div>
</dd>
<dt class="hdlist1">Connection failover for incoming connections</dt>
<dd>
<p>You can configure a <code>listener</code> on a router to provide a list of failover URLs to be used as backups. If the connection is lost, the client can use these failover URLs to reestablish the connection to the router.</p>
</dd>
</dl>
</div>
</div>
</div>
<div class="sect2">
<h3 id="securing-network-connections-qdr">5.3. Securing network connections</h3>
<div class="paragraph">
<p>You can configure Dispatch Router to communicate with clients, routers, and brokers in a secure way by authenticating and encrypting the router’s connections. Dispatch Router supports the following security protocols:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>SSL/TLS for certificate-based encryption and mutual authentication</p>
</li>
<li>
<p>SASL for authentication with mechanisms</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You configure SSL/TLS, SASL (or a combination of both) to secure any of the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="#securing-connections-between-routers-qdr">Secure connections between routers</a></p>
</li>
<li>
<p><a href="#securing-incoming-client-connections-qdr">Secure incoming client connections</a></p>
</li>
<li>
<p><a href="#securing-outgoing-connections-qdr">Secure outgoing connections</a></p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="securing-connections-between-routers-qdr">5.3.1. Securing connections between routers</h4>
<div class="paragraph">
<p>Connections between interior routers should be secured with SSL/TLS encryption and authentication (also called mutual authentication) to prevent unauthorized routers (or endpoints pretending to be routers) from joining the network.</p>
</div>
<div class="paragraph">
<p>SSL/TLS mutual authentication requires an X.509 Certificate Authority (CA) with individual certificates generated for each interior router. Connections between the interior routers are encrypted, and the CA authenticates each incoming inter-router connection.</p>
</div>
<div class="paragraph">
<p>This procedure describes how to secure a connection between two interior routers using SSL/TLS mutual authentication.</p>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>An X.509 Certificate Authority must exist for the interior routers.</p>
</li>
<li>
<p>A security certificate must be generated for each router and be signed by the CA.</p>
</li>
<li>
<p>An inter-router connection must exist between the routers.</p>
<div class="paragraph">
<p>For more information, see <a href="#connecting-routers-qdr">Connecting routers</a>.</p>
</div>
</li>
</ul>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>On the router that establishes the connection, do the following:</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>Open the <code>/etc/qpid-dispatch/qdrouterd.conf</code>.</p>
</li>
<li>
<p>If the router does not contain an <code>sslProfile</code> that defines the private keys and certificates for the inter-router network, then add one.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This <code>sslProfile</code> contains the locations of the private key and certificates that the router uses to authenticate with its peer.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">sslProfile {
    name: inter-router-tls
    certFile: /etc/qpid-dispatch-certs/inter-router/tls.crt
    caCertFile: /etc/qpid-dispatch-certs/inter-router/ca.crt
    privateKeyFile: /etc/qpid-dispatch-certs/inter-router/tls.key
    password: file:/etc/qpid-dispatch-certs/inter-router/password.txt
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>name</code></dt>
<dd>
<p>A unique name that you can use to refer to this <code>sslProfile</code>.</p>
</dd>
<dt class="hdlist1"><code>certFile</code></dt>
<dd>
<p>The absolute path to the file containing the public certificate for this router.</p>
</dd>
<dt class="hdlist1"><code>caCertFile</code></dt>
<dd>
<p>The absolute path to the CA certificate that was used to sign the router&#8217;s certificate.</p>
</dd>
<dt class="hdlist1"><code>privateKeyFile</code></dt>
<dd>
<p>The absolute path to the file containing the private key for this router&#8217;s public certificate.</p>
</dd>
</dl>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>password</code></dt>
<dd>
<p>The password to unlock the certificate key. You do not need to specify this if the certificate key does not have a password. By using different prefixes, you can specify the password several different ways depending on your security requirements:</p>
<div class="ulist">
<ul>
<li>
<p>Specify the absolute path to a file that contains the password. This is the most secure option, because you can set permissions on the file that contains the password. For example:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">password: file:/etc/qpid-dispatch-certs/inter-router/password.txt</pre>
</div>
</div>
</li>
<li>
<p>Specify an environment variable that stores the password. Use this option with caution, because the environment of other processes is visible on certain platforms. For example:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">password: env:CERT_PASSWORD</pre>
</div>
</div>
</li>
<li>
<p>Specify the password in clear text. This option is insecure, so it should only be used if security is not a concern. For example:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">password: pass:mycertpassword</pre>
</div>
</div>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>Configure the inter-router <code>connector</code> for this connection to use the <code>sslProfile</code> that you created.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    host: 192.0.2.1
    port: 5001
    role: inter-router
    sslProfile: inter-router-tls
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>sslProfile</code></dt>
<dd>
<p>The name of the <code>sslProfile</code> that defines the SSL/TLS private keys and certificates for the inter-router network.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ol>
</div>
</li>
<li>
<p>On the router that listens for the connection, do the following:</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>Open the <code>/etc/qpid-dispatch/qdrouterd.conf</code>.</p>
</li>
<li>
<p>If the router does not contain an <code>sslProfile</code> that defines the private keys and certificates for the inter-router network, then add one.</p>
</li>
<li>
<p>Configure the inter-router <code>listener</code> for this connection to use SSL/TLS to secure the connection.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    host: 0.0.0.0
    port: 5001
    role: inter-router
    sslProfile: inter_router_tls
    authenticatePeer: yes
    requireSsl: yes
    saslMechanisms: EXTERNAL
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>sslProfile</code></dt>
<dd>
<p>The name of the <code>sslProfile</code> that defines the SSL/TLS private keys and certificates for the inter-router network.</p>
</dd>
<dt class="hdlist1"><code>authenticatePeer</code></dt>
<dd>
<p>Specify <code>yes</code> to authenticate the peer interior router&#8217;s identity.</p>
</dd>
<dt class="hdlist1"><code>requireSsl</code></dt>
<dd>
<p>Specify <code>yes</code> to encrypt the connection with SSL/TLS.</p>
</dd>
<dt class="hdlist1"><code>saslMechanisms</code></dt>
<dd>
<p>Specify <code>EXTERNAL</code> to enable X.509 client certificate authentication.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ol>
</div>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="securing-incoming-client-connections-qdr">5.3.2. Securing incoming client connections</h4>
<div class="paragraph">
<p>You can use SSL/TLS and SASL to provide the appropriate level of security for client traffic into the router network. You can use the following methods to secure incoming connections to a router from AMQP clients, external containers, or edge routers:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="#enabling-ssl-tls-encryption-qdr">Enable SSL/TLS encryption</a></p>
</li>
<li>
<p><a href="#enabling-ssl-tls-client-authentication-qdr">Enable SSL/TLS client authentication</a></p>
</li>
<li>
<p><a href="#enabling-username-password-authentication-qdr">Enable user name and password authentication</a></p>
</li>
<li>
<p><a href="#integrating-with-kerberos-qdr">Integrate with Kerberos</a></p>
</li>
</ul>
</div>
<div class="sect4">
<h5 id="enabling-ssl-tls-encryption-qdr">Enabling SSL/TLS encryption</h5>
<div class="paragraph">
<p>You can use SSL/TLS to encrypt an incoming connection from a client.</p>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>An X.509 Certificate Authority (CA) must exist for the client connections.</p>
</li>
<li>
<p>A security certificate must be generated and signed by the CA.</p>
</li>
</ul>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Open the <code>/etc/qpid-dispatch/qdrouterd.conf</code> configuration file.</p>
</li>
<li>
<p>If the router does not contain an <code>sslProfile</code> that defines the private keys and certificates for client connections, then add one.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This <code>sslProfile</code> contains the locations of the private key and certificates that the router should use to encrypt connections from clients.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">sslProfile {
    name: service-tls
    certFile: /etc/qpid-dispatch-certs/normal/tls.crt
    caCertFile: /etc/qpid-dispatch-certs/client-ca/ca.crt
    privateKeyFile: /etc/qpid-dispatch-certs/normal/tls.key
    password: file:/etc/qpid-dispatch-certs/inter-router/password.txt
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>name</code></dt>
<dd>
<p>A unique name that you can use to refer to this <code>sslProfile</code>.</p>
</dd>
<dt class="hdlist1"><code>certFile</code></dt>
<dd>
<p>The absolute path to the file containing the public certificate for this router.</p>
</dd>
<dt class="hdlist1"><code>caCertFile</code></dt>
<dd>
<p>The absolute path to the CA certificate that was used to sign the router&#8217;s certificate.</p>
</dd>
<dt class="hdlist1"><code>privateKeyFile</code></dt>
<dd>
<p>The absolute path to the file containing the private key for this router&#8217;s public certificate.</p>
</dd>
</dl>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>password</code></dt>
<dd>
<p>The password to unlock the certificate key. You do not need to specify this if the certificate key does not have a password. By using different prefixes, you can specify the password several different ways depending on your security requirements:</p>
<div class="ulist">
<ul>
<li>
<p>Specify the absolute path to a file that contains the password. This is the most secure option, because you can set permissions on the file that contains the password. For example:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">password: file:/etc/qpid-dispatch-certs/inter-router/password.txt</pre>
</div>
</div>
</li>
<li>
<p>Specify an environment variable that stores the password. Use this option with caution, because the environment of other processes is visible on certain platforms. For example:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">password: env:CERT_PASSWORD</pre>
</div>
</div>
</li>
<li>
<p>Specify the password in clear text. This option is insecure, so it should only be used if security is not a concern. For example:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">password: pass:mycertpassword</pre>
</div>
</div>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>Configure the <code>listener</code> for this connection to use SSL/TLS to encrypt the connection.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This example configures a <code>normal</code> listener to encrypt connections from clients.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    host: 0.0.0.0
    port: 5672
    role: normal
    sslProfile: inter_router_tls
    requireSsl: yes
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>sslProfile</code></dt>
<dd>
<p>The name of the <code>sslProfile</code> that defines the SSL/TLS private keys and certificates for client connections.</p>
</dd>
<dt class="hdlist1"><code>requireSsl</code></dt>
<dd>
<p>Specify <code>true</code> to encrypt the connection with SSL/TLS.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="enabling-ssl-tls-client-authentication-qdr">Enabling SSL/TLS client authentication</h5>
<div class="paragraph">
<p>In addition to SSL/TLS encryption, you can also use SSL/TLS to authenticate an incoming connection from a client. With this method, a clients must present its own X.509 certificate to the router, which the router uses to verify the client&#8217;s identity.</p>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>SSL/TLS encryption must be configured.</p>
<div class="paragraph">
<p>For more information, see <a href="#enabling-ssl-tls-encryption-qdr">Enabling SSL/TLS encryption</a>.</p>
</div>
</li>
<li>
<p>The client must have an X.509 certificate that it can use to authenticate to the router.</p>
</li>
</ul>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Open the <code>/etc/qpid-dispatch/qdrouterd.conf</code> configuration file.</p>
</li>
<li>
<p>Configure the <code>listener</code> for this connection to use SSL/TLS to authenticate the client.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This example adds SSL/TLS authentication to a <code>normal</code> listener to authenticate incoming connections from a client. The client will only be able to connect to the router by presenting its own X.509 certificate to the router, which the router will use to verify the client&#8217;s identity.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    host: 0.0.0.0
    port: 5672
    role: normal
    sslProfile: service-tls
    requireSsl: yes
    authenticatePeer: yes
    saslMechanisms: EXTERNAL
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>authenticatePeer</code></dt>
<dd>
<p>Specify <code>yes</code> to authenticate the client&#8217;s identity.</p>
</dd>
<dt class="hdlist1"><code>saslMechanisms</code></dt>
<dd>
<p>Specify <code>EXTERNAL</code> to enable X.509 client certificate authentication.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="enabling-username-password-authentication-qdr">Enabling user name and password authentication</h5>
<div class="paragraph">
<p>You can use the SASL PLAIN mechanism to authenticate incoming client connections against a set of user names and passwords. You can use this method by itself, or you can combine it with SSL/TLS encryption.</p>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>A SASL database containing the usernames and passwords exists.</p>
</li>
<li>
<p>The SASL configuration file is configured.</p>
<div class="paragraph">
<p>By default, this file should be <code>/etc/sasl2/qdrouterd.conf</code>.</p>
</div>
</li>
<li>
<p>The <code>cyrus-sasl-plain</code> plugin is installed.</p>
<div class="paragraph">
<p>Cyrus SASL uses plugins to support specific SASL mechanisms. Before you can use a particular SASL mechanism, the relevant plugin must be installed.</p>
</div>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>To see a list of Cyrus SASL plugins in a <code>dnf</code>-based Linux system, use the <code>dnf search cyrus-sasl</code> command. To install a Cyrus SASL plugin, use the <code>dnf install <em>PLUGIN</em></code> command.</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Open the <code>/etc/qpid-dispatch/qdrouterd.conf</code> configuration file.</p>
</li>
<li>
<p>In the <code>router</code> section, specify the path to the SASL configuration file.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">router {
    mode: interior
    id: Router.A
    saslConfigDir: /etc/sasl2/
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>saslConfigDir</code></dt>
<dd>
<p>The absolute path to the SASL configuration file that contains the path to the SASL database that stores the user names and passwords.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>Configure the <code>listener</code> for this connection to authenticate clients using SASL PLAIN.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This example configures basic user name and password authentication for a <code>listener</code>. In this case, no SSL/TLS encryption is being used.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    host: 0.0.0.0
    port: 5672
    authenticatePeer: yes
    saslMechanisms: PLAIN
    }</pre>
</div>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="integrating-with-kerberos-qdr">Integrating with Kerberos</h5>
<div class="paragraph">
<p>If you have implemented Kerberos in your environment, you can use it with the <code>GSSAPI</code> SASL mechanism to authenticate incoming connections.</p>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>A Kerberos infrastructure must be deployed in your environment.</p>
</li>
<li>
<p>In the Kerberos environment, a service principal of <code>amqp/&lt;hostname&gt;@&lt;realm&gt;</code> must be configured.</p>
<div class="paragraph">
<p>This is the service principal that Dispatch Router uses.</p>
</div>
</li>
<li>
<p>The <code>cyrus-sasl-gssapi</code> package must be installed on each client and the router host machine.</p>
</li>
</ul>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>On the router&#8217;s host machine, open the <code>/etc/sasl2/qdrouterd.conf</code> configuration file.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This example shows a <code>/etc/sasl2/qdrouterd.conf</code> configuration file:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">pwcheck_method: auxprop
auxprop_plugin: sasldb
sasldb_path: qdrouterd.sasldb
keytab: /etc/krb5.keytab
mech_list: ANONYMOUS DIGEST-MD5 EXTERNAL PLAIN GSSAPI</pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Verify the following:</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>The <code>mech_list</code> attribute contains the <code>GSSAPI</code> mechanism.</p>
</li>
<li>
<p>The <code>keytab</code> attribute points to the location of the keytab file.</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>Open the <code>/etc/qpid-dispatch/qdrouterd.conf</code> configuration file.</p>
</li>
<li>
<p>In the <code>router</code> section, specify the path to the SASL configuration file.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">router {
    mode: interior
    id: Router.A
    saslConfigDir: /etc/sasl2/
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>saslConfigDir</code></dt>
<dd>
<p>The absolute path to the SASL configuration file that contains the path to the SASL database.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>For each incoming connection using Kerberos for authentication, set the <code>listener</code> to use the <code>GSSAPI</code> mechanism.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre>listener {
    host: 0.0.0.0
    port: 5672
    authenticatePeer: yes
    saslMechanisms: GSSAPI
    }</pre>
</div>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect3">
<h4 id="securing-outgoing-connections-qdr">5.3.3. Securing outgoing connections</h4>
<div class="paragraph">
<p>If a router is configured to create connections to external AMQP containers (such as message brokers), you can use the following methods to secure the connection:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="#connecting-using-one-way-ssl-tls-authentication-qdr">Connect using SSL/TLS encryption (one-way authentication)</a></p>
</li>
<li>
<p><a href="#connecting-using-mutual-ssl-tls-authentication-qdr">Connect using SSL/TLS mutual authentication</a></p>
</li>
<li>
<p><a href="#connecting-using-username-password-authentication-qdr">Connect using user name and password authentication (with or without SSL/TLS encryption)</a></p>
</li>
</ul>
</div>
<div class="sect4">
<h5 id="connecting-using-one-way-ssl-tls-authentication-qdr">Connecting using one-way SSL/TLS authentication</h5>
<div class="paragraph">
<p>You can connect to an external AMQP container (such as a broker) using one-way SSL/TLS. With this method, the router validates the external AMQP container&#8217;s server certificate to verify its identity.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Open the <code>/etc/qpid-dispatch/qdrouterd.conf</code> configuration file.</p>
</li>
<li>
<p>If the router does not contain an <code>sslProfile</code> that defines a certificate that can be used to validate the external AMQP container&#8217;s identity, then add one.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">sslProfile {
    name: broker-tls
    caCertFile: /etc/qpid-dispatch-certs/ca.crt
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>name</code></dt>
<dd>
<p>A unique name that you can use to refer to this <code>sslProfile</code>.</p>
</dd>
<dt class="hdlist1"><code>caCertFile</code></dt>
<dd>
<p>The absolute path to the CA certificate used to verify the external AMQP container&#8217;s identity.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>Configure the <code>connector</code> for this connection to use SSL/TLS to validate the server certificate received by the broker during the SSL handshake.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This example configures a <code>connector</code> to a broker. When the router connects to the broker, it will use the CA certificate defined in the <code>broker-tls</code> <code>sslProfile</code> to validate the server certificate received from the broker.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    host: 192.0.2.1
    port: 5672
    role: route-container
    sslProfile: broker-tls
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>sslProfile</code></dt>
<dd>
<p>The name of the <code>sslProfile</code> that defines the certificate to use to validate the external AMQP container&#8217;s identity.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="connecting-using-mutual-ssl-tls-authentication-qdr">Connecting using mutual SSL/TLS authentication</h5>
<div class="paragraph">
<p>You can connect to an external AMQP container (such as a broker) using mutual SSL/TLS authentication. With this method, the router, acting as a client, provides a certificate to the external AMQP container so that it can verify the router&#8217;s identity.</p>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>An X.509 Certificate Authority (CA) must exist for the router.</p>
</li>
<li>
<p>A security certificate must be generated for the router and be signed by the CA.</p>
</li>
</ul>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Open the <code>/etc/qpid-dispatch/qdrouterd.conf</code> configuration file.</p>
</li>
<li>
<p>If the router does not contain an <code>sslProfile</code> that defines the private keys and certificates to connect to the external AMQP container, then add one.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This <code>sslProfile</code> contains the locations of the private key and certificates that the router should use to authenticate with its peer.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">sslProfile {
    name: broker-tls
    certFile: /etc/qpid-dispatch-certs/tls.crt
    privateKeyFile: /etc/qpid-dispatch-certs/tls.key
    caCertFile: /etc/qpid-dispatch-certs/ca.crt
    password: file:/etc/qpid-dispatch-certs/password.txt
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>name</code></dt>
<dd>
<p>A unique name that you can use to refer to this <code>sslProfile</code>.</p>
</dd>
<dt class="hdlist1"><code>certFile</code></dt>
<dd>
<p>The absolute path to the file containing the public certificate for this router.</p>
</dd>
<dt class="hdlist1"><code>caCertFile</code></dt>
<dd>
<p>The absolute path to the CA certificate that was used to sign the router&#8217;s certificate.</p>
</dd>
<dt class="hdlist1"><code>privateKeyFile</code></dt>
<dd>
<p>The absolute path to the file containing the private key for this router&#8217;s public certificate.</p>
</dd>
</dl>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>password</code></dt>
<dd>
<p>The password to unlock the certificate key. You do not need to specify this if the certificate key does not have a password. By using different prefixes, you can specify the password several different ways depending on your security requirements:</p>
<div class="ulist">
<ul>
<li>
<p>Specify the absolute path to a file that contains the password. This is the most secure option, because you can set permissions on the file that contains the password. For example:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">password: file:/etc/qpid-dispatch-certs/inter-router/password.txt</pre>
</div>
</div>
</li>
<li>
<p>Specify an environment variable that stores the password. Use this option with caution, because the environment of other processes is visible on certain platforms. For example:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">password: env:CERT_PASSWORD</pre>
</div>
</div>
</li>
<li>
<p>Specify the password in clear text. This option is insecure, so it should only be used if security is not a concern. For example:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">password: pass:mycertpassword</pre>
</div>
</div>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>Configure the <code>connector</code> for this connection to use the <code>sslProfile</code> that you created.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    host: 192.0.2.1
    port: 5672
    role: route-container
    sslProfile: broker-tls
    saslMechanisms: EXTERNAL
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>sslProfile</code></dt>
<dd>
<p>The name of the <code>sslProfile</code> that defines the SSL/TLS private keys and certificates for the inter-router network.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="connecting-using-username-password-authentication-qdr">Connecting using user name and password authentication</h5>
<div class="paragraph">
<p>You can use the SASL PLAIN mechanism to connect to an external AMQP container that requires a user name and password. You can use this method by itself, or you can combine it with SSL/TLS encryption.</p>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>The <code>cyrus-sasl-plain</code> plugin is installed.</p>
<div class="paragraph">
<p>Cyrus SASL uses plugins to support specific SASL mechanisms. Before you can use a particular SASL mechanism, the relevant plugin must be installed.</p>
</div>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>To see a list of Cyrus SASL plugins in a <code>dnf</code>-based Linux system, use the <code>dnf search cyrus-sasl</code> command. To install a Cyrus SASL plugin, use the <code>dnf install <em>PLUGIN</em></code> command.</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Open the <code>/etc/qpid-dispatch/qdrouterd.conf</code> configuration file.</p>
</li>
<li>
<p>Configure the <code>connector</code> for this connection to provide user name and password credentials to the external AMQP container.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    host: 192.0.2.1
    port: 5672
    role: route-container
    saslMechanisms: PLAIN
    saslUsername: user
    saslPassword: file:/path/to/file/password.txt
    }</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>saslPassword</code></dt>
<dd>
<p>The password to connect to the peer. By using different prefixes, you can specify the password several different ways depending on your security requirements:</p>
<div class="ulist">
<ul>
<li>
<p>Specify the absolute path to a file that contains the password. This is the most secure option, because you can set permissions on the file that contains the password. For example:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">password: file:/path/to/file/password.txt</pre>
</div>
</div>
</li>
<li>
<p>Specify an environment variable that stores the password. Use this option with caution, because the environment of other processes is visible on certain platforms. For example:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">password: env:PASSWORD</pre>
</div>
</div>
</li>
<li>
<p>Specify the password in clear text. This option is insecure, so it should only be used if security is not a concern. For example:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">password: pass:mypassword</pre>
</div>
</div>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="authorizing-access-to-messaging-resources">5.4. Authorizing Access to Messaging Resources</h3>
<div class="paragraph">
<p>You can configure <em>policies</em> to secure messaging resources in your messaging environment. Policies ensure that only authorized users can access messaging endpoints through the router network, and that the resources on those endpoints are used in an authorized way.</p>
</div>
<div class="paragraph">
<p>Dispatch Router provides the following types of policies:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Global policies</dt>
<dd>
<p>Settings for the router. A global policy defines the maximum number of incoming user connections for the router (across all messaging endpoints), and defines how the router should use vhost policies.</p>
</dd>
<dt class="hdlist1">Vhost policies</dt>
<dd>
<p>Connection and AMQP resource limits for a router ingress port (called an AMQP virtual host, or vhost). A vhost policy defines what a client using a particular connection can access on any messaging endpoint in the router network.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>The resource limits defined in global and vhost policies are applied to user connections only. The limits do not affect inter-router connections or router connections that are outbound to waypoints.</p>
</div>
<div class="paragraph">
<p>Access to an AMQP resource allowed by policy for a given user connection to a given vhost is granted across the entire router network. Access restrictions are applied only at the router port to which a client is connected and only to resource requests originated by the client.</p>
</div>
<div class="sect3">
<h4 id="how_dispatch_router_enforces_connection_and_resource_limits">5.4.1. How Dispatch Router Enforces Connection and Resource Limits</h4>
<div class="paragraph">
<p>Dispatch Router uses policies to determine whether to permit a connection, and if it is permitted, to apply the appropriate resource limits.</p>
</div>
<div class="paragraph">
<p>When a client creates a connection to the router, the router first determines whether to allow or deny the connection. This decision is based on the following criteria:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Whether the connection will exceed the router’s global connection limit (defined in the global policy)</p>
</li>
<li>
<p>Whether the connection will exceed the vhost’s connection limits (defined in the vhost policy that matches the host to which the connection is directed)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the connection is allowed, the router assigns the user (the authenticated user name from the connection) to a user group, and enforces the user group’s resource limits for the lifetime of the connection.</p>
</div>
</div>
<div class="sect3">
<h4 id="setting_global_connection_limits">5.4.2. Setting Global Connection Limits</h4>
<div class="paragraph">
<p>You can set the incoming connection limit for the router. This limit defines the total number of concurrent client connections that can be open for this router.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In the router configuration file, add a <code>policy</code> section and set the <code>maxConnections</code>.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">policy {
    maxConnections: 10000
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>maxConnections</code></dt>
<dd>
<p>This limit is always enforced, even if no other policy settings have been defined. The limit is applied to all incoming connections regardless of remote host, authenticated user, or targeted vhost. The default (and the maximum) value is <code>65535</code>.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="setting_connection_and_resource_limits_for_messaging_endpoints">5.4.3. Setting Connection and Resource Limits for Messaging Endpoints</h4>
<div class="paragraph">
<p>You can define the connection limit and AMQP resource limits for a messaging endpoint by configuring a <em>vhost policy</em>. Vhost policies define what resources clients are permitted to access on a messaging endpoint over a particular connection.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>A vhost is typically the name of the host to which the client connection is directed. For example, if a client application opens a connection to the <code>amqp://mybroker.example.com:5672/queue01</code> URL, the vhost would be <code>mybroker.example.com</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>You can create vhost policies using either of the following methods:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="#configuring-vhost-policies-router">Configure vhost policies directly in the router configuration file</a></p>
</li>
<li>
<p><a href="#configuring-vhost-policies-json">Configure vhost policies as JSON files</a></p>
</li>
</ul>
</div>
<div class="sect4">
<h5 id="enabling-vhost-policies">Enabling Vhost Policies</h5>
<div class="paragraph">
<p>You must enable the router to use vhost policies before you can create the policies.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In the router configuration file, add a <code>policy</code> section if one does not exist, and enable vhost policies for the router.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">policy {
    ...
    enableVhostPolicy: true
    enableVhostNamePatterns: true | false
    defaultVhost: $default
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>enableVhostPolicy</code></dt>
<dd>
<p>Enables the router to enforce the connection denials and resource limits defined in the configured vhost policies. The default is <code>false</code>, which means that the router will not enforce any vhost policies.</p>
</dd>
<dt class="hdlist1"><code>enableVhostNamePatterns</code></dt>
<dd>
<p>Enables pattern matching for vhost hostnames. If set to <code>true</code>, you can use wildcards to specify a range of hostnames for a vhost. If set to <code>false</code>, vhost hostnames are treated as literal strings. This means that you must specify the exact hostname for each vhost. The default is <code>false</code>.</p>
</dd>
<dt class="hdlist1"><code>defaultVhost</code></dt>
<dd>
<p>The name of the default vhost policy, which is applied to any connection for which a vhost policy has not been configured. The default is <code>$default</code>. If <code>defaultVhost</code> is not defined, then default vhost processing is disabled.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect4">
<h5 id="configuring-vhost-policies-router">Configuring Vhost Policies in the Router Configuration File</h5>
<div class="paragraph">
<p>You can configure vhost policies in the router configuration file by configuring <code>vhost</code> entities. However, if multiple routers in your router network should be configured with the same vhost configuration, you will need to add the vhost configuration to each router’s configuration file.</p>
</div>
<div class="paragraph">
<div class="title">Prerequisites</div>
<p>Vhost policies must be enabled for the router. For more information, see <a href="#enabling-vhost-policies">Enabling Vhost Policies</a>.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Add a <code>vhost</code> section and define the connection limits for the messaging endpoint.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>The connection limits apply to all users that are connected to the vhost. These limits control the number of users that can be connected simultaneously to the vhost.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">vhost {
    hostname: example.com
    maxConnections: 10000
    maxConnectionsPerUser: 100
    maxConnectionsPerHost: 100
    allowUnknownUser: true
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>hostname</code></dt>
<dd>
<p>The literal hostname of the vhost (the messaging endpoint) or a pattern that matches the vhost hostname. This vhost policy will be applied to any client connection that is directed to the hostname that you specify. This name must be unique; you can only have one vhost policy per hostname.</p>
<div class="paragraph">
<p>If <code>enableVhostNamePatterns</code> is set to <code>true</code>, you can use wildcards to specify a pattern that matches a range of hostnames. For more information, see <a href="#pattern-matching-vhost-policy-hostnames">Pattern Matching for Vhost Policy Hostnames</a>.</p>
</div>
</dd>
<dt class="hdlist1"><code>maxConnections</code></dt>
<dd>
<p>The global maximum number of concurrent client connections allowed for this vhost. The default is 65535.</p>
</dd>
<dt class="hdlist1"><code>maxConnectionsPerUser</code></dt>
<dd>
<p>The maximum number of concurrent client connections allowed for any user. The default is 65535.</p>
</dd>
<dt class="hdlist1"><code>maxConnectionsPerHost</code></dt>
<dd>
<p>The maximum number of concurrent client connections allowed for any remote host (the host from which the client is connecting). The default is 65535.</p>
</dd>
<dt class="hdlist1"><code>allowUnknownUser</code></dt>
<dd>
<p>Whether unknown users (users who are not members of a defined user group) are allowed to connect to the vhost. Unknown users are assigned to the $default user group and receive $default settings. The default is false, which means that unknown users are not allowed.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>In the <code>vhost</code> section, beneath the connection settings that you added, add a <code>groups</code> entity to define the resource limits.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>You define resource limits by user group. A user group specifies the messaging resources the members of the group are allowed to access.</p>
</div>
<div class="exampleblock">
<div class="title">Example 2. User Groups in a Vhost Policy</div>
<div class="content">
<div class="paragraph">
<p>This example shows three user groups: admin, developers, and $default:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">vhost {
    ...
    groups: {
        admin: {
            users: admin1, admin2
            remoteHosts: 127.0.0.1, ::1
            sources: *
            targets: *
        }
        developers: {
            users: dev1, dev2, dev3
            remoteHosts: *
            sources: myqueue1, myqueue2
            targets: myqueue1, myqueue2
        }
        $default: {
            remoteHosts: *
            allowDynamicSource: true,
            allowAdminStatusUpdate: true,
            sources: myqueue1, myqueue2
            targets: myqueue1, myqueue2
        }
    }
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>users</code></dt>
<dd>
<p>A list of authenticated users for this user group. Use commas to separate multiple users. A user may belong to only one vhost user group.</p>
</dd>
<dt class="hdlist1"><code>remoteHosts</code></dt>
<dd>
<p>A list of remote hosts from which the users may connect. A host can be a hostname, IP address, or IP address range. Use commas to separate multiple hosts. To allow access from all remote hosts, specify a wildcard <code>*</code>. To deny access from all remote hosts, leave this attribute blank.</p>
</dd>
<dt class="hdlist1"><code>maxConnectionsPerUser</code></dt>
<dd>
<p>The maximum number of connections that may be created by users in this user group. This value, if specified, overrides the vhost <code>maxConnectionsPerUser</code> value.</p>
</dd>
<dt class="hdlist1"><code>maxConnectionsPerHost</code></dt>
<dd>
<p>The maximum number of concurrent connections that may be created by users in this user group from any of the permitted remote hosts. This value, if specified, overrides the vhost <code>maxConnectionsPerUser</code> value.</p>
</dd>
<dt class="hdlist1"><code>allowDynamicSource</code></dt>
<dd>
<p>If true, connections from users in this group are permitted to attach receivers to dynamic sources.  This permits creation of listners to temporary addresses or termporary queues.  If false, use of dynamic sources is forbidden.</p>
</dd>
<dt class="hdlist1"><code>allowAdminStatusUpdate</code></dt>
<dd>
<p>If true, connections from users in this group are permitted to modify the adminStatus of connections.  This permits termination of sender or receiver connections.  If false, the users of this group are prohibited from terminating any connections. Inter-router connections can never be terminated by any user under any circumstance. Defaults to true, no policy required.</p>
</dd>
<dt class="hdlist1"><code>allowWaypointLinks</code></dt>
<dd>
<p>If true, connections from users in this group are permitted to attach links using waypoint capabilities.  This allows endpoints to act as waypoints (i.e. brokers) without the need for configuring auto-links.  If false, use of waypoint capabilities is forbidden.</p>
</dd>
<dt class="hdlist1"><code>allowDynamicLinkRoutes</code></dt>
<dd>
<p>If true, connections from users in this group may dynamically create connection-scoped link route destinations.  This allows endpoints to act as link route destinations (i.e. brokers) without the need for configuring link-routes.  If false, creation of dynamic link route destintations is forbidden.</p>
</dd>
<dt class="hdlist1"><code>allowFallbackLinks</code></dt>
<dd>
<p>If true, connections from users in this group are permitted to attach links using fallback-link capabilities.  This allows endpoints to act as fallback destinations (and sources) for addresses that have fallback enabled.  If false, use of fallback-link capabilities is forbidden.</p>
</dd>
<dt class="hdlist1"><code>sources</code> | <code>sourcePattern</code></dt>
<dd>
<p>A list of AMQP source addresses from which users in this group may receive messages.</p>
<div class="paragraph">
<p>Use <code>sources</code> to specify one or more literal addresses. To specify multiple addresses, use a comma-separated list. To prevent users in this group from receiving messages from any addresses, leave this attribute blank. To allow access to an address specific to a particular user, specify the <code>${user}</code> token. For more information, see <a href="#methods-for-specifying-vhost-policy-source-target-addresses">Methods for Specifying Vhost Policy Source and Target Addresses</a>.</p>
</div>
<div class="paragraph">
<p>Alternatively, you can use <code>sourcePattern</code> to match one or more addresses that correspond to a pattern. A pattern is a sequence of words delimited by either a <code>.</code> or <code>/</code> character. You can use wildcard characters to represent a word. The  <code>*</code> character matches exactly one word, and the <code>#</code> character matches any sequence of zero or more words.</p>
</div>
<div class="paragraph">
<p>To specify multiple address ranges, use a comma-separated list of address patterns. For more information, see <a href="#router-address-pattern-matching">Router Address Pattern Matching</a>. To allow access to address ranges that are specific to a particular user, specify the <code>${user}</code> token. For more information, see <a href="#methods-for-specifying-vhost-policy-source-target-addresses">Methods for Specifying Vhost Policy Source and Target Addresses</a>.</p>
</div>
</dd>
<dt class="hdlist1"><code>targets</code> | <code>targetPattern</code></dt>
<dd>
<p>A list of AMQP target addresses from which users in this group may send messages. You can specify multiple AMQP addresses and use user name substitution and address patterns the same way as with source addresses.</p>
</dd>
</dl>
</div>
</div>
</div>
</div>
</div>
</li>
<li>
<p>If necessary, add any advanced user group settings to the vhost user groups.</p>
<div class="paragraph">
<p>The advanced user group settings enable you to define resource limits based on the AMQP connection open, session begin, and link attach phases of the connection. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_vhost" target="_blank" rel="noopener">vhost</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="configuring-resource-limits-outgoing-connections">Configuring Resource Limits for Outgoing Connections</h5>
<div class="paragraph">
<p>If the router establishes an outgoing connection to an external AMQP container (such as a client or broker), you can restrict the resources that the external container can access on the router by configuring a connector vhost policy.</p>
</div>
<div class="paragraph">
<p>The resource limits that are defined in a connector vhost policy are applied to links that are initiated by the external AMQP container. The connector vhost policy does not restrict links that the router creates.</p>
</div>
<div class="paragraph">
<p>A connector vhost policy can only be applied to a connector with a <code>normal</code> or <code>route-container</code> role. You cannot apply connector vhost policies to connectors that have <code>inter-router</code> or <code>edge</code> roles.</p>
</div>
<div class="paragraph">
<div class="title">Prerequisites</div>
<p>Vhost policies are enabled for the router. For more information, see <a href="#enabling-vhost-policies">Enabling Vhost Policies</a>.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>In the router&#8217;s configuration file, add a <code>vhost</code> section with a <code>$connector</code> user group.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">vhost {
    hostname: my-connector-policy
    groups: {
        $connector: {
            sources: *
            targets: *
            maxSenders: 5
            maxReceivers: 10
            allowAnonymousSender: true
            allowWaypointLinks: true
        }
    }
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>hostname</code></dt>
<dd>
<p>A unique name to identify the connector vhost policy. This name does not represent an actual hostname; therefore, choose a name that will not conflict with an actual vhost hostname.</p>
</dd>
<dt class="hdlist1"><code>$connector</code></dt>
<dd>
<p>Identifies this vhost policy as a connector vhost policy.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>Apply the connector vhost policy to the connector that establishes the connection to the external AMQP container.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>The following example applies the connector vhost policy that was configured in the previous step:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    host: 192.0.2.10
    port: 5672
    role: normal
    policyVhost: my-connector-policy
}</pre>
</div>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="configuring-vhost-policies-json">Configuring Vhost Policies as JSON Files</h5>
<div class="paragraph">
<p>As an alternative to using the router configuration file, you can configure vhost policies in JSON files. If you have multiple routers that need to share the same vhost configuration, you can put the vhost configuration JSON files in a location accessible to each router, and then configure the routers to apply the vhost policies defined in these JSON files.</p>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>Vhost policies must be enabled for the router. For more information, see <a href="#enabling-vhost-policies">Enabling Vhost Policies</a>.</p>
</li>
</ul>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>In the router configuration file, specify the directory where you want to store the vhost policy definition JSON files.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">policy {
    ...
    policyDir: <em>DIRECTORY_PATH</em>
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>policyDir</code></dt>
<dd>
<p>The absolute path to the directory that holds vhost policy definition files in JSON format. The router processes all of the vhost policies in each JSON file that is in this directory.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>In the vhost policy definition directory, create a JSON file for each vhost policy.</p>
<div class="openblock">
<div class="content">
<div class="exampleblock">
<div class="title">Example 3. Vhost Policy Definition JSON File</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-json hljs" data-lang="json">[
    ["vhost", {
        "hostname": "example.com",
        "maxConnections": 10000,
        "maxConnectionsPerUser": 100,
        "maxConnectionsPerHost": 100,
        "allowUnknownUser": true,
        "groups": {
            "admin": {
                "users": ["admin1", "admin2"],
                "remoteHosts": ["127.0.0.1", "::1"],
                "sources": "*",
                "targets": "*"
            },
            "developers": {
                "users": ["dev1", "dev2", "dev3"],
                "remoteHosts": "*",
                "sources": ["myqueue1", "myqueue2"],
                "targets": ["myqueue1", "myqueue2"]
            },
            "$default": {
                "remoteHosts": "*",
                "allowDynamicSource": true,
                "sources": ["myqueue1", "myqueue2"],
                "targets": ["myqueue1", "myqueue2"]
            }
        }
    }]
]</code></pre>
</div>
</div>
<div class="paragraph">
<p>For more information about these attributes, see <a href="#configuring-vhost-policies-router">Configuring Vhost Policies in the Router Configuration File</a>.</p>
</div>
</div>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="pattern-matching-vhost-policy-hostnames">Pattern Matching for Vhost Policy Hostnames</h5>
<div class="paragraph">
<p>In a vhost policy, vhost hostnames can be either literal hostnames or patterns that cover a range of hostnames.</p>
</div>
<div class="paragraph">
<p>A hostname pattern is a sequence of words with one or more of the following wildcard characters:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>*</code> represents exactly one word</p>
</li>
<li>
<p><code>#</code> represents zero or more words</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The following table shows some examples of hostname patterns:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">This pattern&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Matches&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">But not&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>*.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>www.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>example.com</code>
<code>srv2.www.example.com</code></p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>#.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>example.com</code>
<code>www.example.com</code>
<code>a.b.c.d.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>myhost.com</code></p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>www.*.test.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>www.a.test.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>www.test.example.com</code>
<code>www.a.b.c.test.example.com</code></p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>www.#.test.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>www.test.example.com</code>
<code>www.a.test.example.com</code>
<code>www.a.b.c.test.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>test.example.com</code></p>
</div></div></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Vhost hostname pattern matching applies the following precedence rules:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Policy pattern</th>
<th class="tableblock halign-left valign-top">Precedence</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Exact match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">High</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">*</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Medium</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">#</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Low</p></td>
</tr>
</tbody>
</table>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Dispatch Router does not permit you to create vhost hostname patterns that conflict with existing patterns. This includes patterns that can be reduced to be the same as an existing pattern. For example, you would not be able to create the <code>#.#.#.#.com</code> pattern if <code>#.com</code> already exists.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect4">
<h5 id="methods-for-specifying-vhost-policy-source-target-addresses">Methods for Specifying Vhost Policy Source and Target Addresses</h5>
<div class="paragraph">
<p>If you want to allow or deny access to multiple addresses on a vhost, there are several methods you can use to match multiple addresses without having to specify each address individually.</p>
</div>
<div class="paragraph">
<p>The following table describes the methods a vhost policy can use to specify multiple source and target addresses:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 33%;">
<col style="width: 67%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Do this&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Allow all users in the user group to access all source or target addresses</p></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Use a <code>*</code> wildcard character.</p>
</div>
<div class="exampleblock">
<div class="title">Example 4. Receive from Any Address</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code>sources: *</code></pre>
</div>
</div>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Prevent all users in the user group from accessing all source or target addresses</p></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Do not specify a value.</p>
</div>
<div class="exampleblock">
<div class="title">Example 5. Prohibit Message Transfers to All Addresses</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code>targets:</code></pre>
</div>
</div>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Allow access to some resources specific to each user</p></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Use the <code>${user}</code> username substitution token. You can use this token with <code>source</code>, <code>target</code>, <code>sourcePattern</code>, and <code>targetPattern</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>You can only specify the <code>${user}</code> token once in an AMQP address name or pattern. If there are multiple tokens in an address, only the leftmost token will be substituted.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="exampleblock">
<div class="title">Example 6. Receive from a User-Specific Address</div>
<div class="content">
<div class="paragraph">
<p>This definition allows the users in the user group to receive messages from any address that meets any of the following rules:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Starts with the prefix <code>tmp_</code> and ends with the user name</p>
</li>
<li>
<p>Starts with the prefix <code>temp</code> followed by any additional characters</p>
</li>
<li>
<p>Starts with the user name, is followed by <code>-home-</code>, and ends with any additional characters</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre>sources: tmp_${user}, temp*, ${user}-home-*</pre>
</div>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 7. User-Specific Address Patterns</div>
<div class="content">
<div class="paragraph">
<p>This definition allows the users in the user group to receive messages from any address that meets any of the following rules:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Starts with the prefix <code>tmp</code> and ends with the user name</p>
</li>
<li>
<p>Starts with the prefix <code>temp</code> followed by zero or more additional characters</p>
</li>
<li>
<p>Starts with the user name, is followed by <code>home</code>, and ends with one or more additional characters</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre>sourcePattern: tmp.${user}, temp/#, ${user}.home/*</pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>In an address pattern (<code>sourcePattern</code> or <code>targetPattern</code>), the username substitution token must be either the first or last token in the pattern. The token must also be alone within its delimited field, which means that it cannot be concatenated with literal text prefixes or suffixes.</p>
</div>
</td>
</tr>
</table>
</div></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sect4">
<h5 id="vhost_policy_examples">Vhost Policy Examples</h5>
<div class="paragraph">
<p>These examples demonstrate how to use vhost policies to authorize access to messaging resources.</p>
</div>
<div class="exampleblock">
<div class="title">Example 8. Defining Basic Resource Limits for a Messaging Endpoint</div>
<div class="content">
<div class="paragraph">
<p>In this example, a vhost policy defines resource limits for clients connecting to the <code>example.com</code> host.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-json hljs" data-lang="json">[
    ["vhost", {
        "hostname": "example.com",  <b class="conum">(1)</b>
        "maxConnectionsPerUser": 10,  <b class="conum">(2)</b>
        "allowUnknownUser": true,  <b class="conum">(3)</b>
        "groups": {
            "admin": {
                "users": ["admin1", "admin2"],  <b class="conum">(4)</b>
                "remoteHosts": ["127.0.0.1", "::1"],  <b class="conum">(5)</b>
                "sources": "*",  <b class="conum">(6)</b>
                "targets": "*"  <b class="conum">(7)</b>
            },
            "$default": {
                "remoteHosts": "*",  <b class="conum">(8)</b>
                "sources": ["news*", "sports*" "chat*"],  <b class="conum">(9)</b>
                "targets": "chat*"  <b class="conum">(10)</b>
            }
        }
    }]
]</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The rules defined in this vhost policy will be applied to any user connecting to <code>example.com</code>.</p>
</li>
<li>
<p>Each user can open up to 10 connections to the vhost.</p>
</li>
<li>
<p>Any user can connect to this vhost. Users that are not part of the <code>admin</code> group are assigned to the <code>$default</code> group.</p>
</li>
<li>
<p>If the <code>admin1</code> or <code>admin2</code> user connects to the vhost, they are assigned to the <code>admin</code> user group.</p>
</li>
<li>
<p>Users in the <code>admin</code> user group must connect from localhost. If the admin user attempts to connect from any other host, the connection will be denied.</p>
</li>
<li>
<p>Users in the admin user group can receive from any address.</p>
</li>
<li>
<p>Users in the admin user group can send to any address.</p>
</li>
<li>
<p>Any non-admin user is permitted to connect from any host.</p>
</li>
<li>
<p>Non-admin users are permitted to receive messages from any addresses that start with the <code>news</code>, <code>sports</code>, or <code>chat</code> prefixes.</p>
</li>
<li>
<p>Non-admin users are permitted to send messages to any addresses that start with the <code>chat</code> prefix.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 9. Limiting Memory Consumption</div>
<div class="content">
<div class="paragraph">
<p>By using the advanced vhost policy attributes, you can control how much system buffer memory a user connection can potentially consume.</p>
</div>
<div class="paragraph">
<p>In this example, a stock trading site provides services for stock traders. However, the site must also accept high-capacity, automated data feeds from stock exchanges. To prevent trading activity from consuming memory needed for the feeds, a larger amount of system buffer memory is allotted to the feeds than to the traders.</p>
</div>
<div class="paragraph">
<p>This example uses the <code>maxSessions</code> and <code>maxSessionWindow</code> attributes to set the buffer memory consumption limits for each AMQP session. These settings are passed directly to the AMQP connection and session negotiations, and do not require any processing cycles on the router.</p>
</div>
<div class="paragraph">
<p>This example does not show the vhost policy settings that are unrelated to buffer allocation.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-json hljs" data-lang="json">[
    ["vhost", {
        "hostname": "traders.com",  <b class="conum">(1)</b>
        "groups": {
            "traders": {
                "users": ["trader1", "trader2"],  <b class="conum">(2)</b>
                "maxFrameSize": 10000,
                "maxSessionWindow": 5000000,  <b class="conum">(3)</b>
                "maxSessions": 1  <b class="conum">(4)</b>
            },
            "feeds": {
                "users": ["nyse-feed", "nasdaq-feed"],  <b class="conum">(5)</b>
                "maxFrameSize": 60000,
                "maxSessionWindow": 1200000000,  <b class="conum">(6)</b>
                "maxSessions": 3  <b class="conum">(7)</b>
            }
        }
    }]
]</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The rules defined in this vhost policy will be applied to any user connecting to <code>traders.com</code>.</p>
</li>
<li>
<p>The <code>traders</code> group includes <code>trader1</code>, <code>trader2</code>, and any other user defined in the list.</p>
</li>
<li>
<p>At most, 5,000,000 bytes of data can be in flight on each session.</p>
</li>
<li>
<p>Only one session per connection is allowed.</p>
</li>
<li>
<p>The <code>feeds</code> group includes two users.</p>
</li>
<li>
<p>At most, 1,200,000,000 bytes of data can be in flight on each session.</p>
</li>
<li>
<p>Up to three sessions per connection are allowed.</p>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="routing">6. Routing messages through the router network</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Routing is the process by which messages are delivered to their destinations. To accomplish this, Dispatch Router provides two routing mechanisms: <em>message routing</em> and <em>link routing</em>.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Message routing</dt>
<dd>
<p>Routing is performed on messages as producers send them to a router. When a message arrives on a router, the router routes the message and its <em>settlement</em> based on the message&#8217;s <em>address</em> and <em>routing pattern</em>.</p>
<div class="openblock">
<div class="content">
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/message-routing.png" alt="Message Routing">
</div>
<div class="title">Figure 1. Message Routing</div>
</div>
<div class="paragraph">
<p>In this diagram, the message producer attaches a link to the router, and then sends a message over the link. When the router receives the message, it identifies the message&#8217;s destination based on the message&#8217;s address, and then uses its routing table to determine the best route to deliver the message either to its destination or to the next hop in the route. All dispositions (including settlement) are propagated along the same path that the original message transfer took. Flow control is handled between the sender and the router, and then between the router and the receiver.</p>
</div>
</div>
</div>
</dd>
<dt class="hdlist1">Link routing</dt>
<dd>
<p>Routing is performed on link-attach frames, which are chained together to form a virtual messaging path that directly connects a sender and receiver. Once a link route is established, the transfer of message deliveries, flow frames, and dispositions is performed across the link route.</p>
<div class="openblock">
<div class="content">
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/link-routing.png" alt="Link Routing">
</div>
<div class="title">Figure 2. Link Routing</div>
</div>
<div class="paragraph">
<p>In this diagram, a router is connected to clients and to a broker, and it provides a link route to a queue on the broker (my_queue). The sender connects to the router, and the router propagates the link-attaches to the broker to form a direct link between the sender and the broker. The sender can begin sending messages to the queue, and the router passes the deliveries along the link route directly to the broker queue.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div class="sect2">
<h3 id="comparison_of_message_routing_and_link_routing">6.1. Comparison of Message Routing and Link Routing</h3>
<div class="paragraph">
<p>While you can use either message routing or link routing to deliver messages to a destination, they differ in several important ways. Understanding these differences will enable you to choose the proper routing approach for any particular use case.</p>
</div>
<div class="sect3">
<h4 id="when_to_use_message_routing">6.1.1. When to Use Message Routing</h4>
<div class="paragraph">
<p>Message routing is the default routing mechanism. You can use it to route messages on a per-message basis between clients directly (direct-routed messaging), or to and from broker queues (brokered messaging).</p>
</div>
<div class="paragraph">
<p>Message routing is best suited to the following requirements:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Default, basic message routing.</p>
<div class="paragraph">
<p>Dispatch Router automatically routes messages by default, so manual configuration is only required if you want routing behavior that is different than the default.</p>
</div>
</li>
<li>
<p>Message-based routing patterns.</p>
<div class="paragraph">
<p>Message routing supports both anycast and multicast routing patterns. You can load-balance individual messages across multiple consumers, and multicast (or fan-out) messages to multiple subscribers.</p>
</div>
</li>
<li>
<p>Sharding messages across multiple broker instances when message delivery order is not important.</p>
<div class="paragraph">
<p>Sharding messages from one producer might cause that producer&#8217;s messages to be received in a different order than the order in which they were sent.</p>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Message routing is not suitable for any of the following requirements:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Dedicated path through the router network.</p>
<div class="paragraph">
<p>For inter-router transfers, all message deliveries are placed on the same inter-router link. This means that the traffic for one address might affect the delivery of the traffic for another address.</p>
</div>
</li>
<li>
<p>Granular, end-to-end flow control.</p>
<div class="paragraph">
<p>With message routing, end-to-end flow control is based on the settlement of deliveries and therefore might not be optimal in every case.</p>
</div>
</li>
<li>
<p>Transaction support.</p>
</li>
<li>
<p>Server-side selectors.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="when_to_use_link_routing">6.1.2. When to Use Link Routing</h4>
<div class="paragraph">
<p>Link routing requires more detailed configuration than message routing as well as an AMQP container that can accept incoming link-attaches (typically a broker). However, link routing enables you to satisfy more advanced use cases than message routing.</p>
</div>
<div class="paragraph">
<p>You can use link routing if you need to meet any of the following requirements:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Dedicated path through the router network.</p>
<div class="paragraph">
<p>With link routing, each link route has dedicated inter-router links through the network. Each link has its own dedicated message buffers, which means that the address will not have "head-of-line" blocking issues with other addresses.</p>
</div>
</li>
<li>
<p>Sharding messages across multiple broker instances with guaranteed delivery order.</p>
<div class="paragraph">
<p>Link routing to a sharded queue preserves the delivery order of the producer&#8217;s messages by causing all messages on that link to go to the same broker instance.</p>
</div>
</li>
<li>
<p>End-to-end flow control.</p>
<div class="paragraph">
<p>Flow control is "real" in that credits flow across the link route from the receiver to the sender.</p>
</div>
</li>
<li>
<p>Transaction support.</p>
<div class="paragraph">
<p>Link routing supports local transactions to a single broker. Distributed transactions are not supported.</p>
</div>
</li>
<li>
<p>Server-side selectors.</p>
<div class="paragraph">
<p>With a link route, consumers can provide server-side selectors for broker subscriptions.</p>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="configuring-message-routing">6.2. Configuring Message Routing</h3>
<div class="paragraph">
<p>With message routing, routing is performed on messages as producers send them to a router. When a message arrives on a router, the router routes the message and its <em>settlement</em> based on the message&#8217;s <em>address</em> and <em>routing pattern</em>.</p>
</div>
<div class="paragraph">
<p>With message routing, you can do the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Route messages between clients (direct-routed, or brokerless messaging)</p>
<div class="paragraph">
<p>This involves configuring an address with a routing pattern. All messages sent to the address will be routed based on the routing pattern.</p>
</div>
</li>
<li>
<p>Route messages through a broker queue (brokered messaging)</p>
<div class="paragraph">
<p>This involves configuring a waypoint address to identify the broker queue and then connecting the router to the broker. All messages sent to the waypoint address will be routed to the broker queue.</p>
</div>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="message_routing_flow_control">6.2.1. Message Routing Flow Control</h4>
<div class="paragraph">
<p>Dispatch Router uses a <em>credit-based</em> flow control mechanism to ensure that producers can only send messages to a router if at least one consumer is available to receive them. Because Dispatch Router does not store messages, this credit-based flow control prevents producers from sending messages when there are no consumers present.</p>
</div>
<div class="paragraph">
<p>A client wishing to send a message to the router must wait until the router has provided it with credit. Attempting to publish a message without credit available will cause the client to block. Once credit is made available, the client will unblock, and the message will be sent to the router.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Most AMQP client libraries enable you to determine the amount of credit available to a producer. For more information, consult your client&#8217;s documentation.
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="addresses">6.2.2. Addresses</h4>
<div class="paragraph">
<p>Addresses determine how messages flow through your router network. An address designates an endpoint in your messaging network, such as:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Endpoint processes that consume data or offer a service</p>
</li>
<li>
<p>Topics that match multiple consumers to multiple producers</p>
</li>
<li>
<p>Entities within a messaging broker:</p>
<div class="ulist">
<ul>
<li>
<p>Queues</p>
</li>
<li>
<p>Durable Topics</p>
</li>
<li>
<p>Exchanges</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>When a router receives a message, it uses the message&#8217;s address to determine where to send the message (either its destination or one step closer to its destination).</p>
</div>
<div class="sect4">
<h5 id="mobile_addresses">Mobile Addresses</h5>
<div class="paragraph">
<p>Routers consider addresses to be mobile such that any users of an
address may be directly connected to any router in a network and may
move around the topology. In cases where messages are broadcast to or
balanced across multiple consumers, the address users may be connected
to multiple routers in the network.</p>
</div>
<div class="paragraph">
<p>Mobile addresses are rendezvous points for senders and receivers.
Messages arrive at the mobile address and are dispatched to their
destinations according to the routing defined for the mobile address.
The details of these routing patterns are discussed later.</p>
</div>
<div class="paragraph">
<p>Mobile addresses may be discovered during normal router operation or
configured through management settings.</p>
</div>
<div class="sect5">
<h6 id="discovered_mobile_addresses">Discovered Mobile Addresses</h6>
<div class="paragraph">
<p>Mobile addresses are created when a client creates a link to a source
or destination address that is unknown to the router network.</p>
</div>
<div class="paragraph">
<p>Suppose a service provider wants to offer <em>my-service</em> that clients
may use. The service provider must open a receiver link with source
address <em>my-service</em>.  The router creates a mobile address
<em>my-service</em> and propagates the address so that it is known to every
router in the network.</p>
</div>
<div class="paragraph">
<p>Later a client wants to use the service and creates a sending link
with target address <em>my-service</em>. The router matches the service
provider&#8217;s receiver having source address <em>my-service</em> to the client&#8217;s
sender having target address <em>my-service</em> and routes messages between
the two.</p>
</div>
<div class="paragraph">
<p>Any number of other clients can create links to the service as
well. The clients do not have to know where in the router network the
service provider is physically located nor are the clients required to
connect to a specific router to use the service. Regardless of how
many clients are using the service the service provider needs only a
single connection and link into the router network.</p>
</div>
<div class="paragraph">
<p>Another view of this same scenario is when a client tries to use the
service before service provider has connected to the network. In this
case the router network creates the mobile address <em>my-service</em> as
before. However, since the mobile address has only client sender links
and no receiver links the router stalls the clients and prevents them
from sending any messages.  Later, after the service provider connects
and creates the receiver link, the router will issue credits to the
clients and the messages will begin to flow between the clients and
the service.</p>
</div>
<div class="paragraph">
<p>The service provider can connect, disconnect, and reconnect from a
different location without having to change any of the clients or
their connections.  Imagine having the service running on a
laptop. One day the connection is from corporate headquarters and the
next day the connection is from some remote location. In this case the
service provider&#8217;s computer will typically have different host IP
addresses for each connection. Using the router network the service
provider connects to the router network and offers the named service
and the clients connect to the router network and consume from the
named service. The router network routes messages between the mobile
addresses effectively masking host IP addresses of the service
provider and the client systems.</p>
</div>
</div>
<div class="sect5">
<h6 id="configured_mobile_addresses">Configured Mobile Addresses</h6>
<div class="paragraph">
<p>Mobile addresses may be configured using the router <em>autoLink</em>
object. An address created via an <em>autoLink</em> represents a queue,
topic, or other service in an external broker. Logically the
<em>autoLink</em> addresses are treated by the router network as if the
broker had connected to the router and offered the services itself.</p>
</div>
<div class="paragraph">
<p>For each configured mobile address the router will create a single
link to the external resource. Messages flow between sender links and
receiver links the same regardless if the mobile address was
discovered or configured.</p>
</div>
<div class="paragraph">
<p>Multiple <em>autoLink</em> objects may define the same address on multiple
brokers.  In this case the router network creates a sharded resource
split between the brokers. Any client can seamlessly send and receive
messages from either broker.</p>
</div>
<div class="paragraph">
<p>Note that the brokers do not need to be clustered or federated to
receive this treatment. The brokers may even be from different vendors
or be different versions of the same broker yet still work together to
provide a larger service platform.</p>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="routing-patterns-overview">6.2.3. Routing Patterns</h4>
<div class="paragraph">
<p>Routing patterns define the paths that a message with a mobile address
can take across a network. These routing patterns can be used for both
direct routing, in which the router distributes messages between
clients without a broker, and indirect routing, in which the router
enables clients to exchange messages through a broker.</p>
</div>
<div class="paragraph">
<p>Routing patterns fall into two categories: Anycast
(Balanced and Closest) and Multicast. There is no concept of
"unicast" in which there is only one consumer for an address.</p>
</div>
<div class="paragraph">
<p>Anycast distribution delivers each message to one consumer whereas
multicast distribution delivers each message to all consumers.</p>
</div>
<div class="paragraph">
<p>Each address has one of the following routing patterns, which define the path that a message with the address can take across the messaging network:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Balanced</dt>
<dd>
<p>An anycast method that allows multiple consumers to use the same address. Each message is delivered to a single consumer only, and Dispatch Router attempts to balance the traffic load across the router network.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>If multiple consumers are attached to the same address, each router determines which outbound path should receive a message by considering each path&#8217;s current number of unsettled deliveries. This means that more messages will be delivered along paths where deliveries are settled at higher rates.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Dispatch Router neither measures nor uses message settlement time to determine which outbound path to use.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>In this scenario, the messages are spread across both receivers regardless of path length:</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/balanced-routing.png" alt="Balanced Message Routing">
</div>
<div class="title">Figure 3. Balanced Message Routing</div>
</div>
</div>
</div>
</dd>
<dt class="hdlist1">Closest</dt>
<dd>
<p>An anycast method in which every message is sent along the shortest path to reach the destination, even if there are other consumers for the same address.</p>
<div class="paragraph">
<p>Dispatch Router determines the shortest path based on the topology cost to reach each of the consumers. If there are multiple consumers with the same lowest cost, messages will be spread evenly among those consumers.</p>
</div>
<div class="paragraph">
<p>In this scenario, all messages sent by <code>Sender</code> will be delivered to <code>Receiver 1</code>:</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/closest-routing.png" alt="Closest Message Routing">
</div>
<div class="title">Figure 4. Closest Message Routing</div>
</div>
</dd>
<dt class="hdlist1">Multicast</dt>
<dd>
<p>Messages are sent to all consumers attached to the address. Each consumer will receive one copy of the message.</p>
<div class="paragraph">
<p>In this scenario, all messages are sent to all receivers:</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/multicast-routing.png" alt="Multicast Message Routing">
</div>
<div class="title">Figure 5. Multicast Message Routing</div>
</div>
</dd>
</dl>
</div>
</div>
<div class="sect3">
<h4 id="message_settlement_and_reliability">6.2.4. Message Settlement and Reliability</h4>
<div class="paragraph">
<p>Dispatch Router can deliver messages with the following degrees of reliability:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>At most once</p>
</li>
<li>
<p>At least once</p>
</li>
<li>
<p>Exactly once</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The level of reliability is negotiated between the producer and the router when the producer establishes a link to the router. To achieve the negotiated level of reliability, Dispatch Router treats all messages as either <em>pre-settled</em> or <em>unsettled</em>.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Pre-settled</dt>
<dd>
<p>Sometimes called <em>fire and forget</em>, the router settles the incoming and outgoing deliveries and propagates the settlement to the message&#8217;s destination. However, it does not guarantee delivery.</p>
</dd>
<dt class="hdlist1">Unsettled</dt>
<dd>
<p>Dispatch Router propagates the settlement between the producer and consumer. For an anycast address, the router associates the incoming delivery with the resulting outgoing delivery. Based on this association, the router propagates changes in delivery state from the consumer to the producer.</p>
<div class="paragraph">
<p>For a multicast address, the router associates the incoming delivery with all outbound deliveries. The router waits for each consumer to set their delivery&#8217;s final state. After all outgoing deliveries have reached their final state, the router sets a final delivery state for the original inbound delivery and passes it to the producer.</p>
</div>
<div class="paragraph">
<p>The following table describes the reliability guarantees for unsettled messages sent to an anycast or multicast address:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 20%;">
<col style="width: 40%;">
<col style="width: 40%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Final disposition</th>
<th class="tableblock halign-left valign-top">Anycast</th>
<th class="tableblock halign-left valign-top">Multicast</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>accepted</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The consumer received the message.</p></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Either:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>All consumers received the message,</p>
</li>
<li>
<p>Or, at least one consumer received the message, but no consumers rejected it.</p>
</li>
</ul>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>released</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The message did not reach its destination.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The message did not reach any of the consumers.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>modified</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The message may or may not have reached its destination. The delivery is considered to be "in-doubt" and should be re-sent if "at least once" delivery is required.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The message may or may not have reached any of the consumers. However, no consumers rejected or accepted it.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>rejected</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The consumer rejected the message.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">At least one consumer rejected the message.</p></td>
</tr>
</tbody>
</table>
</dd>
</dl>
</div>
</div>
<div class="sect3">
<h4 id="prioritized-message-delivery">6.2.5. Configuring Addresses for Prioritized Message Delivery</h4>
<div class="paragraph">
<p>You can set the priority level of an address to control how Dispatch Router processes messages sent to that address. Within the scope of a connection, Dispatch Router attempts to process messages based on their priority. For a connection with a large volume of messages in flight, this lowers the latency for higher-priority messages.</p>
</div>
<div class="paragraph">
<p>Assigning a high priority level to an address does not guarantee that messages sent to the address will be delivered before messages sent to lower-priority addresses. However, higher-priority messages will travel more quickly through the router network than they otherwise would.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>You can also control the priority level of individual messages by setting the priority level in the message header. However, the address priority takes precedence: if you send a prioritized message to an address with a different priority level, the router will use the address priority level.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In the router&#8217;s configuration file, add or edit an address and assign a priority level.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This example adds an address with the highest priority level. The router will attempt to deliver messages sent to this address before messages with lower priority levels.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">address {
    prefix: my-high-priority-address
    priority: 9
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>priority</code></dt>
<dd>
<p>The priority level to assign to all messages sent to this address. The range of valid priority levels is 0-9, in which the higher the number, the higher the priority. The default is 4.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="ulist">
<div class="title">Additional resources</div>
<ul>
<li>
<p>For more information about setting the priority level in a message, see the <a href="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-overview-v1.0-os.html" target="_blank" rel="noopener">AMQP 1.0 specification</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="routing-messages-between-clients">6.2.6. Routing Messages Between Clients</h4>
<div class="paragraph">
<p>You can route messages between clients without using a broker. In a brokerless scenario (sometimes called <em>direct-routed messaging</em>), Dispatch Router routes messages between clients directly.</p>
</div>
<div class="paragraph">
<p>To route messages between clients, you configure an address with a routing distribution pattern. When a router receives a message with this address, the message is routed to its destination or destinations based on the address&#8217;s routing distribution pattern.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>In the router&#8217;s configuration file, add an <code>address</code> section:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">address {
    prefix: <em>ADDRESS_PREFIX</em>
    distribution: balanced|closest|multicast
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>prefix</code> | <code>pattern</code></dt>
<dd>
<p>The address or group of addresses to which the address settings should be applied. You can specify a prefix to match an exact address or beginning segment of an address. Alternatively, you can specify a pattern to match an address using wildcards.</p>
<div class="paragraph">
<p>A <em>prefix</em> matches either an exact address or the beginning segment within an address that is delimited by either a <code>.</code> or <code>/</code> character. For example, the prefix <code>my_address</code> would match the address <code>my_address</code> as well as <code>my_address.1</code> and <code>my_address/1</code>. However, it would not match <code>my_address1</code>.</p>
</div>
<div class="paragraph">
<p>A <em>pattern</em> matches an address that corresponds to a pattern. A pattern is a sequence of words delimited by either a <code>.</code> or <code>/</code> character. You can use wildcard characters to represent a word. The  <code>*</code> character matches exactly one word, and the <code>#</code> character matches any sequence of zero or more words.</p>
</div>
<div class="paragraph">
<p>The <code>*</code> and <code>#</code> characters are reserved as wildcards. Therefore, you should not use them in the message address.</p>
</div>
<div class="paragraph">
<p>For more information about creating address patterns, see <a href="#router-address-pattern-matching">Pattern Matching for Addresses</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>You can convert a <code>prefix</code> value to a <code>pattern</code> by appending <code>/#</code> to it. For example, the prefix <code>a/b/c</code> is equivalent to the pattern <code>a/b/c/#</code>.</p>
</div>
</td>
</tr>
</table>
</div>
</dd>
<dt class="hdlist1"><code>distribution</code></dt>
<dd>
<p>The message distribution pattern. The default is <code>balanced</code>, but you can specify any of the following options:</p>
<div class="ulist">
<ul>
<li>
<p><code>balanced</code> - Messages sent to the address will be routed to one of the receivers, and the routing network will attempt to balance the traffic load based on the rate of settlement.</p>
</li>
<li>
<p><code>closest</code> - Messages sent to the address are sent on the shortest path to reach the destination. It means that if there are multiple receivers for the same address, only the closest one will receive the message.</p>
</li>
<li>
<p><code>multicast</code> - Messages are sent to all receivers that are attached to the address in a <em>publish/subscribe</em> model.</p>
<div class="paragraph">
<p>For more information about message distribution patterns, see <a href="#routing-patterns-overview">Routing Patterns</a>.</p>
</div>
</li>
</ul>
</div>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_address">address</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>Add the same <code>address</code> section to any other routers that need to use the address.</p>
<div class="paragraph">
<p>The <code>address</code> that you added to this router configuration file only controls how this router distributes messages sent to the address. If you have additional routers in your router network that should distribute messages for this address, then you must add the same <code>address</code> section to each of their configuration files.</p>
</div>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="routing-messages-through-broker">6.2.7. Routing Messages Through a Broker Queue</h4>
<div class="paragraph">
<p>You can route messages to and from a broker queue to provide clients with access to the queue through a router. In this scenario, clients connect to a router to send and receive messages, and the router routes the messages to or from the broker queue.</p>
</div>
<div class="paragraph">
<p>You can route messages to a queue hosted on a single broker, or route messages to a <em>sharded queue</em> distributed across multiple brokers.</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/brokered-messaging.png" alt="Brokered Messaging">
</div>
<div class="title">Figure 6. Brokered Messaging</div>
</div>
<div class="paragraph">
<p>In this diagram, the sender connects to the router and sends messages to my_queue. The router attaches an outgoing link to the broker, and then sends the messages to my_queue. Later, the receiver connects to the router and requests messages from my_queue. The router attaches an incoming link to the broker to receive the messages from my_queue, and then delivers them to the receiver.</p>
</div>
<div class="paragraph">
<p>You can also route messages to a <em>sharded queue</em>, which is a single, logical queue comprised of multiple, underlying physical queues. Using queue sharding, it is possible to distribute a single queue over multiple brokers. Clients can connect to any of the brokers that hold a shard to send and receive messages.</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/sharded-queue-02.png" alt="Brokered Messaging with Sharded Queue">
</div>
<div class="title">Figure 7. Brokered Messaging with Sharded Queue</div>
</div>
<div class="paragraph">
<p>In this diagram, a sharded queue (my_queue) is distributed across two brokers. The router is connected to the clients and to both brokers. The sender connects to the router and sends messages to my_queue. The router attaches an outgoing link to each broker, and then sends messages to each shard (by default, the routing distribution is <code>balanced</code>). Later, the receiver connects to the router and requests all of the messages from my_queue. The router attaches an incoming link to one of the brokers to receive the messages from my_queue, and then delivers them to the receiver.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p><a href="#configure-waypoint-address">Add a waypoint address</a>.</p>
<div class="paragraph">
<p>This address identifies the queue to which you want to route messages.</p>
</div>
</li>
<li>
<p><a href="#connect-router-to-broker">Add autolinks to connect the router to the broker</a>.</p>
<div class="paragraph">
<p>Autolinks connect the router to the broker queue identified by the waypoint address.</p>
</div>
</li>
<li>
<p><a href="#connect-router-to-broker">If the queue is sharded, add autolinks for each additional broker that hosts a shard</a>.</p>
</li>
</ol>
</div>
<div class="sect4">
<h5 id="configure-waypoint-address">Configuring Waypoint Addresses</h5>
<div class="paragraph">
<p>A waypoint address identifies a queue on a broker to which you want to route messages. You need to configure the waypoint address on each router that needs to use the address. For example, if a client is connected to <em>Router A</em> to send messages to the broker queue, and another client is connected to <em>Router B</em> to receive those messages, then you would need to configure the waypoint address on both <em>Router A</em> and <em>Router B</em>.</p>
</div>
<div class="paragraph">
<div class="title">Prerequisites</div>
<p>An incoming connection (<code>listener</code>) to which the clients can connect should be configured. This connection defines how the producers and consumers connect to the router to send and receive messages. For more information, see <a href="#listening-client-connections-qdr">Listening for client connections</a>.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Create waypoint addresses on each router that needs to use the address:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">address {
    prefix: <em>ADDRESS_PREFIX</em>
    waypoint: yes
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>prefix</code> | <code>pattern</code></dt>
<dd>
<p>The address prefix or pattern that matches the broker queue to which you want to send messages. You can specify a prefix to match an exact address or beginning segment of an address. Alternatively, you can specify a pattern to match an address using wildcards.</p>
<div class="paragraph">
<p>A <em>prefix</em> matches either an exact address or the beginning segment within an address that is delimited by either a <code>.</code> or <code>/</code> character. For example, the prefix <code>my_address</code> would match the address <code>my_address</code> as well as <code>my_address.1</code> and <code>my_address/1</code>. However, it would not match <code>my_address1</code>.</p>
</div>
<div class="paragraph">
<p>A <em>pattern</em> matches an address that corresponds to a pattern. A pattern is a sequence of words delimited by either a <code>.</code> or <code>/</code> character. You can use wildcard characters to represent a word. The  <code>*</code> character matches exactly one word, and the <code>#</code> character matches any sequence of zero or more words.</p>
</div>
<div class="paragraph">
<p>The <code>*</code> and <code>#</code> characters are reserved as wildcards. Therefore, you should not use them in the message address.</p>
</div>
<div class="paragraph">
<p>For more information about creating address patterns, see <a href="#router-address-pattern-matching">Pattern Matching for Addresses</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>You can convert a <code>prefix</code> value to a <code>pattern</code> by appending <code>/#</code> to it. For example, the prefix <code>a/b/c</code> is equivalent to the pattern <code>a/b/c/#</code>.</p>
</div>
</td>
</tr>
</table>
</div>
</dd>
<dt class="hdlist1"><code>waypoint</code></dt>
<dd>
<p>Set this attribute to <code>yes</code> so that the router handles messages sent to this address as a waypoint.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect4">
<h5 id="connect-router-to-broker">Connecting a Router to the Broker</h5>
<div class="paragraph">
<p>After you add waypoint addresses to identify the broker queue, you must connect a router to the broker using autolinks.</p>
</div>
<div class="paragraph">
<p>With autolinks, client traffic is handled on the router, not the broker. Clients attach their links to the router, and then the router uses internal autolinks to connect to the queue on the broker. Therefore, the queue will always have a single producer and a single consumer regardless of how many clients are attached to the router.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>If the connection to the broker fails, Dispatch Router automatically attempts to reestablish the connection and reroute message deliveries to any available alternate destinations. However, some deliveries could be returned to the sender with a <code>RELEASED</code> or <code>MODIFIED</code> disposition. Therefore, you should ensure that your clients can handle these deliveries appropriately (generally by resending them).</p>
</div>
</td>
</tr>
</table>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>If this router is different than the router that is connected to the clients, then add the waypoint address.</p>
</li>
<li>
<p>Add an outgoing connection to the broker:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    name: <em>NAME</em>
    host: <em>HOST_NAME/ADDRESS</em>
    port: <em>PORT_NUMBER/NAME</em>
    role: route-container
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>name</code></dt>
<dd>
<p>The name of the <code>connector</code>. Specify a name that describes the broker.</p>
</dd>
<dt class="hdlist1"><code>host</code></dt>
<dd>
<p>Either an IP address (IPv4 or IPv6) or hostname on which the router should connect to the broker.</p>
</dd>
<dt class="hdlist1"><code>port</code></dt>
<dd>
<p>The port number or symbolic service name on which the router should connect to the broker.</p>
</dd>
<dt class="hdlist1"><code>role</code></dt>
<dd>
<p>Specify <code>route-container</code> to indicate that this connection is for an external container (broker).</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_connector">connector</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>If you want to send messages to the broker queue, create an outgoing autolink to the broker queue:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">autoLink {
    address: <em>ADDRESS</em>
    connection: <em>CONNECTOR_NAME</em>
    direction: out
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>address</code></dt>
<dd>
<p>The address of the broker queue. When the autolink is created, it will be attached to this address.</p>
</dd>
<dt class="hdlist1"><code>externalAddress</code></dt>
<dd>
<p>An optional alternate address for the broker queue. You use an external address if the broker queue should have a different address than that which the sender uses. In this scenario, senders send messages to the <code>addr</code> address, and then the router routes them to the broker queue represented by the <code>externalAddress</code> address.</p>
</dd>
<dt class="hdlist1"><code>connection</code> | <code>containerID</code></dt>
<dd>
<p>How the router should connect to the broker. You can specify either an outgoing connection (<code>connection</code>) or the container ID of the broker (<code>containerID</code>).</p>
</dd>
<dt class="hdlist1"><code>direction</code></dt>
<dd>
<p>Set this attribute to <code>out</code> to specify that this autolink can send messages from the router to the broker.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_autolink">autoLink</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>If you want to receive messages from the broker queue, create an incoming autolink from the broker queue:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">autoLink {
    address: <em>ADDRESS</em>
    connection: <em>CONNECTOR_NAME</em>
    direction: in
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>address</code></dt>
<dd>
<p>The address of the broker queue. When the autolink is created, it will be attached to this address.</p>
</dd>
<dt class="hdlist1"><code>externalAddress</code></dt>
<dd>
<p>An optional alternate address for the broker queue. You use an external address if the broker queue should have a different address than that which the receiver uses. In this scenario, receivers receive messages from the <code>addr</code> address, and the router retrieves them from the broker queue represented by the <code>externalAddress</code> address.</p>
</dd>
<dt class="hdlist1"><code>connection</code> | <code>containerID</code></dt>
<dd>
<p>How the router should connect to the broker. You can specify either an outgoing connection (<code>connection</code>) or the container ID of the broker (<code>containerID</code>).</p>
</dd>
<dt class="hdlist1"><code>direction</code></dt>
<dd>
<p>Set this attribute to <code>in</code> to specify that this autolink can receive messages from the broker to the router.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_autolink">autoLink</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect3">
<h4 id="handling_undeliverable_messages_for_an_address">6.2.8. Handling Undeliverable Messages for an Address</h4>
<div class="paragraph">
<p>You handle undeliverable messages for an address by configuring autolinks that point to <em>fallback destinations</em>.
A fallback destination (such as a queue on a broker) stores messages that are not directly routable to any consumers.</p>
</div>
<div class="paragraph">
<p>During normal message delivery,
Dispatch Router delivers messages to the consumers that are attached to the router network.
However, if no consumers are reachable,
the messages are diverted to any fallback destinations that were configured for the address (if the autolinks that point to the fallback destinations are active).
When a consumer reconnects and becomes reachable again,
it receives the messages stored at the fallback destination.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Dispatch Router preserves the original delivery order for messages stored at a fallback destination. However, when a consumer reconnects, any new messages produced while the queue is draining will be interleaved with the messages stored at the fallback destination.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>The router is connected to a broker.</p>
<div class="paragraph">
<p>For more information, see <a href="#connecting-to-external-amqp-containers-qdr">Connecting to external AMQP containers</a>.</p>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">Procedure</div>
<p>This procedure enables fallback for an address
and configures autolinks to connect to the broker queue
that provides the fallback destination for the address.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Enable fallback destinations for the address.</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">address {
    prefix: my-address
    enableFallback: yes
}</pre>
</div>
</div>
</li>
<li>
<p>Add an <em>outgoing</em> autolink to a queue on the broker.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>For the address for which you enabled fallback,
if messages are not routable to any consumers,
the router will use this autolink to send the messages to a queue on the broker.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">autoLink {
    address: my-address.2
    direction: out
    connection: my-broker
    fallback: yes
}</pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>If you want the router to send queued messages to attached consumers as soon as they connect to the router network,
add an <em>incoming</em> autolink.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>As soon as a consumer attaches to the router,
it will receive the messages stored in the broker queue,
along with any new messages sent by the producer.
The original delivery order of the queued messages is preserved;
however, the queued messages will be interleaved with the new messages.</p>
</div>
<div class="paragraph">
<p>If you do not add the incoming autolink,
the messages will be stored on the broker,
but will not be sent to consumers when they attach to the router.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">autoLink {
    address: my-address.2
    direction: in
    connection: my-broker
    fallback: yes
}</pre>
</div>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="example_routing_messages_through_broker_queues">6.2.9. Example: Routing Messages Through Broker Queues</h4>
<div class="paragraph">
<p>This example shows how waypoints and autolinks can route messages through a pair of queues on a broker.</p>
</div>
<div class="sect4">
<h5 id="router_configuration">Router Configuration</h5>
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {  <b class="conum">(1)</b>
    name: broker
    role: route-container
    host: 198.51.100.1
    port: 61617
    saslMechanisms: ANONYMOUS
}

address {  <b class="conum">(2)</b>
    prefix: queue
    waypoint: yes
}

autoLink {  <b class="conum">(3)</b>
    address: queue.first
    direction: in
    connection: broker
}

autoLink {  <b class="conum">(4)</b>
    address: queue.first
    direction: out
    connection: broker
}

autoLink {  <b class="conum">(5)</b>
    address: queue.second
    direction: in
    connection: broker
}

autoLink {  <b class="conum">(6)</b>
    address: queue.second
    direction: out
    connection: broker
}</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The outgoing connection from the router to the broker. The <code>route-container</code> role enables the router to connect to an external AMQP container (in this case, a broker).</p>
</li>
<li>
<p>The namespace queue on the broker to which the router should route messages. All addresses that start with <code>queue</code> will be routed to a queue on the broker.</p>
</li>
<li>
<p>The incoming autolink from <code>queue.first</code> on the broker to the router.</p>
</li>
<li>
<p>The outgoing autolink from the router to <code>queue.first</code> on the broker.</p>
</li>
<li>
<p>The incoming autolink from <code>queue.second</code> on the broker to the router.</p>
</li>
<li>
<p>The outgoing autolink from the router to <code>queue.second</code> on the broker.</p>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="how_the_messages_are_routed">How the Messages are Routed</h5>
<div class="paragraph">
<p>Initially, when the broker is offline, the autolinks are inactive.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --autolinks
AutoLinks
  addr          dir  phs  extAddr  link  status    lastErr
  ========================================================
  queue.first   in   1                   inactive
  queue.first   out  0                   inactive
  queue.second  in   1                   inactive
  queue.second  out  0                   inactive</pre>
</div>
</div>
<div class="paragraph">
<p>Once the broker is online, the autolinks attempt to activate. In this case, the broker starts with the <code>queue.first</code> queue only, and the <code>queue.first</code> autolinks become active. The <code>queue.second</code> autolinks are in a failed state, because the <code>queue.second</code> queue does not exist on the broker.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --autolinks
AutoLinks
  addr          dir  phs  extAddr  link  status  lastErr
  ===========================================================================
  queue.first   in   1             6     active
  queue.first   out  0             7     active
  queue.second  in   1                   failed  Node not found: queue.second
  queue.second  out  0                   failed  Node not found: queue.second</pre>
</div>
</div>
<div class="paragraph">
<p>The producer now connects to the router and sends three messages to <code>queue.first</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ python simple_send.py -a 127.0.0.1/queue.first -m3
all messages confirmed</pre>
</div>
</div>
<div class="paragraph">
<p>The router&#8217;s address statistics show that the messages were delivered to the queue.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -a
Router Addresses
  class   addr           phs  distrib   in-proc  local  remote  cntnr  in  out  thru  to-proc  from-proc
  ========================================================================================================
  mobile  queue.first    1    balanced  0        0      0       0      0   0    0     0        0
  mobile  queue.first    0    balanced  0        1      0       0      3   3    0     0        0</pre>
</div>
</div>
<div class="paragraph">
<p>The <code>queue.first</code> address appears twice in the output: once for each phase of the address. Phase 0 is for routing messages from producers to the outgoing autolink. Phase 1 is for routing messages from the incoming autolink to the subscribed consumers. In this case, Phase 0 of the address has counted three messages in the <code>in</code> column (the messages that arrived on the router from the producer), and three messages in the <code>out</code> column (the messages that were sent from the router to the broker queue).</p>
</div>
<div class="paragraph">
<p>The consumer now connects to the router and receives the three messages from <code>queue.first</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ python simple_recv.py -a 127.0.0.1:5672/queue.first -m3
{u'sequence': int32(1)}
{u'sequence': int32(2)}
{u'sequence': int32(3)}</pre>
</div>
</div>
<div class="paragraph">
<p>The router&#8217;s address statistics now show that all three messages were received by the consumer from the broker queue.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -a
Router Addresses
  class   addr           phs  distrib   in-proc  local  remote  cntnr  in  out  thru  to-proc  from-proc
  ========================================================================================================
  mobile  queue.first    1    balanced  0        0      0       0      3   3    0     0        0
  mobile  queue.first    0    balanced  0        1      0       0      3   3    0     0        0</pre>
</div>
</div>
<div class="paragraph">
<p>The command output shows that Phase 1 of the address was used to deliver all three messages from the queue to the consumer.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Even in a multi-router network, and with multiple producers and consumers for <code>queue.first</code>, all deliveries are routed through the queue on the connected broker.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="configuring-link-routing">6.3. Configuring Link Routing</h3>
<div class="paragraph">
<p>Link routing provides an alternative strategy for brokered messaging. A link route represents a private messaging path between a sender and a receiver in which the router passes the messages between end points. You can think of a link route as a "virtual connection" or "tunnel" that travels from a sender, through the router network, to a receiver.</p>
</div>
<div class="paragraph">
<p>With link routing, routing is performed on link-attach frames, which are chained together to form a virtual messaging path that directly connects a sender and receiver. Once a link route is established, the transfer of message deliveries, flow frames, and dispositions is performed across the link route.</p>
</div>
<div class="sect3">
<h4 id="link_route_addresses">6.3.1. Link Route Addresses</h4>
<div class="paragraph">
<p>A link route address represents a broker queue, topic, or other service. When a client attaches a link route address to a router, the router propagates a link attachment to the broker resource identified by the address.</p>
</div>
<div class="paragraph">
<p>Using link route addresses, the router network does not participate in
aggregated message distribution. The router simply passes message
delivery and settlement between the two end points.</p>
</div>
</div>
<div class="sect3">
<h4 id="link_route_routing_patterns">6.3.2. Link Route Routing Patterns</h4>
<div class="paragraph">
<p>Routing patterns are not used with link routing, because there is a direct link between the sender and receiver. The router only makes a routing decision when it receives the initial link-attach request frame. Once the link is established, the router passes the messages along the link in a balanced distribution.</p>
</div>
</div>
<div class="sect3">
<h4 id="link_route_flow_control">6.3.3. Link Route Flow Control</h4>
<div class="paragraph">
<p>Unlike message routing, with link routing, the sender and receiver handle flow control directly: the receiver grants link credits, which is the number of messages it is able to receive. The router sends them directly to the sender, and then the sender sends the messages based on the credits that the receiver granted.</p>
</div>
</div>
<div class="sect3">
<h4 id="creating-link-route">6.3.4. Creating a Link Route</h4>
<div class="paragraph">
<p>Link routes establish a link between a sender and a receiver that travels through a router. You can configure inward and outward link routes to enable the router to receive link-attaches from clients and to send them to a particular destination.</p>
</div>
<div class="paragraph">
<p>With link routing, client traffic is handled on the broker, not the router. Clients have a direct link through the router to a broker&#8217;s queue. Therefore, each client is a separate producer or consumer.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>If the connection to the broker fails, the routed links are detached, and the router will attempt to reconnect to the broker (or its backup). Once the connection is reestablished, the link route to the broker will become reachable again.</p>
</div>
<div class="paragraph">
<p>From the client&#8217;s perspective, the client will see the detached links (that is, the senders or receivers), but not the failed connection. Therefore, if you want the client to reattach dropped links in the event of a broker connection failure, you must configure this functionality on the client. Alternatively, you can use message routing with autolinks instead of link routing. For more information, see <a href="#routing-messages-through-broker">Routing Messages through a Broker Queue</a>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>In the router configuration file, add an outgoing connection to the broker:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    name: <em>NAME</em>
    host: <em>HOST_NAME/ADDRESS</em>
    port: <em>PORT_NUMBER/NAME</em>
    role: route-container
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>name</code></dt>
<dd>
<p>The name of the <code>connector</code>. You should specify a name that describes the broker.</p>
</dd>
<dt class="hdlist1"><code>host</code></dt>
<dd>
<p>Either an IP address (IPv4 or IPv6) or hostname on which the router should connect to the broker.</p>
</dd>
<dt class="hdlist1"><code>port</code></dt>
<dd>
<p>The port number or symbolic service name on which the router should connect to the broker.</p>
</dd>
<dt class="hdlist1"><code>role</code></dt>
<dd>
<p>Specify <code>route-container</code> to indicate that this connection is for an external container (broker).</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_connector">connector</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>If you want clients to send local transactions to the broker, create a link route for the transaction coordinator:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">linkRoute {
    prefix: $coordinator  <b class="conum">(1)</b>
    connection: <em>CONNECTOR_NAME</em>
    direction: in
}</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The <code>$coordinator</code> prefix designates this link route as a transaction coordinator. When the client opens a transacted session, the requests to start and end the transaction are propagated along this link route to the broker.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Dispatch Router does not support routing transactions to multiple brokers. If you have multiple brokers in your environment, choose a single broker and route all transactions to it.</p>
</div>
</div>
</div>
</li>
<li>
<p>If you want clients to send messages on this link route, create an incoming link route:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">linkRoute {
    prefix: <em>ADDRESS_PREFIX</em>
    connection: <em>CONNECTOR_NAME</em>
    direction: in
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>prefix</code> | <code>pattern</code></dt>
<dd>
<p>The address prefix or pattern that matches the broker queue that should be the destination for routed link-attaches. All messages that match this prefix or pattern will be distributed along the link route. You can specify a prefix to match an exact address or beginning segment of an address. Alternatively, you can specify a pattern to match an address using wildcards.</p>
<div class="paragraph">
<p>A <em>prefix</em> matches either an exact address or the beginning segment within an address that is delimited by either a <code>.</code> or <code>/</code> character. For example, the prefix <code>my_address</code> would match the address <code>my_address</code> as well as <code>my_address.1</code> and <code>my_address/1</code>. However, it would not match <code>my_address1</code>.</p>
</div>
<div class="paragraph">
<p>A <em>pattern</em> matches an address that corresponds to a pattern. A pattern is a sequence of words delimited by either a <code>.</code> or <code>/</code> character. You can use wildcard characters to represent a word. The  <code>*</code> character matches exactly one word, and the <code>#</code> character matches any sequence of zero or more words.</p>
</div>
<div class="paragraph">
<p>The <code>*</code> and <code>#</code> characters are reserved as wildcards. Therefore, you should not use them in the message address.</p>
</div>
<div class="paragraph">
<p>For more information about creating address patterns, see <a href="#router-address-pattern-matching">Pattern Matching for Addresses</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>You can convert a <code>prefix</code> value to a <code>pattern</code> by appending <code>/#</code> to it. For example, the prefix <code>a/b/c</code> is equivalent to the pattern <code>a/b/c/#</code>.</p>
</div>
</td>
</tr>
</table>
</div>
</dd>
<dt class="hdlist1"><code>connection</code> | <code>containerID</code></dt>
<dd>
<p>How the router should connect to the broker. You can specify either an outgoing connection (<code>connection</code>) or the container ID of the broker (<code>containerID</code>).</p>
<div class="paragraph">
<p>If multiple brokers are connected to the router through this connection, requests for addresses matching the link route&#8217;s prefix or pattern are balanced across the brokers. Alternatively, if you want to specify a particular broker, use <code>containerID</code> and add the broker&#8217;s container ID.</p>
</div>
</dd>
<dt class="hdlist1"><code>direction</code></dt>
<dd>
<p>Set this attribute to <code>in</code> to specify that clients can send messages into the router network on this link route.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_linkroute">linkRoute</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>If you want clients to receive messages on this link route, create an outgoing link route:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">linkRoute {
    prefix: <em>ADDRESS_PREFIX</em>
    connection: <em>CONNECTOR_NAME</em>
    direction: out
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>prefix</code> | <code>pattern</code></dt>
<dd>
<p>The address prefix or pattern that matches the broker queue from which you want to receive routed link-attaches. All messages that match this prefix or pattern will be distributed along the link route. You can specify a prefix to match an exact address or beginning segment of an address. Alternatively, you can specify a pattern to match an address using wildcards.</p>
<div class="paragraph">
<p>A <em>prefix</em> matches either an exact address or the beginning segment within an address that is delimited by either a <code>.</code> or <code>/</code> character. For example, the prefix <code>my_address</code> would match the address <code>my_address</code> as well as <code>my_address.1</code> and <code>my_address/1</code>. However, it would not match <code>my_address1</code>.</p>
</div>
<div class="paragraph">
<p>A <em>pattern</em> matches an address that corresponds to a pattern. A pattern is a sequence of words delimited by either a <code>.</code> or <code>/</code> character. You can use wildcard characters to represent a word. The  <code>*</code> character matches exactly one word, and the <code>#</code> character matches any sequence of zero or more words.</p>
</div>
<div class="paragraph">
<p>The <code>*</code> and <code>#</code> characters are reserved as wildcards. Therefore, you should not use them in the message address.</p>
</div>
<div class="paragraph">
<p>For more information about creating address patterns, see <a href="#router-address-pattern-matching">Pattern Matching for Addresses</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>You can convert a <code>prefix</code> value to a <code>pattern</code> by appending <code>/#</code> to it. For example, the prefix <code>a/b/c</code> is equivalent to the pattern <code>a/b/c/#</code>.</p>
</div>
</td>
</tr>
</table>
</div>
</dd>
<dt class="hdlist1"><code>connection</code> | <code>containerID</code></dt>
<dd>
<p>How the router should connect to the broker. You can specify either an outgoing connection (<code>connection</code>) or the container ID of the broker (<code>containerID</code>).</p>
<div class="paragraph">
<p>If multiple brokers are connected to the router through this connection, requests for addresses matching the link route&#8217;s prefix or pattern are balanced across the brokers. Alternatively, if you want to specify a particular broker, use <code>containerID</code> and add the broker&#8217;s container ID.</p>
</div>
</dd>
<dt class="hdlist1"><code>direction</code></dt>
<dd>
<p>Set this attribute to <code>out</code> to specify that this link route is for receivers.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_linkroute">linkRoute</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="example_using_a_link_route_to_provide_client_isolation">6.3.5. Example: Using a Link Route to Provide Client Isolation</h4>
<div class="paragraph">
<p>This example shows how a link route can connect a client to a message broker that is on a different private network.</p>
</div>
<div class="listingblock">
<div class="title">Router Network with Isolated Clients</div>
<div class="content">
<pre>                        Public Network
                       +-----------------+
                       |      +-----+    |
                       | B1   | Rp  |    |
                       |      +/--\-+    |
                       |      /    \     |
                       |     /      \    |
                       +----/--------\---+
                           /          \
                          /            \
                         /              \
         Private Net A  /                \ Private Net B
        +--------------/--+           +---\-------------+
        |         +---/-+ |           | +--\--+         |
        |  B2     | Ra  | |           | | Rb  |   C1    |
        |         +-----+ |           | +-----+         |
        |                 |           |                 |
        |                 |           |                 |
        +-----------------+           +-----------------+</pre>
</div>
</div>
<div class="paragraph">
<p>Client <code>C1</code> is constrained by firewall policy to connect to the router in its own network (<code>Rb</code>). However, it can use a link route to access queues, topics, and any other AMQP services that are provided on message brokers <code>B1</code> and <code>B2</code>&#8201;&#8212;&#8201;even though they are on different networks.</p>
</div>
<div class="paragraph">
<p>In this example, client <code>C1</code> needs to receive messages from <code>b2.event-queue</code>, which is hosted on broker <code>B2</code> in <code>Private Net A</code>. A link route connects the client and broker even though neither of them is aware that there is a router network between them.</p>
</div>
<div class="sect4">
<h5 id="router_configuration_2">Router Configuration</h5>
<div class="paragraph">
<p>To enable client <code>C1</code> to receive messages from <code>b2.event-queue</code> on broker <code>B2</code>, router <code>Ra</code> must be able to do the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Connect to broker <code>B2</code></p>
</li>
<li>
<p>Route links to and from broker <code>B2</code></p>
</li>
<li>
<p>Advertise itself to the router network as a valid destination for links that have a <code>b2.event-queue</code> address.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The relevant part of the configuration file for router <code>Ra</code> shows the following:</p>
</div>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {  <b class="conum">(1)</b>
    name: broker
    role: route-container
    host: 198.51.100.1
    port: 61617
    saslMechanisms: ANONYMOUS
}

linkRoute {  <b class="conum">(2)</b>
    prefix: b2
    direction: in
    connection: broker
}

linkRoute {  <b class="conum">(3)</b>
    prefix: b2
    direction: out
    connection: broker
}</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The outgoing connection from the router to broker <code>B2</code>. The <code>route-container</code> role enables the router to connect to an external AMQP container (in this case, a broker).</p>
</li>
<li>
<p>The incoming link route for receiving links from client senders. Any sender with a target whose address begins with <code>b2</code> will be routed to broker <code>B2</code> using the <code>broker</code> connector.</p>
</li>
<li>
<p>The outgoing link route for sending links to client receivers. Any receivers whose source address begins with <code>b2</code> will be routed to broker <code>B2</code> using the <code>broker</code> connector.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="paragraph">
<p>This configuration enables router <code>Ra</code> to advertise itself as a valid destination for targets and sources starting with <code>b2</code>. It also enables the router to connect to broker <code>B2</code>, and to route links to and from queues starting with the <code>b2</code> prefix.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>While not required, routers <code>Rp</code> and <code>Rb</code> should also have the same configuration.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect4">
<h5 id="how_the_client_receives_messages">How the Client Receives Messages</h5>
<div class="paragraph">
<p>By using the configured link route, client <code>C1</code> can receive messages from broker <code>B2</code> even though they are on different networks.</p>
</div>
<div class="paragraph">
<p>Router <code>Ra</code> establishes a connection to broker <code>B2</code>. Once the connection is open, <code>Ra</code> tells the other routers (<code>Rp</code> and <code>Rb</code>) that it is a valid destination for link routes to the <code>b2</code> prefix. This means that sender and receiver links attached to <code>Rb</code> or <code>Rp</code> will be routed along the shortest path to <code>Ra</code>, which then routes them to broker <code>B2</code>.</p>
</div>
<div class="paragraph">
<p>To receive messages from the <code>b2.event-queue</code> on broker <code>B2</code>, client <code>C1</code> attaches a receiver link with a source address of <code>b2.event-queue</code> to its local router, <code>Rb</code>. Because the address matches the <code>b2</code> prefix, <code>Rb</code> routes the link to <code>Rp</code>, which is the next hop in the route to its destination. <code>Rp</code> routes the link to <code>Ra</code>, which routes it to broker <code>B2</code>. Client <code>C1</code> now has a receiver established, and it can begin receiving messages.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>If broker <code>B2</code> is unavailable for any reason, router <code>Ra</code> will not advertise itself as a destination for <code>b2</code> addresses. In this case, routers <code>Rb</code> and <code>Rp</code> will reject link attaches that should be routed to broker <code>B2</code> with an error message indicating that there is no route available to the destination.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="router-address-pattern-matching">6.3.6. Pattern Matching for Addresses</h4>
<div class="paragraph">
<p>In some router configuration scenarios, you might need to use pattern matching to match a range of addresses rather than a single, literal address. Address patterns match any address that corresponds to the pattern.</p>
</div>
<div class="paragraph">
<p>An address pattern is a sequence of tokens (typically words) that are delimited by either <code>.</code> or <code>/</code> characters. They also can contain special wildcard characters that represent words:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>*</code> represents exactly one word</p>
</li>
<li>
<p><code>#</code> represents zero or more words</p>
</li>
</ul>
</div>
<div class="exampleblock">
<div class="title">Example 10. Address Pattern</div>
<div class="content">
<div class="paragraph">
<p>This address contains two tokens, separated by the <code>/</code> delimiter:</p>
</div>
<div class="paragraph">
<p><code>my/address</code></p>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 11. Address Pattern with Wildcard</div>
<div class="content">
<div class="paragraph">
<p>This address contains three tokens. The <code>*</code> is a wildcard, representing any single word that might be between <code>my</code> and <code>address</code>:</p>
</div>
<div class="paragraph">
<p><code>my/*/address</code></p>
</div>
</div>
</div>
<div class="paragraph">
<p>The following table shows some address patterns and examples of the addresses that would match them:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">This pattern&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Matches&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">But not&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/*</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/europe</code></p>
</div>
<div class="paragraph">
<p><code>news/usa</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news</code></p>
</div>
<div class="paragraph">
<p><code>news/usa/sports</code></p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/#</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news</code></p>
</div>
<div class="paragraph">
<p><code>news/europe</code></p>
</div>
<div class="paragraph">
<p><code>news/usa/sports</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>europe</code></p>
</div>
<div class="paragraph">
<p><code>usa</code></p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/europe/#</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/europe</code></p>
</div>
<div class="paragraph">
<p><code>news/europe/sports</code></p>
</div>
<div class="paragraph">
<p><code>news/europe/politics/fr</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/usa</code></p>
</div>
<div class="paragraph">
<p><code>europe</code></p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/*/sports</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/europe/sports</code></p>
</div>
<div class="paragraph">
<p><code>news/usa/sports</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news</code></p>
</div>
<div class="paragraph">
<p><code>news/europe/fr/sports</code></p>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="monitoring-managing-router-network">7. Monitoring and managing the router network</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="starting-router-qdr">7.1. Starting a router</h3>
<div class="paragraph">
<p>You use the <code>qdrouterd</code> command to start a router. You can start a router in the foreground, the background, or as a service.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Do one of the following:</p>
<div class="openblock">
<div class="content">
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Enter this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Start the router in the foreground</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-bash hljs" data-lang="bash">$ qdrouterd</code></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Start the router in the background as a daemon</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-bash hljs" data-lang="bash">$ qdrouterd -d</code></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Start the router as a service</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-bash hljs" data-lang="bash">$ systemctl start qdrouterd.service</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>If you start the router as a service, the <code>systemd</code> <code>LimitNOFILE</code> limit affects the number of connections that can be open for the router. If you reach the limit, the router is not able to accept any more connections, and an error message is logged indicating "Too many open files". To avoid reaching this limit, increase the <code>LimitNOFILE</code> value for the <code>systemd</code> process.</p>
</div>
<div class="paragraph">
<p>For more information, see the <code>systemd.exec(5)</code> man page.</p>
</div>
</td>
</tr>
</table>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="logging">7.2. Logging</h3>
<div class="paragraph">
<p>Logging enables you to diagnose error and performance issues with Dispatch Router.</p>
</div>
<div class="paragraph">
<p>Dispatch Router consists of internal modules that provide important information about the router. For each module, you can specify logging levels, the format of the log file, and the location to which the logs should be written.</p>
</div>
<div class="sect3">
<h4 id="logging-modules-you-can-configure">7.2.1. Logging Modules</h4>
<div class="paragraph">
<p>Dispatch Router logs are broken into different categories called <em>logging modules</em>. Each module provides important information about a particular aspect of Dispatch Router.</p>
</div>
<div class="sect4">
<h5 id="the_code_default_code_logging_module">The <code>DEFAULT</code> Logging Module</h5>
<div class="paragraph">
<p>The default module. This module applies defaults to all of the other logging modules.</p>
</div>
</div>
<div class="sect4">
<h5 id="the_code_router_code_logging_module">The <code>ROUTER</code> Logging Module</h5>
<div class="paragraph">
<p>This module provides information and statistics about the local router. This includes how the router connects to other routers in the network, and information about the remote destinations that are directly reachable from the router (link routes, waypoints, autolinks, and so on).</p>
</div>
<div class="exampleblock">
<div class="title">Example 12. Using the <code>ROUTER</code> log to trace connections and links</div>
<div class="content">
<div class="paragraph">
<p>In this example, <code>ROUTER</code> logs show the lifecycle of a connection and a link that is associated with it.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">2019-04-05 14:54:38.037248 -0400 ROUTER (info) [C1] Connection Opened: dir=in host=127.0.0.1:55440 vhost= encrypted=no auth=no user=anonymous container_id=95e55424-6c0a-4a5c-8848-65a3ea5cc25a props= <b class="conum">(1)</b>
2019-04-05 14:54:38.038137 -0400 ROUTER (info) [C1][L6] Link attached: dir=in source={&lt;none&gt; expire:sess} target={$management expire:sess} <b class="conum">(2)</b>
2019-04-05 14:54:38.041103 -0400 ROUTER (info) [C1][L6] Link lost: del=1 presett=0 psdrop=0 acc=1 rej=0 rel=0 mod=0 delay1=0 delay10=0 <b class="conum">(3)</b>
2019-04-05 14:54:38.041154 -0400 ROUTER (info) [C1] Connection Closed <b class="conum">(4)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The connection is opened. Each connection has a unique ID (<code>C1</code>). The log also shows some information about the connection.</p>
</li>
<li>
<p>A link is attached over the connection. The link is identified with a unique ID (<code>L6</code>). The log also shows the direction of the link, and the source and target addresses.</p>
</li>
<li>
<p>The link is detached. The log shows the link&#8217;s terminal statistics.</p>
</li>
<li>
<p>The connection is closed.</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="the_code_router_hello_code_logging_module">The <code>ROUTER_HELLO</code> Logging Module</h5>
<div class="paragraph">
<p>This module provides information about the <em>Hello</em> protocol used by interior routers to exchange Hello messages, which include information about the router&#8217;s ID and a list of its reachable neighbors (the other routers with which this router has bidirectional connectivity).</p>
</div>
<div class="paragraph">
<p>The logs for this module are helpful for monitoring or resolving issues in the network topology, and for determining to which other routers a router is connected, and the hop-cost for each of those connections.</p>
</div>
<div class="paragraph">
<p>In this example, on <code>Router.A</code>, the <code>ROUTER_HELLO</code> log shows that it is connected to <code>Router.B</code>, and that <code>Router.B</code> is connected to <code>Router.A</code> and <code>Router.C</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 13:50:21 2016 ROUTER_HELLO (trace) RCVD: HELLO(id=Router.B area=0 inst=1465307413 seen=['Router.A', 'Router.C']) <b class="conum">(1)</b>
Tue Jun  7 13:50:21 2016 ROUTER_HELLO (trace) SENT: HELLO(id=Router.A area=0 inst=1465307416 seen=['Router.B']) <b class="conum">(2)</b>
Tue Jun  7 13:50:22 2016 ROUTER_HELLO (trace) RCVD: HELLO(id=Router.B area=0 inst=1465307413 seen=['Router.A', 'Router.C'])
Tue Jun  7 13:50:22 2016 ROUTER_HELLO (trace) SENT: HELLO(id=Router.A area=0 inst=1465307416 seen=['Router.B'])</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p><code>Router.A</code> received a Hello message from <code>Router.B</code>, which can see <code>Router.A</code> and <code>Router.C</code>.</p>
</li>
<li>
<p><code>Router.A</code> sent a Hello message to <code>Router.B</code>, which is the only router it can see.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>On <code>Router.B</code>, the <code>ROUTER_HELLO</code> log shows the same router topology from a different perspective:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 13:50:18 2016 ROUTER_HELLO (trace) SENT: HELLO(id=Router.B area=0 inst=1465307413 seen=['Router.A', 'Router.C']) <b class="conum">(1)</b>
Tue Jun  7 13:50:18 2016 ROUTER_HELLO (trace) RCVD: HELLO(id=Router.A area=0 inst=1465307416 seen=['Router.B']) <b class="conum">(2)</b>
Tue Jun  7 13:50:19 2016 ROUTER_HELLO (trace) RCVD: HELLO(id=Router.C area=0 inst=1465307411 seen=['Router.B']) <b class="conum">(3)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p><code>Router.B</code> sent a Hello message to <code>Router.A</code> and <code>Router.C</code>.</p>
</li>
<li>
<p><code>Router.B</code> received a Hello message from <code>Router.A</code>, which can only see <code>Router.B</code>.</p>
</li>
<li>
<p><code>Router.B</code> received a Hello message from <code>Router.C</code>, which can only see <code>Router.B</code>.</p>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="the_code_router_ls_code_logging_module">The <code>ROUTER_LS</code> Logging Module</h5>
<div class="paragraph">
<p>This module provides information about link-state data between routers, including Router Advertisement (RA), Link State Request (LSR), and Link State Update (LSU) messages.</p>
</div>
<div class="paragraph">
<p>Periodically, each router sends an LSR to the other routers and receives an LSU with the requested information. Exchanging the above information, each router can compute the next hops in the topology, and the related costs.</p>
</div>
<div class="paragraph">
<p>This example shows the RA, LSR, and LSU messages sent between three routers:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) SENT: LSR(id=Router.A area=0) to: Router.C
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) SENT: LSR(id=Router.A area=0) to: Router.B
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) SENT: RA(id=Router.A area=0 inst=1465308600 ls_seq=1 mobile_seq=1) <b class="conum">(1)</b>
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) RCVD: LSU(id=Router.B area=0 inst=1465308595 ls_seq=2 ls=LS(id=Router.B area=0 ls_seq=2 peers={'Router.A': 1L, 'Router.C': 1L})) <b class="conum">(2)</b>
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) RCVD: LSR(id=Router.B area=0)
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) SENT: LSU(id=Router.A area=0 inst=1465308600 ls_seq=1 ls=LS(id=Router.A area=0 ls_seq=1 peers={'Router.B': 1}))
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) RCVD: RA(id=Router.C area=0 inst=1465308592 ls_seq=1 mobile_seq=0)
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) SENT: LSR(id=Router.A area=0) to: Router.C
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) RCVD: LSR(id=Router.C area=0) <b class="conum">(3)</b>
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) SENT: LSU(id=Router.A area=0 inst=1465308600 ls_seq=1 ls=LS(id=Router.A area=0 ls_seq=1 peers={'Router.B': 1}))
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) RCVD: LSU(id=Router.C area=0 inst=1465308592 ls_seq=1 ls=LS(id=Router.C area=0 ls_seq=1 peers={'Router.B': 1L})) <b class="conum">(4)</b>
Tue Jun  7 14:10:03 2016 ROUTER_LS (trace) Computed next hops: {'Router.C': 'Router.B', 'Router.B': 'Router.B'} <b class="conum">(5)</b>
Tue Jun  7 14:10:03 2016 ROUTER_LS (trace) Computed costs: {'Router.C': 2L, 'Router.B': 1}
Tue Jun  7 14:10:03 2016 ROUTER_LS (trace) Computed valid origins: {'Router.C': [], 'Router.B': []}</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p><code>Router.A</code> sent LSR requests and an RA advertisement to the other routers on the network.</p>
</li>
<li>
<p><code>Router.A</code> received an LSU from <code>Router.B</code>, which has two peers: <code>Router.A</code>, and <code>Router.C</code> (with a cost of <code>1</code>).</p>
</li>
<li>
<p><code>Router.A</code> received an LSR from both <code>Router.B</code> and <code>Router.C</code>, and  replied with an LSU.</p>
</li>
<li>
<p><code>Router.A</code> received an LSU from <code>Router.C</code>, which only has one peer: <code>Router.B</code> (with a cost of <code>1</code>).</p>
</li>
<li>
<p>After the LSR and LSU messages are exchanged, <code>Router.A</code> computed the router topology with the related costs.</p>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="the_code_router_ma_code_logging_module">The <code>ROUTER_MA</code> Logging Module</h5>
<div class="paragraph">
<p>This module provides information about the exchange of mobile address information between routers, including Mobile Address Request (MAR) and Mobile Address Update (MAU) messages exchanged between routers. You can use this log to monitor the state of mobile addresses attached to each router.</p>
</div>
<div class="paragraph">
<p>This example shows the MAR and MAU messages sent between three routers:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 14:27:20 2016 ROUTER_MA (trace) SENT: MAU(id=Router.A area=0 mobile_seq=1 add=['Cmy_queue', 'Dmy_queue', 'M0my_queue_wp'] del=[]) <b class="conum">(1)</b>
Tue Jun  7 14:27:21 2016 ROUTER_MA (trace) RCVD: MAR(id=Router.C area=0 have_seq=0) <b class="conum">(2)</b>
Tue Jun  7 14:27:21 2016 ROUTER_MA (trace) SENT: MAU(id=Router.A area=0 mobile_seq=1 add=['Cmy_queue', 'Dmy_queue', 'M0my_queue_wp'] del=[])
Tue Jun  7 14:27:22 2016 ROUTER_MA (trace) RCVD: MAR(id=Router.B area=0 have_seq=0) <b class="conum">(3)</b>
Tue Jun  7 14:27:22 2016 ROUTER_MA (trace) SENT: MAU(id=Router.A area=0 mobile_seq=1 add=['Cmy_queue', 'Dmy_queue', 'M0my_queue_wp'] del=[])
Tue Jun  7 14:27:39 2016 ROUTER_MA (trace) RCVD: MAU(id=Router.C area=0 mobile_seq=1 add=['M0my_test'] del=[]) <b class="conum">(4)</b>
Tue Jun  7 14:27:51 2016 ROUTER_MA (trace) RCVD: MAU(id=Router.C area=0 mobile_seq=2 add=[] del=['M0my_test']) <b class="conum">(5)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p><code>Router.A</code> sent MAU messages to the other routers in the network to notify them about the addresses added for <code>my_queue</code> and <code>my_queue_wp</code>.</p>
</li>
<li>
<p><code>Router.A</code> received a MAR message in response from <code>Router.C</code>.</p>
</li>
<li>
<p><code>Router.A</code> received another MAR message in response from <code>Router.B</code>.</p>
</li>
<li>
<p><code>Router.C</code> sent a MAU message to notify the other routers that it added and address for <code>my_test</code>.</p>
</li>
<li>
<p><code>Router.C</code> sent another MAU message to notify the other routers that it deleted the address for <code>my_test</code> (because the receiver is detached).</p>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="the_code_message_code_logging_module">The <code>MESSAGE</code> Logging Module</h5>
<div class="paragraph">
<p>This module provides information about AMQP messages sent and received by the router, including information about the address, body, and link. You can use this log to find high-level information about messages on a particular router.</p>
</div>
<div class="paragraph">
<p>In this example, <code>Router.A</code> has sent and received some messages related to the Hello protocol, and sent and received some other messages on a link for a mobile address:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 14:36:54 2016 MESSAGE (trace) Sending Message{to='amqp:/_topo/0/Router.B/qdrouter' body='\d1\00\00\00\1b\00\00\00\04\a1\02id\a1\08R'} on link qdlink.p9XmBm19uDqx50R
Tue Jun  7 14:36:54 2016 MESSAGE (trace) Received Message{to='amqp:/_topo/0/Router.A/qdrouter' body='\d1\00\00\00\8e\00\00\00
\a1\06ls_se'} on link qdlink.phMsJOq7YaFsGAG
Tue Jun  7 14:36:54 2016 MESSAGE (trace) Received Message{ body='\d1\00\00\00\10\00\00\00\02\a1\08seque'} on link qdlink.FYHqBX+TtwXZHfV
Tue Jun  7 14:36:54 2016 MESSAGE (trace) Sending Message{ body='\d1\00\00\00\10\00\00\00\02\a1\08seque'} on link qdlink.yU1tnPs5KbMlieM
Tue Jun  7 14:36:54 2016 MESSAGE (trace) Sending Message{to='amqp:/_local/qdhello' body='\d1\00\00\00G\00\00\00\08\a1\04seen\d0'} on link qdlink.p9XmBm19uDqx50R
Tue Jun  7 14:36:54 2016 MESSAGE (trace) Sending Message{to='amqp:/_topo/0/Router.C/qdrouter' body='\d1\00\00\00\1b\00\00\00\04\a1\02id\a1\08R'} on link qdlink.p9XmBm19uDqx50R</pre>
</div>
</div>
</div>
<div class="sect4">
<h5 id="the_code_server_code_logging_module">The <code>SERVER</code> Logging Module</h5>
<div class="paragraph">
<p>This module provides information about how the router is listening for and connecting to other containers in the network (such as clients, routers, and brokers). This information includes the state of AMQP messages sent and received by the broker (open, begin, attach, transfer, flow, and so on), and the related content of those messages.</p>
</div>
<div class="paragraph">
<p>For example, this log shows details about how the router handled a link attachment:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 14:39:52 2016 SERVER (trace) [2]:  &lt;- AMQP
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:  &lt;- AMQP
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:0 &lt;- @open(16) [container-id="Router.B", max-frame-size=16384, channel-max=32767, idle-time-out=8000, offered-capabilities=:"ANONYMOUS-RELAY", properties={:product="qpid-dispatch-router", :version="0.6.0"}]
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:0 -&gt; @begin(17) [next-outgoing-id=0, incoming-window=15, outgoing-window=2147483647]
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:RAW: "\x00\x00\x00\x1e\x02\x00\x00\x00\x00S\x11\xd0\x00\x00\x00\x0e\x00\x00\x00\x04@R\x00R\x0fp\x7f\xff\xff\xff"
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:1 -&gt; @begin(17) [next-outgoing-id=0, incoming-window=15, outgoing-window=2147483647]
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:RAW: "\x00\x00\x00\x1e\x02\x00\x00\x01\x00S\x11\xd0\x00\x00\x00\x0e\x00\x00\x00\x04@R\x00R\x0fp\x7f\xff\xff\xff"
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:0 -&gt; @attach(18) [name="qdlink.uSSeXPSfTHhxo8d", handle=0, role=true, snd-settle-mode=2, rcv-settle-mode=0, source=@source(40) [durable=0, expiry-policy=:"link-detach", timeout=0, dynamic=false, capabilities=:"qd.router"], target=@target(41) [durable=0, expiry-policy=:"link-detach", timeout=0, dynamic=false, capabilities=:"qd.router"], initial-delivery-count=0]
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:RAW: "\x00\x00\x00\x91\x02\x00\x00\x00\x00S\x12\xd0\x00\x00\x00\x81\x00\x00\x00\x0a\xa1\x16qdlink.uSSeXPSfTHhxo8dR\x00AP\x02P\x00\x00S(\xd0\x00\x00\x00'\x00\x00\x00\x0b@R\x00\xa3\x0blink-detachR\x00B@@@@@\xa3\x09qd.router\x00S)\xd0\x00\x00\x00#\x00\x00\x00\x07@R\x00\xa3\x0blink-detachR\x00B@\xa3\x09qd.router@@R\x00"</pre>
</div>
</div>
</div>
<div class="sect4">
<h5 id="the_code_agent_code_logging_module">The <code>AGENT</code> Logging Module</h5>
<div class="paragraph">
<p>This module provides information about configuration changes made to the router from either editing the router&#8217;s configuration file or using <code>qdmanage</code>.</p>
</div>
<div class="paragraph">
<p>In this example, on <code>Router.A</code>, <code>address</code>, <code>linkRoute</code>, and <code>autoLink</code> entities were added to the router&#8217;s configuration file. When the router was started, the <code>AGENT</code> module applied these changes, and they are now viewable in the log:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: ConnectorEntity(addr=127.0.0.1, allowRedirect=True, cost=1, host=127.0.0.1, identity=connector/127.0.0.1:5672:BROKER, idleTimeoutSeconds=16, maxFrameSize=65536, name=BROKER, port=5672, role=route-container, stripAnnotations=both, type=org.apache.qpid.dispatch.connector, verifyHostname=True)
Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: RouterConfigAddressEntity(distribution=closest, identity=router.config.address/0, name=router.config.address/0, prefix=my_address, type=org.apache.qpid.dispatch.router.config.address, waypoint=False)
Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: RouterConfigAddressEntity(distribution=balanced, identity=router.config.address/1, name=router.config.address/1, prefix=my_queue_wp, type=org.apache.qpid.dispatch.router.config.address, waypoint=True)
Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: RouterConfigLinkrouteEntity(connection=BROKER, direction=in, distribution=linkBalanced, identity=router.config.linkRoute/0, name=router.config.linkRoute/0, prefix=my_queue, type=org.apache.qpid.dispatch.router.config.linkRoute)
Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: RouterConfigLinkrouteEntity(connection=BROKER, direction=out, distribution=linkBalanced, identity=router.config.linkRoute/1, name=router.config.linkRoute/1, prefix=my_queue, type=org.apache.qpid.dispatch.router.config.linkRoute)
Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: RouterConfigAutolinkEntity(address=my_queue_wp, connection=BROKER, direction=in, identity=router.config.autoLink/0, name=router.config.autoLink/0, type=org.apache.qpid.dispatch.router.config.autoLink)
Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: RouterConfigAutolinkEntity(address=my_queue_wp, connection=BROKER, direction=out, identity=router.config.autoLink/1, name=router.config.autoLink/1, type=org.apache.qpid.dispatch.router.config.autoLink)</pre>
</div>
</div>
</div>
<div class="sect4">
<h5 id="the_code_container_code_logging_module">The <code>CONTAINER</code> Logging Module</h5>
<div class="paragraph">
<p>This module provides information about the nodes related to the router. This includes only the AMQP relay node.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 14:46:18 2016 CONTAINER (trace) Container Initialized
Tue Jun  7 14:46:18 2016 CONTAINER (trace) Node Type Registered - router
Tue Jun  7 14:46:18 2016 CONTAINER (trace) Node of type 'router' installed as default node</pre>
</div>
</div>
</div>
<div class="sect4">
<h5 id="the_code_error_code_logging_module">The <code>ERROR</code> Logging Module</h5>
<div class="paragraph">
<p>This module provides detailed information about error conditions encountered during execution.</p>
</div>
<div class="paragraph">
<p>In this example, <code>Router.A</code> failed to start when an incorrect path was specified for the router&#8217;s configuration file:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo qdrouterd --conf xxx
Wed Jun 15 09:53:28 2016 ERROR (error) Python: Exception: Cannot load configuration file xxx: [Errno 2] No such file or directory: 'xxx'
Wed Jun 15 09:53:28 2016 ERROR (error) Traceback (most recent call last):
  File "/usr/lib/qpid-dispatch/python/qpid_dispatch_internal/management/config.py", line 155, in configure_dispatch
    config = Config(filename)
  File "/usr/lib/qpid-dispatch/python/qpid_dispatch_internal/management/config.py", line 41, in __init__
    self.load(filename, raw_json)
  File "/usr/lib/qpid-dispatch/python/qpid_dispatch_internal/management/config.py", line 123, in load
    with open(source) as f:
Exception: Cannot load configuration file xxx: [Errno 2] No such file or directory: 'xxx'

Wed Jun 15 09:53:28 2016 MAIN (critical) Router start-up failed: Python: Exception: Cannot load configuration file xxx: [Errno 2] No such file or directory: 'xxx'
qdrouterd: Python: Exception: Cannot load configuration file xxx: [Errno 2] No such file or directory: 'xxx'</pre>
</div>
</div>
</div>
<div class="sect4">
<h5 id="the_code_policy_code_logging_module">The <code>POLICY</code> Logging Module</h5>
<div class="paragraph">
<p>This module provides information about policies that have been configured for the router.</p>
</div>
<div class="paragraph">
<p>In this example, <code>Router.A</code> has no limits on maximum connections, and the default application policy is disabled:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 15:07:32 2016 POLICY (info) Policy configured maximumConnections: 0, policyFolder: '', access rules enabled: 'false'
Tue Jun  7 15:07:32 2016 POLICY (info) Policy fallback defaultApplication is disabled</pre>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="configure-default-logging">7.2.2. Configuring Logging</h4>
<div class="paragraph">
<p>You can specify the types of events that should be logged, the format of the log entries, and where those entries should be sent.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>In the router&#8217;s configuration file, add a <code>log</code> section to set the default logging properties:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">log {
    module: DEFAULT
    enable: <em>LOGGING_LEVEL</em>
    includeTimestamp: yes
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>module</code></dt>
<dd>
<p>Specify <code>DEFAULT</code>.</p>
</dd>
<dt class="hdlist1"><code>enable</code></dt>
<dd>
<p>The logging level. You can specify any of the following levels (from lowest to highest):</p>
<div class="ulist">
<ul>
<li>
<p><code>trace</code> - provides the most information, but significantly affects system performance</p>
</li>
<li>
<p><code>debug</code> - useful for debugging, but affects system performance</p>
</li>
<li>
<p><code>info</code> - provides general information without affecting system performance</p>
</li>
<li>
<p><code>notice</code> - provides general information, but is less verbose than <code>info</code></p>
</li>
<li>
<p><code>warning</code> - provides information about issues you should be aware of, but which are not errors</p>
</li>
<li>
<p><code>error</code> - error conditions that you should address</p>
</li>
<li>
<p><code>critical</code> - critical system issues that you must address immediately</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>To specify multiple levels, use a comma-separated list. You can also use <code>+</code> to specify a level and all levels above it. For example, <code>trace,debug,warning+</code> enables trace, debug, warning, error, and critical levels. For default logging, you should typically use the <code>info+</code> or <code>notice+</code> level. These levels will provide general information, warnings, and errors for all modules without affecting the performance of Dispatch Router.</p>
</div>
</dd>
<dt class="hdlist1"><code>includeTimestamp</code></dt>
<dd>
<p>Set this to <code>yes</code> to include the timestamp in all logs.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional log attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_log">log</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>Add an additional <code>log</code> section for each logging module that should not follow the default logging configuration:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">log {
    module: <em>MODULE_NAME</em>
    enable: <em>LOGGING_LEVEL</em>
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>module</code></dt>
<dd>
<p>The name of the module for which you are configuring logging. For a list of valid modules, see <a href="#logging-modules-you-can-configure">Logging Modules</a>.</p>
</dd>
<dt class="hdlist1"><code>enable</code></dt>
<dd>
<p>The logging level. You can specify any of the following levels (from lowest to highest):</p>
<div class="ulist">
<ul>
<li>
<p><code>trace</code> - provides the most information, but significantly affects system performance</p>
</li>
<li>
<p><code>debug</code> - useful for debugging, but affects system performance</p>
</li>
<li>
<p><code>info</code> - provides general information without affecting system performance</p>
</li>
<li>
<p><code>notice</code> - provides general information, but is less verbose than <code>info</code></p>
</li>
<li>
<p><code>warning</code> - provides information about issues you should be aware of, but which are not errors</p>
</li>
<li>
<p><code>error</code> - error conditions that you should address</p>
</li>
<li>
<p><code>critical</code> - critical system issues that you must address immediately</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>To specify multiple levels, use a comma-separated list. You can also use <code>+</code> to specify a level and all levels above it. For example, <code>trace,debug,warning+</code> enables trace, debug, warning, error, and critical levels. For default logging, you should typically use the <code>info+</code> or <code>notice+</code> level. These levels will provide general information, warnings, and errors for all modules without affecting the performance of Dispatch Router.</p>
</div>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional log attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_log">log</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="viewing_log_entries">7.2.3. Viewing Log Entries</h4>
<div class="paragraph">
<p>You may need to view log entries to diagnose errors, performance problems, and other important issues. A log entry consists of an optional timestamp, the logging module, the logging level, and the log message.</p>
</div>
<div class="sect4">
<h5 id="viewing_log_entries_on_the_console">Viewing Log Entries on the Console</h5>
<div class="paragraph">
<p>By default, log entries are logged to the console, and you can view them there. However, if the <code>output</code> attribute is set for a particular logging module, then you can find those log entries in the specified location (<code>stderr</code>, <code>syslog</code>, or a file).</p>
</div>
</div>
<div class="sect4">
<h5 id="viewing_log_entries_on_the_cli">Viewing Log Entries on the CLI</h5>
<div class="paragraph">
<p>You can use the <code>qdstat</code> tool to view a list of recent log entries.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use the <strong><code>qdstat --log</code></strong> command to view recent log entries.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>You can use the <code>--limit</code> parameter to limit the number of log entries that are displayed. For more information about <code>qdstat</code>, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdstat.html" target="_blank" rel="noopener">qdstat man page</a>.</p>
</div>
<div class="paragraph">
<p>This example displays the last three log entries for <code>Router.A</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --log --limit=3 -r ROUTER.A
Wed Jun  7 17:49:32 2017 ROUTER (none) Core action 'link_deliver'
Wed Jun  7 17:49:32 2017 ROUTER (none) Core action 'send_to'
Wed Jun  7 17:49:32 2017 SERVER (none) [2]:0 -&gt; @flow(19) [next-incoming-id=1, incoming-window=61, next-outgoing-id=0, outgoing-window=2147483647, handle=0, delivery-count=1, link-credit=250, drain=false]</pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="using-router-console">7.3. Using Apache Qpid Dispatch Router Console</h3>
<div class="paragraph">
<p>Apache Qpid Dispatch Router Console is a web console for monitoring the status and performance of Dispatch Router router networks.</p>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>Apache Qpid Dispatch Router Console requires the <code>qpid-dispatch-console</code> package.</p>
<div class="paragraph">
<p>For more information about installing packages, see the <a href="https://qpid.apache.org/packages.html" target="_blank" rel="noopener">Packages page</a>.</p>
</div>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="setting_up_access_to_the_web_console">7.3.1. Setting up access to the web console</h4>
<div class="paragraph">
<p>Before you can access the web console, you must configure a <code>listener</code> to accept HTTP connections for the web console and serve the console files.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>On the router from which you want to access the web console, open the /etc/qpid-dispatch/qdrouterd.conf configuration file.</p>
</li>
<li>
<p>Add a <code>listener</code> to serve the console.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This example creates a <code>listener</code> that clients can use to access the web console:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    host: 0.0.0.0
    port: 8672
    role: normal
    http: true
    httpRootDir: /usr/share/qpid-dispatch/console
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>host</code></dt>
<dd>
<p>The IP address (IPv4 or IPv6) or hostname on which the router will listen.</p>
</dd>
<dt class="hdlist1"><code>port</code></dt>
<dd>
<p>The port number or symbolic service name on which the router will listen.</p>
</dd>
<dt class="hdlist1"><code>role</code></dt>
<dd>
<p>The role of the connection. Specify <code>normal</code> to indicate that this connection is used for client traffic.</p>
</dd>
<dt class="hdlist1"><code>http</code></dt>
<dd>
<p>Set this attribute to <code>true</code> to specify that this <code>listener</code> should accept HTTP connections instead of plain AMQP connections.</p>
</dd>
<dt class="hdlist1"><code>httpRootDir</code></dt>
<dd>
<p>Specify the absolute path to the directory that contains the web console HTML files. The default directory is the stand-alone console installation directory, usually <code>/usr/share/qpid-dispatch/console</code>.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>If you want to secure access to the console, secure the <code>listener</code>.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>For more information, see <a href="#securing-incoming-client-connections-qdr">Securing incoming client connections</a>. This example adds basic user name and password authentication using SASL PLAIN:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    host: 0.0.0.0
    port: 8672
    role: normal
    http: true
    httpRootDir: /usr/share/qpid-dispatch/console
    authenticatePeer: yes
    saslMechanisms: PLAIN
}</pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>If you want to set up access to the web console from any other router in the router network, repeat this procedure for each router.</p>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="accessing_the_web_console">7.3.2. Accessing the web console</h4>
<div class="paragraph">
<p>You can access the web console from a web browser.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>In a web browser, navigate to the web console URL.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>The web console URL is the &lt;host&gt;:&lt;port&gt; from the <code>listener</code> that you created to serve the web console. For example: <code>localhost:8672</code>.</p>
</div>
<div class="paragraph">
<p>The Apache Qpid Dispatch Router Console opens. If you set up user name and password authentication, the <strong>Connect</strong> tab is displayed.</p>
</div>
</div>
</div>
</li>
<li>
<p>If necessary, log in to the web console.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>If you set up user name and password authentication, enter your user name and password to access the web console.</p>
</div>
<div class="paragraph">
<p>The syntax for the user name is &lt;<em>user</em>&gt;@&lt;<em>domain</em>&gt;. For example: <code>admin@my-domain</code>.</p>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="monitoring_the_router_network_using_the_web_console">7.3.3. Monitoring the router network using the web console</h4>
<div class="paragraph">
<p>In the web console, you use the tabs to monitor the router network.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">This tab&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Provides&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Overview</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Aggregated information about routers, addresses, links, connections, and logs.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Entities</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Detailed information about each AMQP management entity for each router in the router network. Some of the attributes have charts that you can add to the <code>Charts</code> tab.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Topology</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A graphical view of the router network, including routers, clients, and brokers. The topology shows how the routers are connected, and how messages are flowing through the network.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Charts</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Graphs of the information selected on the <code>Entities</code> tab.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Message Flow</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A chord diagram showing the real-time message flow by address.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Schema</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The management schema that controls each of the routers in the router network.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="closing_a_connection">7.3.4. Closing a connection</h4>
<div class="paragraph">
<p>If a consumer is processing messages too slowly, or has stopped processing messages without settling its deliveries, you can close the connection. When you close the connection, the "stuck" deliveries are released (meaning they are not delivered to any consumers).</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Identify any connections with slow or stuck consumers.</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>Navigate to <span class="menuseq"><b class="menu">Overview</b>&#160;<b class="caret">&#8250;</b> <b class="menuitem">Connections</b></span>.</p>
</li>
<li>
<p>Click a connection, and then click <strong>Links</strong>.</p>
<div class="paragraph">
<p>The <strong>Rate</strong>, <strong>Delayed 10 sec</strong>, and <strong>Delayed 1 sec</strong> columns indicate if there are any slow or stuck consumers on the connection.</p>
</div>
</li>
</ol>
</div>
</li>
<li>
<p>Click <b class="button">Close</b> to close the connection.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect2">
<h3 id="monitoring-using-qdstat">7.4. Monitoring Dispatch Router Using <code>qdstat</code></h3>
<div class="paragraph">
<p>You can use <code>qdstat</code> to view the status of routers on your router network. For example, you can view information about the attached links and configured addresses, available connections, and nodes in the router network.</p>
</div>
<div class="sect3">
<h4 id="syntax_for_using_code_qdstat_code">7.4.1. Syntax for Using <code>qdstat</code></h4>
<div class="paragraph">
<p>You can use <code>qdstat</code> with the following syntax:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat <em>OPTION</em> [<em>CONNECTION_OPTIONS</em>] [<em>SECURE_CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>This specifies:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>An <code>option</code> for the type of information to view.</p>
</li>
<li>
<p>One or more optional <code>connection_options</code> to specify a router for which to view the information.</p>
<div class="paragraph">
<p>If you do not specify a connection option, <code>qdstat</code> connects to the router listening on localhost and the default AMQP port (5672).</p>
</div>
</li>
<li>
<p>The <code>secure_connection_options</code> if the router for which you want to view information only accepts secure connections.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For more information about <code>qdstat</code>, see the <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdstat.html" target="_blank" rel="noopener">qdstat man page</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="creating_a_state_dump_of_the_router_network">7.4.2. Creating a State Dump of the Router Network</h4>
<div class="paragraph">
<p>A state dump shows the current operational state of the router network. You can display the following statistics for a single router, or for all routers in the router network:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Links</p>
</li>
<li>
<p>Addresses</p>
</li>
<li>
<p>Connections</p>
</li>
<li>
<p>Autolinks</p>
</li>
<li>
<p>Link routes</p>
</li>
<li>
<p>General statistics</p>
</li>
<li>
<p>Memory usage</p>
</li>
</ul>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Do one of the following:</p>
<div class="openblock">
<div class="content">
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command:</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Create a state dump containing all statistics for all routers</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --all-routers --all-entities</pre>
</div>
</div>
<div class="paragraph">
<p>If you run this command on an interior router, it displays the statistics for all interior routers. If you run the command on an edge router, it displays the statistics for only that edge router.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Create a state dump containing a single statistic for all routers</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -l|-a|-c|--autolinks|--linkroutes|-g|-m --all-routers</pre>
</div>
</div>
<div class="paragraph">
<p>If you run this command on an interior router, it displays the statistic for all interior routers. If you run the command on an edge router, it displays the statistic for only that edge router.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Create a state dump containing all statistics for a single router</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --all-entities</pre>
</div>
</div>
<div class="paragraph">
<p>This command shows the statistics for the local router only.</p>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_general_statistics_for_a_router">7.4.3. Viewing General Statistics for a Router</h4>
<div class="paragraph">
<p>You can view information about a router in the router network, such as its working mode and ID.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use the following command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -g [all-routers|<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>This example shows general statistics for the local router:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -g
Router Statistics
  attr                             value
  =============================================
  Version                          1.2.0
  Mode                             standalone
  Router Id                        Router.A
  Link Routes                      0
  Auto Links                       0
  Links                            2
  Nodes                            0
  Addresses                        4
  Connections                      1
  Presettled Count                 0
  Dropped Presettled Count         0
  Accepted Count                   2
  Rejected Count                   0
  Released Count                   0
  Modified Count                   0
  Ingress Count                    2
  Egress Count                     1
  Transit Count                    0
  Deliveries from Route Container  0
  Deliveries to Route Container    0</pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_a_list_of_connections_to_a_router">7.4.4. Viewing a List of Connections to a Router</h4>
<div class="paragraph">
<p>You can view:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Connections from clients (sender/receiver)</p>
</li>
<li>
<p>Connections from and to other routers in the network</p>
</li>
<li>
<p>Connections to other containers (such as brokers)</p>
</li>
<li>
<p>Connections from the tool itself</p>
</li>
</ul>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use this command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -c [all-routers|<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about the fields displayed by this command, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdstat.html#_qdstat_c" target="_blank" rel="noopener">the qdstat -c output columns</a>.</p>
</div>
<div class="paragraph">
<p>In this example, two clients are connected to <code>Router.A</code>. <code>Router.A</code> is connected to <code>Router.B</code> and a broker.</p>
</div>
<div class="paragraph">
<p>Viewing the connections on Router.A displays the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -c -r Router.A
Connections
id    host                        container                              role             dir  security     authentication  tenant
==================================================================================================================================
  2   127.0.0.1:5672                                                     route-container  out  no-security  anonymous-user   <b class="conum">(1)</b>
  10  127.0.0.1:5001               Router.B                              inter-router     out  no-security  anonymous-user   <b class="conum">(2)</b>
  12  localhost.localdomain:42972  161211fe-ba9e-4726-9996-52d6962d1276  normal           in   no-security  anonymous-user   <b class="conum">(3)</b>
  14  localhost.localdomain:42980  a35fcc78-63d9-4bed-b57c-053969c38fda  normal           in   no-security  anonymous-user   <b class="conum">(3)</b>
  15  localhost.localdomain:42982  0a03aa5b-7c45-4500-8b38-db81d01ce651  normal           in   no-security  anonymous-user   <b class="conum">(4)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>This connection shows that <code>Router.A</code> is connected to a broker, because the <code>role</code> is <code>route-container</code>, and the <code>dir</code> is <code>out</code>.</p>
</li>
<li>
<p><code>Router.A</code> is also connected to another router on the network (the <code>role</code> is <code>inter-router</code>), establishing an output connection (the <code>dir</code> is <code>out</code>).</p>
</li>
<li>
<p>These connections show that two clients are connected to <code>Router.A</code>, because the <code>role</code> is <code>normal</code>, and the <code>dir</code> is <code>in</code>.</p>
</li>
<li>
<p>The connection from <code>qdstat</code> to <code>Router.A</code>. This is the connection that <code>qdstat</code> uses to query <code>Router.A</code> and display the command output.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p><code>Router.A</code> is connected to <code>Router.B</code>. Viewing the connections on <code>Router.B</code> displays the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -c -r Router.B
Connections
id    host                         container  role          dir  security     authentication  tenant
====================================================================================================
  1   localhost.localdomain:51848  Router.A   inter-router  in   no-security  anonymous-user    <b class="conum">(1)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>This connection shows that <code>Router.B</code> is connected to <code>Router.A</code> through an incoming connection (the <code>role</code> is <code>inter-router</code> and the <code>dir</code> is <code>in</code>). There is not a connection from <code>qdstat</code> to <code>Router.B</code>, because the command was run from <code>Router.A</code> and forwarded to <code>Router.B</code>.</p>
</li>
</ol>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_amqp_links_attached_to_a_router">7.4.5. Viewing AMQP Links Attached to a Router</h4>
<div class="paragraph">
<p>You can view a list of AMQP links attached to the router from clients (sender/receiver), from or to other routers into the network, to other containers (for example, brokers), and from the tool itself.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use this command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -l [all-routers|<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about the fields displayed by this command, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdstat.html#_qdstat_l" target="_blank" rel="noopener">the qdstat -l output columns</a>.</p>
</div>
<div class="paragraph">
<p>In this example, <code>Router.A</code> is connected to both <code>Router.B</code> and a broker. A link route is configured for the <code>my_queue</code> queue and waypoint (with autolinks), and for the <code>my_queue_wp</code> queue on the broker. In addition, there is a receiver connected to <code>my_address</code> (message routing based), another to <code>my_queue</code>, and the a third one to <code>my_queue_wp</code>.</p>
</div>
<div class="paragraph">
<p>In this configuration, the router uses only one connection to the broker for both the waypoints (related to <code>my_queue_wp</code>) and the link route (related to <code>my_queue</code>).</p>
</div>
<div class="paragraph">
<p>Viewing the links displays the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -l
Router Links
  type            dir  conn id  id  peer  class   addr                  phs  cap  undel  unsett  del  presett  psdrop  acc  rej  rel  mod  admin    oper
  ======================================================================================================================================================
  router-control  in   2        7                                            250  0      0       2876 0        0       0    0    0    0    enabled  up <b class="conum">(1)</b>
  router-control  out  2        8         local   qdhello                    250  0      0       2716 0        0       0    0    0    0    enabled  up
  inter-router    in   2        9                                            250  0      0       1    0        0       0    0    0    0    enabled  up
  inter-router    out  2        10                                           250  0      0       1    0        0       0    0    0    0    enabled  up
  endpoint        in   1        11        mobile  my_queue_wp           1    250  0      0       3    0        0       0    0    0    0    enabled  up <b class="conum">(2)</b>
  endpoint        out  1        12        mobile  my_queue_wp           0    250  0      0       3    0        0       0    0    0    0    enabled  up
  endpoint        out  4        15        mobile  my_address            0    250  0      0       0    0        0       0    0    0    0    enabled  up <b class="conum">(3)</b>
  endpoint        out  6        18  19                                       250  0      0       1    0        0       0    0    0    0    enabled  up <b class="conum">(4)</b>
  endpoint        in   1        19  18                                       0    0      0       1    0        0       0    0    0    0    enabled  up <b class="conum">(5)</b>
  endpoint        out  19       40        mobile  my_queue_wp           1    250  0      0       1    0        0       0    0    0    0    enabled  up <b class="conum">(6)</b>
  endpoint        in   24       48        mobile  $management           0    250  0      0       1    0        0       0    0    0    0    enabled  up
  endpoint        out  24       49        local   temp.mx5HxzUe2Eddw_s       250  0      0       0    0        0       0    0    0    0    enabled  up</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The <code>conn id</code> 2 connection has four links (in both directions) for inter-router communications with <code>Router.B</code>, such as control messages and normal message-routed deliveries.</p>
</li>
<li>
<p>There are two autolinks (<code>conn id 1</code>) for the waypoint for <code>my_queue_wp</code>. There is an incoming (<code>id 11</code>) and outgoing (<code>id 12</code>) link to the broker, and another <code>out</code> link (<code>id 40</code>) to the receiver.</p>
</li>
<li>
<p>A <code>mobile</code> link for <code>my_address</code>. The <code>dir</code> is <code>out</code> related to the receiver attached to it.</p>
</li>
<li>
<p>The <code>out</code> link from the router to the receiver for <code>my_queue</code>. This enables the router to deliver messages to the receiver.</p>
</li>
<li>
<p>The <code>in</code> link to the router for <code>my_queue</code>. This enables the router to get messages from <code>my_queue</code> so that they can be sent to the receiver on the <code>out</code> link.</p>
</li>
<li>
<p>The remaining links are related to the <code>$management</code> address and are used by <code>qdstat</code> to receive the information that is displayed by this command.</p>
</li>
</ol>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_known_routers_on_a_network">7.4.6. Viewing Known Routers on a Network</h4>
<div class="paragraph">
<p>To see the topology of the router network, you can view known routers on the network.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use this command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -n [all-routers|<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about the fields displayed by this command, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdstat.html#_qdstat_n" target="_blank" rel="noopener">the qdstat -n output columns</a>.</p>
</div>
<div class="paragraph">
<p>In this example, <code>Router.A</code> is connected to <code>Router.B</code>, which is connected to <code>Router.C</code>. Viewing the router topology on <code>Router.A</code> shows the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -n -r Router.A
Routers in the Network
  router-id  next-hop  link  cost  neighbors                 valid-origins
  ==========================================================================
  Router.A   (self)    -           ['Router.B']              [] <b class="conum">(1)</b>
  Router.B   -         0     1     ['Router.A', 'Router.C']  [] <b class="conum">(2)</b>
  Router.C   Router.B  -     2     ['Router.B']              [] <b class="conum">(3)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p><code>Router.A</code> has one neighbor: <code>Router.B</code>.</p>
</li>
<li>
<p><code>Router.B</code> is connected to <code>Router.A</code> and <code>Router.C</code> over <code>link</code> 0. The <code>cost</code> for <code>Router.A</code> to reach <code>Router.B</code> is 1, because the two routers are connected directly.</p>
</li>
<li>
<p><code>Router.C</code> is connected to <code>Router.B</code>, but not to <code>Router.A</code>. The <code>cost</code> for <code>Router.A</code> to reach <code>Router.C</code> is 2, because messages would have to pass through <code>Router.B</code> as the <code>next-hop</code>.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p><code>Router.B</code> shows a different view of the router topology:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -n -v -r Router.B
Routers in the Network
  router-id  next-hop  link  cost  neighbors                 valid-origins
  ==========================================================================
  Router.A   -         0     1     ['Router.B']              ['Router.C']
  Router.B   (self)    -           ['Router.A', 'Router.C']  []
  Router.C   -         1     1     ['Router.B']              ['Router.A']</pre>
</div>
</div>
<div class="paragraph">
<p>The <code>neighbors</code> list is the same when viewed on <code>Router.B</code>. However, from the perspective of <code>Router.B</code>, the destinations on <code>Router.A</code> and <code>Router.C</code> both have a <code>cost</code> of <code>1</code>. This is because <code>Router.B</code> is connected to <code>Router.A</code> and <code>Router.C</code> through links.</p>
</div>
<div class="paragraph">
<p>The <code>valid-origins</code> column shows that starting from <code>Router.C</code>, <code>Router.B</code> has the best path to reach <code>Router.A</code>. Likewise, starting from <code>Router.A</code>, <code>Router.B</code> has the best path to reach <code>Router.C</code>.</p>
</div>
<div class="paragraph">
<p>Finally, <code>Router.C</code> shows the following details about the router topology:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -n -v -r Router.C
Routers in the Network
  router-id  next-hop  link  cost  neighbors                 valid-origins
  ==========================================================================
  Router.A   Router.B  -     2     ['Router.B']              []
  Router.B   -         0     1     ['Router.A', 'Router.C']  []
  Router.C   (self)    -           ['Router.B']              []</pre>
</div>
</div>
<div class="paragraph">
<p>Due to a symmetric topology, the <code>Router.C</code> perspective of the topology is very similar to the <code>Router.A</code> perspective. The primary difference is the <code>cost</code>: the cost to reach <code>Router.B</code> is <code>1</code>, because the two routers are connected. However, the cost to reach <code>Router.A</code> is <code>2</code>, because the messages would have to pass through <code>Router.B</code> as the <code>next-hop</code>.</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_addresses_known_to_a_router">7.4.7. Viewing Addresses Known to a Router</h4>
<div class="paragraph">
<p>You can view message-routed and link-routed addresses known to a router.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use the following command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -a [all-routers|<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about the fields displayed by this command, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdstat.html#_qdstat_a" target="_blank" rel="noopener">the qdstat -a output columns</a>.</p>
</div>
<div class="paragraph">
<p>In this example, <code>Router.A</code> is connected to both <code>Router.B</code> and a broker. The broker has two queues:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>my_queue</code> (with a link route on <code>Router.A</code>)</p>
</li>
<li>
<p><code>my_queue_wp</code> (with a waypoint and autolinks configured on <code>Router.A</code>)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In addition, there are three receivers: one connected to <code>my_address</code> for message routing, another connected to <code>my_queue</code>, and the last one connected to <code>my_queue_wp</code>.</p>
</div>
<div class="paragraph">
<p>Viewing the addresses displays the following information:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -a
Router Addresses
  class     addr                   phs  distrib       in-proc  local  remote  cntnr  in  out  thru  to-proc  from-proc
  ======================================================================================================================
  local     $_management_internal       closest       1        0      0       0      0   0    0     0        0
  local     $displayname                closest       1        0      0       0      0   0    0     0        0
  mobile    $management            0    closest       1        0      0       0      8   0    0     8        0
  local     $management                 closest       1        0      0       0      0   0    0     0        0
  router    Router.B                    closest       0        0      1       0      0   0    5     0        5 <b class="conum">(1)</b>
  mobile    my_address             0    closest       0        1      0       0      1   1    0     0        0 <b class="conum">(2)</b>
  link-in   my_queue                    linkBalanced  0        0      0       1      0   0    0     0        0 <b class="conum">(3)</b>
  link-out  my_queue                    linkBalanced  0        0      0       1      0   0    0     0        0
  mobile    my_queue_wp            1    balanced      0        1      0       0      1   1    0     0        0 <b class="conum">(4)</b>
  mobile    my_queue_wp            0    balanced      0        1      0       0      1   1    0     0        0
  local     qdhello                     flood         1        1      0       0      0   0    0     741      706 <b class="conum">(5)</b>
  local     qdrouter                    flood         1        0      0       0      0   0    0     4        0
  topo      qdrouter                    flood         1        0      1       0      0   0    27    28       28
  local     qdrouter.ma                 multicast     1        0      0       0      0   0    0     1        0
  topo      qdrouter.ma                 multicast     1        0      1       0      0   0    2     0        3
  local     temp.IJSoXoY_lX0TiDE        closest       0        1      0       0      0   0    0     0        0</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>An address related to <code>Router.B</code> with a <code>remote</code> at 1. This is the consumer from <code>Router.B</code>.</p>
</li>
<li>
<p>The <code>my_address</code> address has one local consumer, which is related to the single receiver attached on that address. The <code>in</code> and <code>out</code> fields are both 1, which means that one message has traveled through this address using the <code>closest</code> distribution method.</p>
</li>
<li>
<p>The incoming link route for the <code>my_queue</code> address. This address has one locally-attached container (<code>cntnr</code>) as a destination (in this case, the broker). The following entry is the outgoing link for the same address.</p>
</li>
<li>
<p>The incoming autolink for the <code>my_queue_wp</code> address and configured waypoint. There is one local consumer (<code>local</code>) for the attached receiver. The following entry is the outgoing autolink for the same address. A single message has traveled through the autolinks.</p>
</li>
<li>
<p>The <code>qdhello</code>, <code>qdrouter</code>, and <code>qdrouter.ma</code> addresses are used to periodically update the network topology and deliver router control messages. These updates are made automatically through the inter-router protocol, and are based on all of the messages the routers have exchanged. In this case, the distribution method (<code>distrib</code>) for each address is either flood or multicast to ensure the control messages reach all of the routers in the network.</p>
</li>
</ol>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_a_router_s_autolinks">7.4.8. Viewing a Router&#8217;s Autolinks</h4>
<div class="paragraph">
<p>You can view a list of the autolinks that are associated with waypoint addresses for a node on another container (such as a broker).</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use the following command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --autolinks [all-routers|<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about the fields displayed by this command, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdstat.html#_qdstat_autolinks" target="_blank" rel="noopener">the qdstat --autolinks output columns</a>.</p>
</div>
<div class="paragraph">
<p>In this example, a router is connected to a broker. The broker has a queue called <code>my_queue_wp</code>, to which the router is configured with a waypoint and autolinks. Viewing the autolinks displays the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --autolinks
AutoLinks
  addr         dir  phs  link  status  lastErr
  ==============================================
  my_queue_wp  in   1    4     active <b class="conum">(1)</b>
  my_queue_wp  out  0    5     active <b class="conum">(2)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The incoming autolink from <code>my_queue_wp</code>. As indicated by the <code>status</code> field, the link is active, because the broker is running and the connection for the link is already established (as indicated by the <code>link</code> field).</p>
</li>
<li>
<p>The outgoing autolink to <code>my_queue_wp</code>. Like the incoming link, it is active and has an established connection.</p>
</li>
</ol>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_the_status_of_a_router_s_link_routes">7.4.9. Viewing the Status of a Router&#8217;s Link Routes</h4>
<div class="paragraph">
<p>You can view the status of each incoming and outgoing link route.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use the following command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --linkroutes [all-routers|<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about the fields displayed by this command, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdstat.html#_qdstat_linkroutes" target="_blank" rel="noopener">the qdstat --linkroutes output columns</a>.</p>
</div>
<div class="paragraph">
<p>In this example, a router is connected to a broker. The router is configured with a link route to the <code>my_queue</code> queue on the broker. Viewing the link routes displays the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --linkroutes
Link Routes
  prefix    dir  distrib       status
  =====================================
  my_queue  in   linkBalanced  active <b class="conum">(1)</b>
  my_queue  out  linkBalanced  active <b class="conum">(2)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The incoming link route from <code>my_queue</code> to the router. This route is currently active, because the broker is running.</p>
</li>
<li>
<p>The outgoing link from the router to <code>my_queue</code>. This route is also currently active.</p>
</li>
</ol>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_memory_consumption_information">7.4.10. Viewing Memory Consumption Information</h4>
<div class="paragraph">
<p>If you need to perform debugging or tracing for a router, you can view information about its memory consumption.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use the following command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -m [all-routers|<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>This command displays information about allocated objects, their size, and their usage by application threads:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -m
Types
  type                     size   batch  thread-max  total  in-threads  rebal-in  rebal-out
  ===========================================================================================
  qd_bitmask_t             24     64     128         64     64          0         0
  qd_buffer_t              536    16     32          80     80          0         0
  qd_composed_field_t      64     64     128         256    256         0         0
  qd_composite_t           112    64     128         320    320         0         0
  ...</pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="managing-router">7.5. Managing Dispatch Router Using <code>qdmanage</code></h3>
<div class="paragraph">
<p>You can use <code>qdmanage</code> to view and modify the configuration of a running router at runtime. Specifically, <code>qdmanage</code> enables you to create, read, update, and delete the sections and attributes in the router&#8217;s configuration file without having to restart the router.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The <code>qdmanage</code> tool implements the AMQP management specification, which means that you can use it with any standard AMQP-managed endpoint, not just with Dispatch Router.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sect3">
<h4 id="syntax_for_using_code_qdmanage_code">7.5.1. Syntax for Using <code>qdmanage</code></h4>
<div class="paragraph">
<p>You can use <code>qdmanage</code> with the following syntax:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdmanage [<em>CONNECTION_OPTIONS</em>] <em>OPERATION</em> [<em>OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>This specifies:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>One or more optional <code>connection_options</code> to specify the router on which to perform the operation, or to supply security credentials if the router only accepts secure connections.</p>
<div class="paragraph">
<p>If you do not specify any connection options, <code>qdmanage</code> connects to the router listening on localhost and the default AMQP port (5672).</p>
</div>
</li>
<li>
<p>The <code>operation</code> to perform on the router.</p>
</li>
<li>
<p>One or more optional <code>options</code> to specify a configuration entity on which to perform the operation or how to format the command output.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>When you enter a <code>qdmanage</code> command, it is executed as an AMQP management operation request, and then the response is returned as command output in JSON format.</p>
</div>
<div class="paragraph">
<p>For example, the following command executes a query operation on a router, and then returns the response in JSON format:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdmanage query --type listener
[
  {
    "stripAnnotations": "both",
    "addr": "127.0.0.1",
    "multiTenant": false,
    "requireSsl": false,
    "idleTimeoutSeconds": 16,
    "saslMechanisms": "ANONYMOUS",
    "maxFrameSize": 16384,
    "requireEncryption": false,
    "host": "0.0.0.0",
    "cost": 1,
    "role": "normal",
    "http": false,
    "maxSessions": 32768,
    "authenticatePeer": false,
    "type": "org.apache.qpid.dispatch.listener",
    "port": "amqp",
    "identity": "listener/0.0.0.0:amqp",
    "name": "listener/0.0.0.0:amqp"
  }
]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about <code>qdmanage</code>, see the <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdmanage.html" target="_blank" rel="noopener">qdmanage man page</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="closing_a_connection_2">7.5.2. Closing a connection</h4>
<div class="paragraph">
<p>If a consumer is processing messages too slowly, or has stopped processing messages without settling its deliveries, you can close the connection. When you close the connection, the "stuck" deliveries are released.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Find the ID of the connection with the slow consumer.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This command lists the connections for a router in the router network:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -c -r Router.A
Connections
id    host                        container                              role             dir  security     authentication  tenant
==================================================================================================================================
  2   127.0.0.1:5672                                                     route-container  out  no-security  anonymous-user
  10  127.0.0.1:5001               Router.B                              inter-router     out  no-security  anonymous-user
  12  localhost.localdomain:42972  161211fe-ba9e-4726-9996-52d6962d1276  normal           in   no-security  anonymous-user
  14  localhost.localdomain:42980  a35fcc78-63d9-4bed-b57c-053969c38fda  normal           in   no-security  anonymous-user
  15  localhost.localdomain:42982  0a03aa5b-7c45-4500-8b38-db81d01ce651  normal           in   no-security  anonymous-user</pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Close the connection by setting its <code>adminStatus</code> to <code>deleted</code>.</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdmanage update --type=connection --id=12 adminStatus=deleted</pre>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="managing_network_connections">7.5.3. Managing Network Connections</h4>
<div class="paragraph">
<p>You can use <code>qdmanage</code> to view, create, update, and delete listeners and connectors for any router in your router network.</p>
</div>
<div class="sect4">
<h5 id="managing_listeners">Managing Listeners</h5>
<div class="paragraph">
<p>Listeners define how clients can connect to a router. The following table lists the <code>qdmanage</code> commands you can use to perform common operations on listeners.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_listener">listener</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the router’s listeners</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=listener</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the roles and ports on which the router is listening</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query role port --type=listener</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the attributes configured for a listener</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage read --name=<em>LISTENER_NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Create a listener</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --type=listener --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Create multiple listeners</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --stdin</pre>
</div>
</div>
</li>
<li>
<p>Configure the listeners using a JSON map:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type"="listener", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}, {"type"="listener", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}...]</pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>These commands use a JSON map to create two listeners.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update a listener</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=listener --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update multiple listeners</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --stdin</pre>
</div>
</div>
</li>
<li>
<p>Configure the listeners using a JSON map:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type"="listener", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}, {"type"="listener", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}...]</pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>These commands use a JSON map to update two listeners.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete an attribute from a listener</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=listener --<em>ATTRIBUTE</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete a listener</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage delete --name=<em>LISTENER_NAME</em></pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sect4">
<h5 id="managing-connectors">Managing Connectors</h5>
<div class="paragraph">
<p>Connectors define how the router can connect to other endpoints in your messaging network, such as brokers and other routers. The following table lists the <code>qdmanage</code> commands you can use to perform common operations on connectors.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_connector">connector</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the router’s connectors</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=connector</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the roles and ports on which the router can connect to other endpoints</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query role port --type=connector</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">If the router is connected to a broker, view the alternate URLs on which the router can connect to the broker if the primary connection fails</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query failoverUrls --type=connector --name=CONNECTOR_NAME</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the attributes configured for a connector</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage read --name=<em>CONNECTOR_NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Create a connector</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --type=connector --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Create multiple connectors</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --stdin</pre>
</div>
</div>
</li>
<li>
<p>Configure the connectors using a JSON map:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type"="connector", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}, {"type"="connector", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}...]</pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>These commands use a JSON map to create two connectors.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update a connector</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=connector --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update multiple connectors</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --stdin</pre>
</div>
</div>
</li>
<li>
<p>Configure the connectors using a JSON map:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type"="connector", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}, {"type"="connector", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}...]</pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>These commands use a JSON map to update two connectors.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete an attribute from a connector</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=connector --<em>ATTRIBUTE</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete a connector</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage delete --name=<em>CONNECTOR_NAME</em></pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect3">
<h4 id="managing_security">7.5.4. Managing Security</h4>
<div class="paragraph">
<p>Dispatch Router supports both SSL/TLS and SASL security protocols for encrypting and authenticating incoming and outgoing connections for your routers. You can use <code>qdmanage</code> to view, create, update, and delete security policies for any router in your router network.</p>
</div>
<div class="sect4">
<h5 id="managing_ssl_tls_encryption_and_authentication">Managing SSL/TLS Encryption and Authentication</h5>
<div class="paragraph">
<p>Dispatch Router supports SSL/TLS for certificate-level encryption and mutual authentication. The following table lists the common <code>qdmanage</code> commands you can use to secure incoming and outgoing connections for a router in your router network.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_sslprofile">sslProfile</a> and <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_listener">listener</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the router’s SSL/TLS configuration</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=sslProfile</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Set up SSL/TLS for the router</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --type=sslProfile --name=<em>NAME</em> --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Add SSL/TLS encryption to an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --sslProfile=<em>NAME</em> --requireSsl=yes</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Change SSL/TLS encryption on an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Add SSL/TLS client authentication to an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --authenticatePeer=yes</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Remove SSL/TLS client authentication from an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --authenticatePeer=no</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Add SSL/TLS client authentication to an outgoing connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>CONNECTOR_NAME</em> --sslProfile=<em>NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Remove SSL/TLS client authentication from an outgoing connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>CONNECTOR_NAME</em> --sslProfile</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete an SSL profile</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage delete --name=<em>SSL_PROFILE_NAME</em></pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sect4">
<h5 id="managing_sasl_encryption_and_authentication">Managing SASL Encryption and Authentication</h5>
<div class="paragraph">
<p>Dispatch Router supports SASL for authentication and payload encryption. The following table lists the common <code>qdmanage</code> commands you can use to secure incoming and outgoing connections for a router in your router network.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_router">router</a> and <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_listener">listener</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Set up SASL for the router</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=router --saslConfigDir=<em>PATH</em> --saslConfigName=<em>NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Add SASL authentication to an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --authenticatePeer=yes --saslMechanisms=<em>MECHANISMS</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Change SASL mechanisms for an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --saslMechanisms=<em>MECHANISMS</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Add SASL authentication to an outgoing connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>CONNECTOR_NAME</em> --saslMechanisms=<em>MECHANISMS</em> --saslUsername=<em>USERNAME</em> --saslPassword=<em>PASSWORD</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Change SASL mechanisms for an outgoing connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>CONNECTOR_NAME</em> --saslMechanisms=<em>MECHANISMS</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Add SASL payload encryption to an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --requireEncryption=yes --saslMechanisms=<em>MECHANISMS</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Change SASL mechanisms for an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --saslMechanisms=<em>MECHANISMS</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Remove SASL payload encryption from an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --requireEncryption=no --saslMechanisms</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete a SASL configuration</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=router --saslConfigDir --saslConfigName</pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect3">
<h4 id="managing_routing">7.5.5. Managing Routing</h4>
<div class="paragraph">
<p>Dispatch Router supports both message routing and link routing for distributing messages between senders and receivers. You can use <code>qdmanage</code> to view how addresses and link routes are configured in your environment, and define how a router should distribute messages.</p>
</div>
<div class="sect4">
<h5 id="managing_message_routing">Managing Message Routing</h5>
<div class="paragraph">
<p>Message routing involves configuring addresses to define how Dispatch Router should distribute messages. The following table lists the common <code>qdmanage</code> commands you can use to configure addresses for a router in your router network.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_address">address</a> and <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_autolink">autolink</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View addresses</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=address</pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage read --name=<em>ADDRESS_NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View address distribution patterns</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query prefix distribution --type=address</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View waypoints to broker queues</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query prefix --type=address --waypoint=yes</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View autolinks</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=autolink</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Set a distribution pattern for an address</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --type=address --prefix=<em>ADDRESS_PREFIX</em> --distribution=<em>DISTRIBUTION_PATTERN</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Set distribution patterns for multiple addresses</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --stdin</pre>
</div>
</div>
</li>
<li>
<p>Configure the addresses using a JSON map:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type":"address", "prefix":"<em>ADDRESS_PREFIX</em>", "distribution":"<em>DISTRIBUTION_PATTERN</em>", "<em>ATTRIBUTE</em>":"<em>VALUE</em>", ...}, {"type":"address", "prefix":"<em>ADDRESS_PREFIX</em>", "distribution":"<em>DISTRIBUTION_PATTERN</em>", "<em>ATTRIBUTE</em>":"<em>VALUE</em>", ...} ...]</pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>These commands configure two addresses.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Connect an address to a broker queue</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --stdin</pre>
</div>
</div>
</li>
<li>
<p>Create an address waypoint, an incoming autolink, and an outgoing autolink:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type":"address", "prefix":"<em>ADDRESS_PREFIX</em>", "waypoint":"yes"}, {"type":"autolink", "addr":"<em>ADDRESS_NAME</em>", "connection":"<em>CONNECTOR/LISTENER_NAME</em>", "direction":"in"}, {"type":"autolink", "addr":"<em>ADDRESS_NAME</em>", "connection":"<em>CONNECTOR/LISTENER_NAME</em>", "direction":"out"}]</pre>
</div>
</div>
</li>
</ol>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update an address configuration</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>ADDRESS_NAME</em> --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update an autolink</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>AUTOLINK_NAME</em> --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete an address configuration</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage delete --name=<em>ADDRESS_NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete an autolink</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage delete --name=<em>AUTOLINK_NAME</em></pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sect4">
<h5 id="managing_link_routing">Managing Link Routing</h5>
<div class="paragraph">
<p>A link route is a chain of links between a sender and receiver that provides a private messaging path. The following table lists the common <code>qdmanage</code> commands you can use to view, create, update, and delete link routes.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see the <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_linkroute">linkRoute</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View link routes</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=linkRoute</pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage read --name=<em>LINK_ROUTE_NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Create a link route</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --stdin</pre>
</div>
</div>
</li>
<li>
<p>Create an incoming and outgoing link route:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type":"linkRoute", "prefix":"<em>ADDRESS_PREFIX</em>", "connection":"<em>CONNECTOR/LISTENER_NAME</em>", "direction":"in", ...}, {"type":"linkRoute", "prefix":"<em>ADDRESS_PREFIX</em>", "connection":"<em>CONNECTOR/LISTENER_NAME</em>", "direction":"out", ...}]</pre>
</div>
</div>
</li>
</ol>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update a link route</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LINK_ROUTE_NAME</em> --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete a link route</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage delete --name=<em>INCOMING_LINK_ROUTE_NAME</em>
qdmanage delete --name=<em>OUTGOING_LINK_ROUTE_NAME</em></pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect3">
<h4 id="managing_logging">7.5.6. Managing Logging</h4>
<div class="paragraph">
<p>Dispatch Router logs are broken into different categories called logging modules. Each module provides important information about a particular aspect of a router. The following table lists the common <code>qdmanage</code> commands you can use to view and change the configuration of a logging module.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdrouterd.conf.html#_log">log</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.10.0-SNAPSHOT/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the logging configuration</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=log</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the logging configuration for a logging module</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage read --type=log --name=log/<em>LOGGING_MODULE_NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Set the default logging configuration</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=log --name=log/DEFAULT enable=<em>LOGGING_LEVEL</em> includeTimestamp=yes <em>ATTRIBUTE</em>=<em>VALUE</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Enable logging for a logging module</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=log --name=log/<em>LOGGING_MODULE_NAME</em> enable=<em>LOGGING_LEVEL</em> <em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Change the logging configuration for a logging module</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=log --name=log/<em>LOGGING_MODULE_NAME</em> <em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="technical-details-specifications">8. Technical Details and Specifications</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="client-compatibility">8.1. Client Compatibility</h3>
<div class="paragraph">
<p>Dispatch Router should, in theory, work with any client that is
compatible with AMQP 1.0. The following clients have been tested:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 22%;">
<col style="width: 78%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><em>Client</em></th>
<th class="tableblock halign-left valign-top"><em>Notes</em></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">qpid::messaging</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The Qpid messaging clients work with Dispatch Router
as long as they are configured to use the 1.0 version of the protocol.
To enable AMQP 1.0 in the C++ client, use the \{protocol:amqp1.0}
connection option.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Proton Reactor</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The Proton Reactor API is compatible with Dispatch Router.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Proton Messenger</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Messenger works with Dispatch Router.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="amqp-mapping">8.2. AMQP Mapping</h3>
<div class="paragraph">
<p>Dispatch Router is an AMQP router and as such, it provides extensions,
code-points, and semantics for routing over AMQP. This page documents the
details of Dispatch Router&#8217;s use of AMQP.</p>
</div>
<div class="sect3">
<h4 id="message-annotations">8.2.1. Message Annotations</h4>
<div class="paragraph">
<p>The following Message Annotation fields are defined by Dispatch Router:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 23%;">
<col style="width: 19%;">
<col style="width: 58.0%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><em>Field</em></th>
<th class="tableblock halign-left valign-top"><em>Type</em></th>
<th class="tableblock halign-left valign-top"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">x-opt-qd.ingress</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The identity of the ingress router for a
message-routed message. The ingress router is the first router
encountered by a transiting message. The router will, if this field is
present, leave it unaltered. If the field is not present, the router
shall insert the field with its own identity.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">x-opt-qd.trace</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">list of string</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The list of routers through which this
message-routed message has transited. If this field is not present, the
router shall do nothing. If the field is present, the router shall
append its own identity to the end of the list.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">x-opt-qd.to</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">To-Override for message-routed messages. If this
field is present, the address in this field shall be used for routing in
lieu of the <em>to</em> field in the message properties. A router may append,
remove, or modify this annotation field depending on the policy in place
for routing the message.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">x-opt-qd.phase</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">integer</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The address-phase, if not zero, for messages
flowing between routers.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="sourcetarget-capabilities">8.2.2. Source/Target Capabilities</h4>
<div class="paragraph">
<p>The following Capability values are used in Sources and Targets.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 19%;">
<col style="width: 81%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><em>Capability</em></th>
<th class="tableblock halign-left valign-top"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">qd.router</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">This capability is added to sources and targets that are
used for inter-router message exchange. This capability denotes a link
used for router-control messages flowing between routers.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">qd.router-data</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">This capability is added to sources and targets that
are used for inter-router message exchange. This capability denotes a
link used for user messages being message-routed across an inter-router
connection.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="dynamic-node-properties">8.2.3. Dynamic-Node-Properties</h4>
<div class="paragraph">
<p>The following dynamic-node-properties are used by Dispatch Router in Sources.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 23%;">
<col style="width: 77%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><em>Property</em></th>
<th class="tableblock halign-left valign-top"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">x-opt-qd.address</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The node address describing the destination desired
for a dynamic source. If this is absent, the router will terminate any
dynamic receivers. If this address is present, the router will use the
address to route the dynamic link attach to the proper destination
container.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="addresses-and-address-formats">8.2.4. Addresses and Address Formats</h4>
<div class="paragraph">
<p>The following AMQP addresses and address patterns are used within
Dispatch Router.</p>
</div>
<div class="sect4">
<h5 id="address-patterns">Address Patterns</h5>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 38%;">
<col style="width: 62%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><em>Pattern</em></th>
<th class="tableblock halign-left valign-top"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_local/&lt;addr&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">An address that references a locally attached endpoint.
Messages using this address pattern shall not be routed over more than
one link.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_topo/0/&lt;router&gt;/&lt;addr&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">An address that references an endpoint attached to a specific router
node in the network topology. Messages with addresses that follow this
pattern shall be routed along the shortest path to the specified router.
Note that addresses of this form are a-priori routable in that the
address itself contains enough information to route the message to its
destination.</p>
<p class="tableblock">The <code>0</code> component immediately preceding the router-id is a placeholder
for an <em>area</em> which may be used in the future if area routing is
implemented.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;addr&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A mobile address. An address of this format represents an
endpoint or a set of distinct endpoints that are attached to the network
in arbitrary locations. It is the responsibility of the router network
to determine which router nodes are valid destinations for mobile
addresses.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect4">
<h5 id="supported-addresses">Supported Addresses</h5>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 36%;">
<col style="width: 64%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><em>Address</em></th>
<th class="tableblock halign-left valign-top"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>$management</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The management agent on the attached router/container.
This address would be used by an endpoint that is a management
client/console/tool wishing to access management data from the attached
container.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_topo/0/Router.E/$management</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The management agent at Router.E in area
0. This address would be used by a management client wishing to access
management data from a specific container that is reachable within the
network.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_local/qdhello</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The router entity in each of the connected routers.
This address is used to communicate with neighbor routers and is
exclusively for the <code>HELLO</code> discovery protocol.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_local/qdrouter</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The router entity in each of the connected routers.
This address is used by a router to communicate with other routers in
the network.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_topo/0/Router.E/qdrouter</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The router entity at the specifically
indicated router. This address form is used by a router to communicate
with a specific router that may or may not be a neighbor.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect3">
<h4 id="implementation-of-the-amqp-management-specification">8.2.5. Implementation of the AMQP Management Specification</h4>
<div class="paragraph">
<p>Dispatch Router is manageable remotely via AMQP. It is compliant with the
emerging AMQP Management specification (draft 9).</p>
</div>
<div class="paragraph">
<p>Differences from the specification:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>name</code> attribute is not required when an entity is created. If
not supplied it will be set to the same value as the system-generated
"identity" attribute. Otherwise it is treated as per the standard.</p>
</li>
<li>
<p>The <code>REGISTER</code> and <code>DEREGISTER</code> operations are not implemented. The router
automatically discovers peer routers via the router network and makes
their management addresses available via the standard <code>GET-MGMT-NODES</code>
operation.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><em>Revised on 2019-12-20 14:02:05 EST</em></p>
</div>
</div>
</div>
</div>
</div>