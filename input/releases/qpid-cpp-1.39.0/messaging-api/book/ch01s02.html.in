<div class="docbook"><div class="navheader"><table summary="Navigation header" width="100%"><tr><th align="center" colspan="3">1.2.&#160;A Simple Messaging Program in Python</th></tr><tr><td align="left" width="20%"><a accesskey="p" href="using-the-qpid-messaging-api.html">Prev</a>&#160;</td><th align="center" width="60%">Chapter&#160;1.&#160;Using the Qpid Messaging API</th><td align="right" width="20%">&#160;<a accesskey="n" href="ch01s03.html">Next</a></td></tr></table><hr /></div><div class="section"><div class="titlepage"><div><div><h2 class="title"><a id="idm140612073699520"></a>1.2.&#160;A Simple Messaging Program in Python</h2></div></div></div><p>The following Python program shows how to create a
      connection, create a session, send messages using a sender, and
      receive messages using a receiver.</p><div class="example"><a id="idm140612073698272"></a><p class="title"><strong>Example&#160;1.2.&#160;"Hello world!" in Python</strong></p><div class="example-contents"><pre class="programlisting" lang="python" xml:lang="python">
	import sys
	from qpid.messaging import *

	broker =  "localhost:5672" if len(sys.argv)&lt;2 else sys.argv[1]
	address = "amq.topic" if len(sys.argv)&lt;3 else sys.argv[2]

	connection = Connection(broker)

	try:
	connection.open()  <a class="co" href="ch01s02.html#callout-python-open" id="hello-python-open">(1)</a>
	session = connection.session()   <a class="co" href="ch01s02.html#callout-python-session" id="hello-python-session">(2)</a>

	sender = session.sender(address)  <a class="co" href="ch01s02.html#callout-python-sender" id="hello-python-sender">(3)</a>
	receiver = session.receiver(address)  <a class="co" href="ch01s02.html#callout-python-receiver" id="hello-python-receiver">(4)</a>

	sender.send(Message("Hello world!"));

	message = receiver.fetch(timeout=1)  <a class="co" href="ch01s02.html#callout-python-fetch" id="hello-python-fetch">(5)</a>
	print message.content
	session.acknowledge() <a class="co" href="ch01s02.html#callout-python-acknowledge" id="hello-python-acknowledge">(6)</a>

	except MessagingError,m:
	print m
	finally:
	connection.close()  <a class="co" href="ch01s02.html#callout-python-close" id="hello-python-close">(7)</a>
	</pre><div class="calloutlist"><table border="0" summary="Callout list"><tr><td align="left" valign="top" width="5%"><p><a id="callout-python-open"></a><a href="#hello-python-open">(1)</a> </p></td><td align="left" valign="top"><p>Establishes the connection with the messaging broker.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a id="callout-python-session"></a><a href="#hello-python-session">(2)</a> </p></td><td align="left" valign="top"><p>Creates a session object on which messages will be sent and received.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a id="callout-python-receiver"></a><a href="#hello-python-receiver">(4)</a> </p></td><td align="left" valign="top"><p>Creates a receiver that receives messages from the given address.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a id="callout-python-sender"></a><a href="#hello-python-sender">(3)</a> </p></td><td align="left" valign="top"><p>Creates a sender that sends to the given address.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a id="callout-python-fetch"></a><a href="#hello-python-fetch">(5)</a> </p></td><td align="left" valign="top"><p>Receives the next message. The duration is optional, if omitted, will wait indefinitely for the next message.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a id="callout-python-acknowledge"></a><a href="#hello-python-acknowledge">(6)</a> </p></td><td align="left" valign="top"><p>Acknowledges receipt of all fetched messages on
	    the session. This informs the broker that the messages were
	    transfered and processed by the client successfully.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a id="callout-python-close"></a><a href="#hello-python-close">(7)</a> </p></td><td align="left" valign="top"><p>Closes the connection, all sessions managed by the connection, and all senders and receivers managed by each session.</p></td></tr></table></div></div></div><br class="example-break" /></div><div class="navfooter"><hr /><table summary="Navigation footer" width="100%"><tr><td align="left" width="40%"><a accesskey="p" href="using-the-qpid-messaging-api.html">Prev</a>&#160;</td><td align="center" width="20%"><a accesskey="u" href="using-the-qpid-messaging-api.html">Up</a></td><td align="right" width="40%">&#160;<a accesskey="n" href="ch01s03.html">Next</a></td></tr><tr><td align="left" valign="top" width="40%">Chapter&#160;1.&#160;Using the Qpid Messaging API&#160;</td><td align="center" width="20%"><a accesskey="h" href="index.html">Home</a></td><td align="right" valign="top" width="40%">&#160;1.3.&#160;A Simple Messaging Program in .NET C#</td></tr></table></div></div>