<div class="docbook"><div class="navheader"><table summary="Navigation header" width="100%"><tr><th align="center" colspan="3">1.8.&#160;Receiving Messages from Multiple Sources</th></tr><tr><td align="left" width="20%"><a accesskey="p" href="acknowledgements.html">Prev</a>&#160;</td><th align="center" width="60%">Chapter&#160;1.&#160;Using the Qpid Messaging API</th><td align="right" width="20%">&#160;<a accesskey="n" href="ch01s09.html">Next</a></td></tr></table><hr /></div><div class="section"><div class="titlepage"><div><div><h2 class="title"><a id="idm140612067926880"></a>1.8.&#160;Receiving Messages from Multiple Sources</h2></div></div></div><p>A receiver can only read from one source, but many
      programs need to be able to read messages from many sources. In
      the Qpid Messaging API, a program can ask a session for
      the <span class="quote">&#8220;<span class="quote">next receiver</span>&#8221;</span>; that is, the receiver that is
      responsible for the next available message. The following
      examples show how this is done in C++, Python, and .NET C#.
      </p><p>Note that to use this pattern you must enable prefetching
      for each receiver of interest so that the broker will send
      messages before a fetch call is made. See
      <a class="xref" href="prefetch.html" title="1.6.&#160;Receiver Capacity (Prefetch)">Section&#160;1.6, &#8220;Receiver Capacity (Prefetch)&#8221;</a> for more on this.</p><div class="example"><a id="idm140612067924000"></a><p class="title"><strong>Example&#160;1.12.&#160;Receiving Messages from Multiple Sources</strong></p><div class="example-contents"><p>C++:</p><pre class="programlisting">
	Receiver receiver1 = session.createReceiver(address1);
	receiver1.setCapacity(10);
	Receiver receiver2 = session.createReceiver(address2);
	receiver2.setCapacity(10);

	Message message =  session.nextReceiver().fetch();
	std::cout &lt;&lt; message.getContent() &lt;&lt; std::endl;
	session.acknowledge(); // acknowledge message receipt
		  </pre><p>Python:</p><pre class="programlisting">
	receiver1 = session.receiver(address1)
	receiver1.capacity = 10
	receiver2 = session.receiver(address)
	receiver2.capacity = 10
	message = session.next_receiver().fetch()
	print message.content
	session.acknowledge()
		  </pre><p>.NET C#:</p><pre class="programlisting">
	Receiver receiver1 = session.CreateReceiver(address1);
	receiver1.Capacity = 10;
	Receiver receiver2 = session.CreateReceiver(address2);
	receiver2.Capacity = 10;

	Message message = new Message();
	message =  session.NextReceiver().Fetch();
	Console.WriteLine("{0}", message.GetContent());
	session.Acknowledge();
		  </pre></div></div><br class="example-break" /></div><div class="navfooter"><hr /><table summary="Navigation footer" width="100%"><tr><td align="left" width="40%"><a accesskey="p" href="acknowledgements.html">Prev</a>&#160;</td><td align="center" width="20%"><a accesskey="u" href="using-the-qpid-messaging-api.html">Up</a></td><td align="right" width="40%">&#160;<a accesskey="n" href="ch01s09.html">Next</a></td></tr><tr><td align="left" valign="top" width="40%">1.7.&#160;Acknowledging Received Messages&#160;</td><td align="center" width="20%"><a accesskey="h" href="index.html">Home</a></td><td align="right" valign="top" width="40%">&#160;1.9.&#160;Transactions</td></tr></table></div></div>