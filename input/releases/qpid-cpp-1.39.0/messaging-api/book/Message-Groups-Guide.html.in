<div class="docbook"><div class="navheader"><table summary="Navigation header" width="100%"><tr><th align="center" colspan="3">1.17.&#160;Using Message Groups</th></tr><tr><td align="left" width="20%"><a accesskey="p" href="section-amqp0-10-mapping.html">Prev</a>&#160;</td><th align="center" width="60%">Chapter&#160;1.&#160;Using the Qpid Messaging API</th><td align="right" width="20%">&#160;<a accesskey="n" href="ch02.html">Next</a></td></tr></table><hr /></div><div class="section"><div class="titlepage"><div><div><h2 class="title"><a id="Message-Groups-Guide"></a>1.17.&#160;Using Message Groups</h2></div></div></div><p>
    This section describes how messaging applications can use the Message Group feature
    provided by the Broker.
  </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3>
    The content of this section assumes the reader is familiar with the Message Group
    feature as described in the AMQP Messaging Broker user's guide.  Please read the
    message grouping section in the Broker user's guide before using the
    examples given in this section.
  </div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="messagegroups-setup"></a>1.17.1.&#160;Creating Message Group Queues</h3></div></div></div><p>
      The following examples show how to create a message group queue that enforces
      ordered group consumption across multiple consumers.
    </p><div class="example"><a id="idm140612067785264"></a><p class="title"><strong>Example&#160;1.22.&#160;Message Group Queue Creation - Python</strong></p><div class="example-contents"><pre class="programlisting" lang="python" xml:lang="python">
sender = connection.session().sender("msg-group-q;" +
                                     " {create:always, delete:receiver," +
                                     " node: {x-declare: {arguments:" +
                                     " {'qpid.group_header_key':'THE-GROUP'," +
                                     " 'qpid.shared_msg_group':1}}}}")
      </pre></div></div><br class="example-break" /><div class="example"><a id="idm140612067783456"></a><p class="title"><strong>Example&#160;1.23.&#160;Message Group Queue Creation - C++</strong></p><div class="example-contents"><pre class="programlisting" lang="c++" xml:lang="c++">
std::string addr("msg-group-q; "
                 " {create:always, delete:receiver,"
                 " node: {x-declare: {arguments:"
                 " {qpid.group_header_key:'THE-GROUP',"
                 " qpid.shared_msg_group:1}}}}");
Sender sender = session.createSender(addr);
      </pre></div></div><br class="example-break" /><div class="example"><a id="idm140612067782016"></a><p class="title"><strong>Example&#160;1.24.&#160;Message Group Queue Creation - Java</strong></p><div class="example-contents"><pre class="programlisting" lang="java" xml:lang="java">
Session s = c.createSession(false, Session.CLIENT_ACKNOWLEDGE);
String addr = "msg-group-q; {create:always, delete:receiver," +
                             " node: {x-declare: {arguments:" +
                             " {'qpid.group_header_key':'THE-GROUP'," +
                             " 'qpid.shared_msg_group':1}}}}";
Destination d = (Destination) new AMQAnyDestination(addr);
MessageProducer sender = s.createProducer(d);
      </pre></div></div><br class="example-break" /><p>
      The example code uses the x-declare map to specify the message group configuration
      that should be used for the queue.  See the AMQP Messaging Broker user's guide
      for a detailed description of these arguments.  Note that the
      qpid.group_header_key's value MUST be a string type if using the C++ broker.
    </p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="messagegroups-sending"></a>1.17.2.&#160;Sending Grouped Messages</h3></div></div></div><p>
      When sending grouped messages, the client must add a message property containing the
      group identifier to the outgoing message.  If using the C++ broker, the group identifier
      must be a string type.  The key used for the property must exactly match the value passed in the
      'qpid.group_header_key' configuration argument.
    </p><div class="example"><a id="idm140612073762496"></a><p class="title"><strong>Example&#160;1.25.&#160;Sending Grouped Messages - Python</strong></p><div class="example-contents"><pre class="programlisting" lang="python" xml:lang="python">
group = "A"
m = Message(content="some data", properties={"THE-GROUP": group})
sender.send(m)

group = "B"
m = Message(content="some other group's data", properties={"THE-GROUP": group})
sender.send(m)

group = "A"
m = Message(content="more data for group 'A'", properties={"THE-GROUP": group})
sender.send(m)
      </pre></div></div><br class="example-break" /><div class="example"><a id="idm140612073760720"></a><p class="title"><strong>Example&#160;1.26.&#160;Sending Grouped Messages - C++</strong></p><div class="example-contents"><pre class="programlisting" lang="C++" xml:lang="C++">

const std::string groupKey("THE-GROUP");
{
    Message msg("some data");
    msg.getProperties()[groupKey] = std::string("A");
    sender.send(msg);
}
{
    Message msg("some other group's data");
    msg.getProperties()[groupKey] = std::string("B");
    sender.send(msg);
}
{
    Message msg("more data for group 'A'");
    msg.getProperties()[groupKey] = std::string("A");
    sender.send(msg);
}
      </pre></div></div><br class="example-break" /><div class="example"><a id="idm140612073758864"></a><p class="title"><strong>Example&#160;1.27.&#160;Sending Grouped Messages - Java</strong></p><div class="example-contents"><pre class="programlisting" lang="java" xml:lang="java">
String groupKey = "THE-GROUP";

TextMessage tmsg1 = s.createTextMessage("some data");
tmsg1.setStringProperty(groupKey, "A");
sender.send(tmsg1);

TextMessage tmsg2 = s.createTextMessage("some other group's data");
tmsg2.setStringProperty(groupKey, "B");
sender.send(tmsg2);

TextMessage tmsg3 = s.createTextMessage("more data for group 'A'");
tmsg3.setStringProperty(groupKey, "A");
sender.send(tmsg3);
      </pre></div></div><br class="example-break" /><p>
      The examples above send two groups worth of messages to the queue created in the
      previous example.  Two messages belong to group "A", and one belongs to group
      "B". Note that it is not necessary to complete sending one group's messages before
      starting another.  Also note that there is no need to indicate to the broker when a
      new group is created or an existing group retired - the broker tracks group state
      automatically.
    </p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="messagegroups-receiving"></a>1.17.3.&#160;Receiving Grouped Messages</h3></div></div></div><p>
      Since the broker enforces group policy when delivering messages, no special actions
      are necessary for receiving grouped messages from the broker.  However, applications
      must adhere to the rules for message group consumption as described in the AMQP
      Messaging Broker user's guide.
    </p></div></div><div class="navfooter"><hr /><table summary="Navigation footer" width="100%"><tr><td align="left" width="40%"><a accesskey="p" href="section-amqp0-10-mapping.html">Prev</a>&#160;</td><td align="center" width="20%"><a accesskey="u" href="using-the-qpid-messaging-api.html">Up</a></td><td align="right" width="40%">&#160;<a accesskey="n" href="ch02.html">Next</a></td></tr><tr><td align="left" valign="top" width="40%">1.16.&#160;The AMQP 0-10 mapping&#160;</td><td align="center" width="20%"><a accesskey="h" href="index.html">Home</a></td><td align="right" valign="top" width="40%">&#160;Chapter&#160;2.&#160;The .NET Binding for the C++ Messaging Client</td></tr></table></div></div>