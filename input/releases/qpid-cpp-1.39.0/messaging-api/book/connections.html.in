<div class="docbook"><div class="navheader"><table summary="Navigation header" width="100%"><tr><th align="center" colspan="3">1.10.&#160;Connections</th></tr><tr><td align="left" width="20%"><a accesskey="p" href="ch01s09.html">Prev</a>&#160;</td><th align="center" width="60%">Chapter&#160;1.&#160;Using the Qpid Messaging API</th><td align="right" width="20%">&#160;<a accesskey="n" href="section-Maps.html">Next</a></td></tr></table><hr /></div><div class="section"><div class="titlepage"><div><div><h2 class="title"><a id="connections"></a>1.10.&#160;Connections</h2></div></div></div><p>
	Messaging connections are created by specifying a broker or a list of brokers, and 
	an optional set of connection options. The constructor prototypes for Connections
	are:
      </p><pre class="programlisting">
      Connection connection();
      Connection connection(const string url);
      Connection connection(const string url, const string&amp; options);
      Connection connection(const string url, const Variant::Map&amp; options);
      </pre><p>
	Messaging connection URLs specify only the network host address(es). Connection 
	options are specified separately as an options string or map. This is different
	from JMS Connection URLs that combine the network address and connection properties
	in a single string.
      </p><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="connection-url"></a>1.10.1.&#160;Connection URLs</h3></div></div></div><p>	
	  Connection URLs describe the broker or set of brokers to which the connection
	  is to attach. The format of the Connection URL is defined by AMQP 0.10
	  Domain:connection.amqp-host-url.
	</p><pre class="programlisting">
	amqp_url = "amqp:" prot_addr_list
	prot_addr_list = [prot_addr ","]* prot_addr
	prot_addr = tcp_prot_addr | tls_prot_addr
	
	tcp_prot_addr = tcp_id tcp_addr
	tcp_id = "tcp:" | ""
	tcp_addr = [host [":" port] ]
	host = &lt;as per http://www.ietf.org/rfc/rfc3986.txt&gt;
	port = number	</pre><p>
	  Examples of Messaging Connection URLs
	</p><pre class="programlisting">
	localhost
	localhost:5672
	localhost:9999
	192.168.1.2:5672
	mybroker.example.com:5672
	amqp:tcp:localhost:5672
	tcp:locahost:5672,localhost:5800
	</pre></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="connection-options"></a>1.10.2.&#160;Connection Options</h3></div></div></div><p>
          Aspects of the connections behaviour can be controlled through
          specifying connection options. For example, connections can be
          configured to automatically reconnect if the connection to a
          broker is lost.
	</p><div class="example"><a id="idm140612067903856"></a><p class="title"><strong>Example&#160;1.14.&#160;Specifying Connection Options in C++, Python, and .NET</strong></p><div class="example-contents"><p>In C++, these options can be set using <code class="function">Connection::setOption()</code> or by passing in a set of options to the constructor. The options can be passed in as a map or in string form:</p><p>or</p><pre class="programlisting">
	  Connection connection("localhost:5672");
	  connection.setOption("reconnect", true);
	  try {
	  connection.open();
	  !!! SNIP !!!
	  </pre><p>In Python, these options can be set as attributes of the connection or using named arguments in
	  the <code class="function">Connection</code> constructor:</p><pre class="programlisting">
	  connection = Connection("localhost:5672", reconnect=True)
	  try:
	  connection.open()
	  !!! SNIP !!!
	  </pre><p>or</p><pre class="programlisting">
	  connection = Connection("localhost:5672")
	  connection.reconnect = True
	  try:
	  connection.open()
	  !!! SNIP !!!
	  </pre><p>
	    In .NET, these options can be set using <code class="function">Connection.SetOption()</code> or by passing in a set of options to the constructor. The options can be passed in as a map or in string form:
	  </p><pre class="programlisting">
	    Connection connection= new Connection("localhost:5672", "{reconnect: true}");
	    try {
	    connection.Open();
	    !!! SNIP !!!
	  </pre><p>
	    or
	  </p><pre class="programlisting">
	    Connection connection = new Connection("localhost:5672");
	    connection.SetOption("reconnect", true);
	    try {
	    connection.Open();
	    !!! SNIP !!!
	  </pre><p>See the reference documentation for details in each language.</p></div></div><br class="example-break" /><p>The following table lists the supported connection options.</p><div class="table"><a id="idm140612067893440"></a><p class="title"><strong>Table&#160;1.4.&#160;Connection Options</strong></p><div class="table-contents"><table border="1" class="table" summary="Connection Options" width="100%"><colgroup><col /><col /><col /></colgroup><thead><tr><th>option name</th><th>value type</th><th>semantics</th></tr></thead><tbody><tr><td>
		  <code class="literal">username</code>
		</td><td>
		  string
		</td><td>
		  The username to use when authenticating to the broker.
		</td></tr><tr><td>
		  <code class="literal">password</code>
		</td><td>
		  string
		</td><td>
		  The password to use when authenticating to the broker.
		</td></tr><tr><td>
		  <code class="literal">sasl_mechanisms</code>
		</td><td>
		  string
		</td><td>
		  The specific SASL mechanisms to use with the python
		  client when authenticating to the broker. The value
		  is a space separated list.
		</td></tr><tr><td>
		  <code class="literal">reconnect</code>
		</td><td>
		  boolean
		</td><td>
		  Transparently reconnect if the connection is lost.
		</td></tr><tr><td>
		  <code class="literal">reconnect_timeout</code>
		</td><td>
		  integer
		</td><td>
		  Total number of seconds to continue reconnection attempts before giving up and raising an exception.
		</td></tr><tr><td>
		  <code class="literal">reconnect_limit</code>
		</td><td>
		  integer
		</td><td>
		  Maximum number of reconnection attempts before giving up and raising an exception.
		</td></tr><tr><td>
		  <code class="literal">reconnect_interval_min</code>
		</td><td>
		  integer representing time in seconds
		</td><td>
		  Minimum number of seconds between reconnection attempts. The first reconnection attempt is made immediately; if that fails, the first reconnection delay is set to the value of <code class="literal">reconnect_interval_min</code>; if that attempt fails, the reconnect interval increases exponentially until a reconnection attempt succeeds or <code class="literal">reconnect_interval_max</code> is reached.
		</td></tr><tr><td>
		  <code class="literal">reconnect_interval_max</code>
		</td><td>
		  integer representing time in seconds
		</td><td>
		  Maximum reconnect interval.
		</td></tr><tr><td>
		  <code class="literal">reconnect_interval</code>
		</td><td>
		  integer representing time in seconds
		</td><td>
		  Sets both <code class="literal">reconnection_interval_min</code> and <code class="literal">reconnection_interval_max</code> to the same value.
		</td></tr><tr><td>
		  <code class="literal">heartbeat</code>
		</td><td>
		  integer representing time in seconds
		</td><td>
		  Requests that heartbeats be sent every N seconds. If two
		  successive heartbeats are missed the connection is
		  considered to be lost.
		</td></tr><tr><td>
		  <code class="literal">transport</code>
		</td><td>
		  string
		</td><td>
		  Sets the underlying transport protocol used. The default option is 'tcp'. To enable ssl, set to 'ssl'. The C++ client additionally supports 'rdma'.
		</td></tr><tr><td>
		  <code class="literal">tcp-nodelay</code>
		</td><td>
		  boolean
		</td><td>
		  Set tcp no-delay, i.e. disable Nagle algorithm. [C++ only]
		</td></tr><tr><td>
		  <code class="literal">protocol</code>
		</td><td>
		  string
		</td><td>
		  Sets the application protocol used. The default option is 'amqp0-10'. To enable AMQP 1.0, set to 'amqp1.0'.
		</td></tr></tbody></table></div></div><br class="table-break" /></div></div><div class="navfooter"><hr /><table summary="Navigation footer" width="100%"><tr><td align="left" width="40%"><a accesskey="p" href="ch01s09.html">Prev</a>&#160;</td><td align="center" width="20%"><a accesskey="u" href="using-the-qpid-messaging-api.html">Up</a></td><td align="right" width="40%">&#160;<a accesskey="n" href="section-Maps.html">Next</a></td></tr><tr><td align="left" valign="top" width="40%">1.9.&#160;Transactions&#160;</td><td align="center" width="20%"><a accesskey="h" href="index.html">Home</a></td><td align="right" valign="top" width="40%">&#160;1.11.&#160;Maps and Lists in Message Content</td></tr></table></div></div>