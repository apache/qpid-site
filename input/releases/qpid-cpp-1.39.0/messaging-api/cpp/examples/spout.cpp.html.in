
<h1>spout.cpp</h1>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Address.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Connection.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Message.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Message_io.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Sender.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Session.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/types/Variant.h&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;sstream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;ctime&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&quot;OptionParser.h&quot;</span><span class="cp"></span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">qpid</span><span class="o">::</span><span class="n">messaging</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">qpid</span><span class="o">::</span><span class="n">types</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">string_vector</span><span class="p">;</span>

<span class="k">struct</span> <span class="nl">Options</span> <span class="p">:</span> <span class="n">OptionParser</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">url</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">address</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">timeout</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">durable</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">id</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">replyto</span><span class="p">;</span>
    <span class="n">string_vector</span> <span class="n">properties</span><span class="p">;</span>
    <span class="n">string_vector</span> <span class="n">entries</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">content</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">connectionOptions</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">print</span><span class="p">;</span>

    <span class="n">Options</span><span class="p">()</span>
        <span class="o">:</span> <span class="n">OptionParser</span><span class="p">(</span><span class="s">&quot;Usage: spout [OPTIONS] ADDRESS&quot;</span><span class="p">,</span> <span class="s">&quot;Send messages to the specified address&quot;</span><span class="p">),</span>
          <span class="n">url</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">),</span>
          <span class="n">timeout</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
          <span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>
          <span class="n">durable</span><span class="p">(</span><span class="nb">false</span><span class="p">),</span>
          <span class="n">print</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;broker,b&quot;</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="s">&quot;url of broker to connect to&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;timeout,t&quot;</span><span class="p">,</span> <span class="n">timeout</span><span class="p">,</span> <span class="s">&quot;exit after the specified time&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;durable,d&quot;</span><span class="p">,</span> <span class="n">durable</span><span class="p">,</span> <span class="s">&quot;make the message durable (def. transient)&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;count,c&quot;</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="s">&quot;stop after count messages have been sent, zero disables&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;id,i&quot;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="s">&quot;use the supplied id instead of generating one&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;reply-to&quot;</span><span class="p">,</span> <span class="n">replyto</span><span class="p">,</span> <span class="s">&quot;specify reply-to address&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;property,P&quot;</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="s">&quot;specify message property&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;map,M&quot;</span><span class="p">,</span> <span class="n">entries</span><span class="p">,</span> <span class="s">&quot;specify entry for map content&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;content&quot;</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="s">&quot;specify textual content&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;connection-options&quot;</span><span class="p">,</span> <span class="n">connectionOptions</span><span class="p">,</span> <span class="s">&quot;connection options string in the form {name1:value1, name2:value2}&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;print&quot;</span><span class="p">,</span> <span class="n">print</span><span class="p">,</span> <span class="s">&quot;print each message sent&quot;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">static</span> <span class="kt">bool</span> <span class="n">nameval</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">in</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">name</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">size_type</span> <span class="n">i</span> <span class="o">=</span> <span class="n">in</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;=&quot;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">npos</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">in</span><span class="p">;</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">in</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">in</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
                <span class="n">value</span> <span class="o">=</span> <span class="n">in</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
                <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">static</span> <span class="kt">void</span> <span class="n">setProperty</span><span class="p">(</span><span class="n">Message</span><span class="o">&amp;</span> <span class="n">message</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">property</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">value</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">nameval</span><span class="p">(</span><span class="n">property</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">message</span><span class="p">.</span><span class="n">getProperties</span><span class="p">()[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
            <span class="n">message</span><span class="p">.</span><span class="n">getProperties</span><span class="p">()[</span><span class="n">name</span><span class="p">].</span><span class="n">setEncoding</span><span class="p">(</span><span class="s">&quot;utf8&quot;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">message</span><span class="p">.</span><span class="n">getProperties</span><span class="p">()[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">Variant</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">setProperties</span><span class="p">(</span><span class="n">Message</span><span class="o">&amp;</span> <span class="n">message</span><span class="p">)</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">string_vector</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">properties</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">properties</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">setProperty</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="o">*</span><span class="n">i</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">setEntries</span><span class="p">(</span><span class="n">Variant</span><span class="o">::</span><span class="n">Map</span><span class="o">&amp;</span> <span class="n">content</span><span class="p">)</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">string_vector</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">entries</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">entries</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">;</span>
            <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">value</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">nameval</span><span class="p">(</span><span class="o">*</span><span class="n">i</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">))</span> <span class="p">{</span>
                <span class="n">content</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">content</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">Variant</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">bool</span> <span class="n">checkAddress</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">getArguments</span><span class="p">().</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">error</span><span class="p">(</span><span class="s">&quot;Address is required&quot;</span><span class="p">);</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">address</span> <span class="o">=</span> <span class="n">getArguments</span><span class="p">()[</span><span class="mi">0</span><span class="p">];</span>
            <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">bool</span> <span class="n">isDurable</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
      <span class="k">return</span> <span class="n">durable</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Options</span> <span class="n">options</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">options</span><span class="p">.</span><span class="n">checkAddress</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">Connection</span> <span class="n">connection</span><span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">url</span><span class="p">,</span> <span class="n">options</span><span class="p">.</span><span class="n">connectionOptions</span><span class="p">);</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="n">connection</span><span class="p">.</span><span class="n">open</span><span class="p">();</span>
            <span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">connection</span><span class="p">.</span><span class="n">createSession</span><span class="p">();</span>
            <span class="n">Sender</span> <span class="n">sender</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="n">createSender</span><span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">address</span><span class="p">);</span>

            <span class="n">Message</span> <span class="n">message</span><span class="p">;</span>
            <span class="n">message</span><span class="p">.</span><span class="n">setDurable</span><span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">isDurable</span><span class="p">());</span>
            <span class="n">options</span><span class="p">.</span><span class="n">setProperties</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
            <span class="n">Variant</span><span class="o">&amp;</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="n">getContentObject</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">entries</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
                <span class="n">Variant</span><span class="o">::</span><span class="n">Map</span> <span class="n">content</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">setEntries</span><span class="p">(</span><span class="n">content</span><span class="p">);</span>
                <span class="n">obj</span> <span class="o">=</span> <span class="n">content</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
                <span class="n">obj</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="n">content</span><span class="p">;</span>
                <span class="n">obj</span><span class="p">.</span><span class="n">setEncoding</span><span class="p">(</span><span class="s">&quot;utf8&quot;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">std</span><span class="o">::</span><span class="kt">time_t</span> <span class="n">start</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">time</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 
                <span class="p">(</span><span class="n">count</span> <span class="o">&lt;</span> <span class="n">options</span><span class="p">.</span><span class="n">count</span> <span class="o">||</span> <span class="n">options</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> 
                <span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">timeout</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">std</span><span class="o">::</span><span class="n">difftime</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">time</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">start</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">options</span><span class="p">.</span><span class="n">timeout</span><span class="p">);</span> 
                <span class="n">count</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">options</span><span class="p">.</span><span class="n">replyto</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="n">message</span><span class="p">.</span><span class="n">setReplyTo</span><span class="p">(</span><span class="n">Address</span><span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">replyto</span><span class="p">));</span>
                <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">id</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">?</span> <span class="n">Uuid</span><span class="p">(</span><span class="nb">true</span><span class="p">).</span><span class="n">str</span><span class="p">()</span> <span class="o">:</span> <span class="n">options</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>
                <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">spoutid</span><span class="p">;</span>
                <span class="n">spoutid</span> <span class="o">&lt;&lt;</span> <span class="n">id</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">count</span><span class="p">;</span>
                <span class="n">message</span><span class="p">.</span><span class="n">getProperties</span><span class="p">()[</span><span class="s">&quot;spout-id&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">spoutid</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">print</span><span class="p">)</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">message</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
                <span class="n">sender</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">session</span><span class="p">.</span><span class="n">sync</span><span class="p">();</span>
            <span class="n">connection</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">error</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
            <span class="n">connection</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="spout.cpp">Download this file</a></p>
