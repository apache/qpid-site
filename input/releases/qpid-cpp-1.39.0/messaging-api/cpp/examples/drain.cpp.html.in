
<h1>drain.cpp</h1>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Connection.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Message.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Message_io.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Receiver.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Session.h&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&quot;OptionParser.h&quot;</span><span class="cp"></span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">qpid</span><span class="o">::</span><span class="n">messaging</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">qpid</span><span class="o">::</span><span class="n">types</span><span class="p">;</span>

<span class="k">struct</span> <span class="nl">Options</span> <span class="p">:</span> <span class="n">OptionParser</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">url</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">address</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">connectionOptions</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">timeout</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">forever</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>

    <span class="n">Options</span><span class="p">()</span>
        <span class="o">:</span> <span class="n">OptionParser</span><span class="p">(</span><span class="s">&quot;Usage: drain [OPTIONS] ADDRESS&quot;</span><span class="p">,</span> <span class="s">&quot;Drains messages from the specified address&quot;</span><span class="p">),</span>
          <span class="n">url</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">),</span>
          <span class="n">timeout</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
          <span class="n">forever</span><span class="p">(</span><span class="nb">false</span><span class="p">),</span>
          <span class="n">count</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;broker,b&quot;</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="s">&quot;url of broker to connect to&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;timeout,t&quot;</span><span class="p">,</span> <span class="n">timeout</span><span class="p">,</span> <span class="s">&quot;timeout in seconds to wait before exiting&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;forever,f&quot;</span><span class="p">,</span> <span class="n">forever</span><span class="p">,</span> <span class="s">&quot;ignore timeout and wait forever&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;connection-options&quot;</span><span class="p">,</span> <span class="n">connectionOptions</span><span class="p">,</span> <span class="s">&quot;connection options string in the form {name1:value1, name2:value2}&quot;</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="s">&quot;count,c&quot;</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="s">&quot;number of messages to read before exiting&quot;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">Duration</span> <span class="n">getTimeout</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">forever</span><span class="p">)</span> <span class="k">return</span> <span class="n">Duration</span><span class="o">::</span><span class="n">FOREVER</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">return</span> <span class="n">timeout</span><span class="o">*</span><span class="n">Duration</span><span class="o">::</span><span class="n">SECOND</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">getCount</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">bool</span> <span class="n">checkAddress</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">getArguments</span><span class="p">().</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">error</span><span class="p">(</span><span class="s">&quot;Address is required&quot;</span><span class="p">);</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">address</span> <span class="o">=</span> <span class="n">getArguments</span><span class="p">()[</span><span class="mi">0</span><span class="p">];</span>
            <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Options</span> <span class="n">options</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">options</span><span class="p">.</span><span class="n">checkAddress</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">Connection</span> <span class="n">connection</span><span class="p">;</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="n">connection</span> <span class="o">=</span> <span class="n">Connection</span><span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">url</span><span class="p">,</span> <span class="n">options</span><span class="p">.</span><span class="n">connectionOptions</span><span class="p">);</span>
            <span class="n">connection</span><span class="p">.</span><span class="n">open</span><span class="p">();</span>
            <span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">connection</span><span class="p">.</span><span class="n">createSession</span><span class="p">();</span>
            <span class="n">Receiver</span> <span class="n">receiver</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="n">createReceiver</span><span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">address</span><span class="p">);</span>
            <span class="n">Duration</span> <span class="n">timeout</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="n">getTimeout</span><span class="p">();</span>
            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="n">getCount</span><span class="p">();</span>
            <span class="n">Message</span> <span class="n">message</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

            <span class="k">while</span> <span class="p">(</span><span class="n">receiver</span><span class="p">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">timeout</span><span class="p">))</span> <span class="p">{</span>
                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">message</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
                <span class="n">session</span><span class="p">.</span><span class="n">acknowledge</span><span class="p">();</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">++</span><span class="n">i</span> <span class="o">==</span> <span class="n">count</span><span class="p">))</span>
                    <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">receiver</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
            <span class="n">session</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
            <span class="n">connection</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Error: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">error</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
            <span class="n">connection</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="drain.cpp">Download this file</a></p>
