
<h1>server.cpp</h1>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Address.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Connection.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Message.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Receiver.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Sender.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;qpid/messaging/Session.h&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;memory&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;sstream&gt;</span><span class="cp"></span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">qpid</span><span class="o">::</span><span class="n">messaging</span><span class="p">;</span>

<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span><span class="p">;</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">url</span> <span class="o">=</span> <span class="n">argc</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">?</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">:</span> <span class="s">&quot;amqp:tcp:127.0.0.1:5672&quot;</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">connectionOptions</span> <span class="o">=</span> <span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="o">?</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">:</span> <span class="s">&quot;&quot;</span><span class="p">;</span>

    <span class="n">Connection</span> <span class="n">connection</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">connectionOptions</span><span class="p">);</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="n">connection</span><span class="p">.</span><span class="n">open</span><span class="p">();</span>
        <span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">connection</span><span class="p">.</span><span class="n">createSession</span><span class="p">();</span>
        <span class="n">Receiver</span> <span class="n">receiver</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="n">createReceiver</span><span class="p">(</span><span class="s">&quot;service_queue; {create: always}&quot;</span><span class="p">);</span>

        <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">Message</span> <span class="n">request</span> <span class="o">=</span> <span class="n">receiver</span><span class="p">.</span><span class="n">fetch</span><span class="p">();</span>
            <span class="k">const</span> <span class="n">Address</span><span class="o">&amp;</span> <span class="n">address</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">getReplyTo</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">address</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">Sender</span> <span class="n">sender</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="n">createSender</span><span class="p">(</span><span class="n">address</span><span class="p">);</span>
                <span class="n">Message</span> <span class="n">response</span><span class="p">;</span>

                <span class="n">qpid</span><span class="o">::</span><span class="n">types</span><span class="o">::</span><span class="n">Variant</span> <span class="n">requestObj</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">getContentObject</span><span class="p">();</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">requestObj</span><span class="p">.</span><span class="n">getType</span><span class="p">()</span> <span class="o">==</span> <span class="n">qpid</span><span class="o">::</span><span class="n">types</span><span class="o">::</span><span class="n">VAR_STRING</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">// Received a string.</span>
                    <span class="c1">// Server returns request string in upper case with same encoding.</span>
                    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">requestObj</span><span class="p">;</span>
                    <span class="n">std</span><span class="o">::</span><span class="n">transform</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">toupper</span><span class="p">);</span>
                    <span class="n">qpid</span><span class="o">::</span><span class="n">types</span><span class="o">::</span><span class="n">Variant</span> <span class="n">responseObj</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
                    <span class="n">responseObj</span><span class="p">.</span><span class="n">setEncoding</span><span class="p">(</span> <span class="n">requestObj</span><span class="p">.</span><span class="n">getEncoding</span><span class="p">()</span> <span class="p">);</span>
                    <span class="n">response</span><span class="p">.</span><span class="n">setContentObject</span><span class="p">(</span> <span class="n">responseObj</span> <span class="p">);</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="c1">// Received something other than a string.</span>
                    <span class="c1">// Server echos received object as a utf8 string.</span>
                    <span class="n">qpid</span><span class="o">::</span><span class="n">types</span><span class="o">::</span><span class="n">Variant</span> <span class="n">responseObj</span><span class="p">(</span> <span class="n">requestObj</span><span class="p">.</span><span class="n">asString</span><span class="p">()</span> <span class="p">);</span>
                    <span class="n">responseObj</span><span class="p">.</span><span class="n">setEncoding</span><span class="p">(</span> <span class="s">&quot;utf8&quot;</span> <span class="p">);</span>
                    <span class="n">response</span><span class="p">.</span><span class="n">setContentObject</span><span class="p">(</span> <span class="n">requestObj</span> <span class="p">);</span>
                <span class="p">}</span>
                <span class="n">sender</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Processed request: &quot;</span>
                          <span class="o">&lt;&lt;</span> <span class="n">request</span><span class="p">.</span><span class="n">getContentObject</span><span class="p">()</span>
                          <span class="o">&lt;&lt;</span> <span class="s">&quot; -&gt; &quot;</span>
                          <span class="o">&lt;&lt;</span> <span class="n">response</span><span class="p">.</span><span class="n">getContentObject</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
                <span class="n">session</span><span class="p">.</span><span class="n">acknowledge</span><span class="p">();</span>
                <span class="n">sender</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Error: no reply address specified for request: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">request</span><span class="p">.</span><span class="n">getContent</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
                <span class="n">session</span><span class="p">.</span><span class="n">reject</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">connection</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">error</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="n">connection</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="server.cpp">Download this file</a></p>
