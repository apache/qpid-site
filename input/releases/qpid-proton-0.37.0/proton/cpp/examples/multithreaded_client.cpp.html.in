
<h1>multithreaded_client.cpp</h1>
<div class="highlight"><pre><span></span><span class="c1">//</span>
<span class="c1">// C++11 or greater</span>
<span class="c1">//</span>
<span class="c1">// A multi-threaded client that calls proton::container::run() in one thread, sends</span>
<span class="c1">// messages in another and receives messages in a third.</span>
<span class="c1">//</span>
<span class="c1">// Note this client does not deal with flow-control. If the sender is faster</span>
<span class="c1">// than the receiver, messages will build up in memory on the sending side.</span>
<span class="c1">// See @ref multithreaded_client_flow_control.cpp for a more complex example with</span>
<span class="c1">// flow control.</span>
<span class="c1">//</span>
<span class="c1">// NOTE: no proper error handling</span>

<span class="cp">#include</span> <span class="cpf">&lt;proton/connection.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/connection_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/container.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/message.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/messaging_handler.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/receiver.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/sender.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/work_queue.hpp&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;condition_variable&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;mutex&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;sstream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp"></span>

<span class="c1">// Lock output from threads to avoid scrambling</span>
<span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">out_lock</span><span class="p">;</span>
<span class="cp">#define OUT(x) do { std::lock_guard&lt;std::mutex&gt; l(out_lock); x; } while (false)</span>

<span class="c1">// Handler for a single thread-safe sending and receiving connection.</span>
<span class="k">class</span> <span class="nc">client</span> <span class="o">:</span> <span class="k">public</span> <span class="n">proton</span><span class="o">::</span><span class="n">messaging_handler</span> <span class="p">{</span>
    <span class="c1">// Invariant</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">url_</span><span class="p">;</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">address_</span><span class="p">;</span>

    <span class="c1">// Only used in proton handler thread</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="n">sender_</span><span class="p">;</span>

    <span class="c1">// Shared by proton and user threads, protected by lock_</span>
    <span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">lock_</span><span class="p">;</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">work_queue</span> <span class="o">*</span><span class="n">work_queue_</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">condition_variable</span> <span class="n">sender_ready_</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">proton</span><span class="o">::</span><span class="n">message</span><span class="o">&gt;</span> <span class="n">messages_</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">condition_variable</span> <span class="n">messages_ready_</span><span class="p">;</span>

  <span class="k">public</span><span class="o">:</span>
    <span class="n">client</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">url</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">address</span><span class="p">)</span> <span class="o">:</span> <span class="n">url_</span><span class="p">(</span><span class="n">url</span><span class="p">),</span> <span class="n">address_</span><span class="p">(</span><span class="n">address</span><span class="p">),</span> <span class="n">work_queue_</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>

    <span class="c1">// Thread safe</span>
    <span class="kt">void</span> <span class="n">send</span><span class="p">(</span><span class="k">const</span> <span class="n">proton</span><span class="o">::</span><span class="n">message</span><span class="o">&amp;</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Use [=] to copy the message, we cannot pass it by reference since it</span>
        <span class="c1">// will be used in another thread.</span>
        <span class="n">work_queue</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">add</span><span class="p">([</span><span class="o">=</span><span class="p">]()</span> <span class="p">{</span> <span class="n">sender_</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span> <span class="p">});</span>
    <span class="p">}</span>

    <span class="c1">// Thread safe</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">message</span> <span class="n">receive</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">l</span><span class="p">(</span><span class="n">lock_</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">messages_</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="n">messages_ready_</span><span class="p">.</span><span class="n">wait</span><span class="p">(</span><span class="n">l</span><span class="p">);</span>
        <span class="k">auto</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">messages_</span><span class="p">.</span><span class="n">front</span><span class="p">());</span>
        <span class="n">messages_</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">msg</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Thread safe</span>
    <span class="kt">void</span> <span class="n">close</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">work_queue</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">add</span><span class="p">([</span><span class="o">=</span><span class="p">]()</span> <span class="p">{</span> <span class="n">sender_</span><span class="p">.</span><span class="n">connection</span><span class="p">().</span><span class="n">close</span><span class="p">();</span> <span class="p">});</span>
    <span class="p">}</span>

  <span class="k">private</span><span class="o">:</span>

    <span class="n">proton</span><span class="o">::</span><span class="n">work_queue</span><span class="o">*</span> <span class="n">work_queue</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Wait till work_queue_ and sender_ are initialized.</span>
        <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">l</span><span class="p">(</span><span class="n">lock_</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">work_queue_</span><span class="p">)</span> <span class="n">sender_ready_</span><span class="p">.</span><span class="n">wait</span><span class="p">(</span><span class="n">l</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">work_queue_</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// == messaging_handler overrides, only called in proton handler thread</span>

    <span class="c1">// Note: this example creates a connection when the container starts.</span>
    <span class="c1">// To create connections after the container has started, use</span>
    <span class="c1">// container::connect().</span>
    <span class="c1">// See @ref multithreaded_client_flow_control.cpp for an example.</span>
    <span class="kt">void</span> <span class="n">on_container_start</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">container</span><span class="o">&amp;</span> <span class="n">cont</span><span class="p">)</span> <span class="k">override</span> <span class="p">{</span>
        <span class="n">cont</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="n">url_</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_connection_open</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">connection</span><span class="o">&amp;</span> <span class="n">conn</span><span class="p">)</span> <span class="k">override</span> <span class="p">{</span>
        <span class="n">conn</span><span class="p">.</span><span class="n">open_sender</span><span class="p">(</span><span class="n">address_</span><span class="p">);</span>
        <span class="n">conn</span><span class="p">.</span><span class="n">open_receiver</span><span class="p">(</span><span class="n">address_</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_sender_open</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span> <span class="k">override</span> <span class="p">{</span>
        <span class="c1">// sender_ and work_queue_ must be set atomically</span>
        <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">l</span><span class="p">(</span><span class="n">lock_</span><span class="p">);</span>
        <span class="n">sender_</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
        <span class="n">work_queue_</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">.</span><span class="n">work_queue</span><span class="p">();</span>
        <span class="n">sender_ready_</span><span class="p">.</span><span class="n">notify_all</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_message</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">delivery</span><span class="o">&amp;</span> <span class="n">dlv</span><span class="p">,</span> <span class="n">proton</span><span class="o">::</span><span class="n">message</span><span class="o">&amp;</span> <span class="n">msg</span><span class="p">)</span> <span class="k">override</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">l</span><span class="p">(</span><span class="n">lock_</span><span class="p">);</span>
        <span class="n">messages_</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
        <span class="n">messages_ready_</span><span class="p">.</span><span class="n">notify_all</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_error</span><span class="p">(</span><span class="k">const</span> <span class="n">proton</span><span class="o">::</span><span class="n">error_condition</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="k">override</span> <span class="p">{</span>
        <span class="n">OUT</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;unexpected error: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">e</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span> <span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span>
                <span class="s">&quot;Usage: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; CONNECTION-URL AMQP-ADDRESS MESSAGE-COUNT</span><span class="se">\n</span><span class="s">&quot;</span>
                <span class="s">&quot;CONNECTION-URL: connection address, e.g.&#39;amqp://127.0.0.1&#39;</span><span class="se">\n</span><span class="s">&quot;</span>
                <span class="s">&quot;AMQP-ADDRESS: AMQP node address, e.g. &#39;examples&#39;</span><span class="se">\n</span><span class="s">&quot;</span>
                <span class="s">&quot;MESSAGE-COUNT: number of messages to send</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">address</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">n_messages</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>

        <span class="n">client</span> <span class="n">cl</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">address</span><span class="p">);</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">container</span> <span class="n">container</span><span class="p">(</span><span class="n">cl</span><span class="p">);</span>
        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">container_thread</span><span class="p">([</span><span class="o">&amp;</span><span class="p">]()</span> <span class="p">{</span> <span class="n">container</span><span class="p">.</span><span class="n">run</span><span class="p">();</span> <span class="p">});</span>

        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">sender</span><span class="p">([</span><span class="o">&amp;</span><span class="p">]()</span> <span class="p">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n_messages</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">proton</span><span class="o">::</span><span class="n">message</span> <span class="n">msg</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
                    <span class="n">cl</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
                    <span class="n">OUT</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;sent </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">msg</span><span class="p">.</span><span class="n">body</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">});</span>

        <span class="kt">int</span> <span class="n">received</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">receiver</span><span class="p">([</span><span class="o">&amp;</span><span class="p">]()</span> <span class="p">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n_messages</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">auto</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">cl</span><span class="p">.</span><span class="n">receive</span><span class="p">();</span>
                    <span class="n">OUT</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;received </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">msg</span><span class="p">.</span><span class="n">body</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;&quot;&#39;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">);</span>
                    <span class="o">++</span><span class="n">received</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">});</span>

        <span class="n">sender</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
        <span class="n">receiver</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
        <span class="n">cl</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
        <span class="n">container_thread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">received</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; messages sent and received&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="multithreaded_client.cpp">Download this file</a></p>
