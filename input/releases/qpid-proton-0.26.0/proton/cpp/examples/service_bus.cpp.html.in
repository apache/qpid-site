
<h1>service_bus.cpp</h1>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&quot;options.hpp&quot;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;proton/connection.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/connection_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/container.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/delivery.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/message.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/messaging_handler.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/receiver_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/sender.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/sender_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/source_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/tracker.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/work_queue.hpp&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;sstream&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&quot;fake_cpp11.hpp&quot;</span><span class="cp"></span>

<span class="k">using</span> <span class="n">proton</span><span class="o">::</span><span class="n">source_options</span><span class="p">;</span>
<span class="k">using</span> <span class="n">proton</span><span class="o">::</span><span class="n">connection_options</span><span class="p">;</span>
<span class="k">using</span> <span class="n">proton</span><span class="o">::</span><span class="n">sender_options</span><span class="p">;</span>
<span class="k">using</span> <span class="n">proton</span><span class="o">::</span><span class="n">receiver_options</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">do_next_sequence</span><span class="p">();</span>

<span class="k">namespace</span> <span class="p">{</span>
<span class="kt">void</span> <span class="n">check_arg</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">value</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
        <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">&quot;missing argument for </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// Connect to Service Bus queue and retrieve messages in a particular session.</span>
<span class="k">class</span> <span class="nc">session_receiver</span> <span class="o">:</span> <span class="k">public</span> <span class="n">proton</span><span class="o">::</span><span class="n">messaging_handler</span> <span class="p">{</span>
  <span class="k">private</span><span class="o">:</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">connection_url</span><span class="p">;</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">entity</span><span class="p">;</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">value</span> <span class="n">session_identifier</span><span class="p">;</span> <span class="c1">// AMQP null type by default, matches any Service Bus sequence identifier</span>
    <span class="kt">int</span> <span class="n">message_count</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">closed</span><span class="p">;</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">duration</span> <span class="n">read_timeout</span><span class="p">;</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">timestamp</span> <span class="n">last_read</span><span class="p">;</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">container</span> <span class="o">*</span><span class="n">container</span><span class="p">;</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">receiver</span> <span class="n">receiver</span><span class="p">;</span>

  <span class="k">public</span><span class="o">:</span>
    <span class="n">session_receiver</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">,</span>
                     <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">sid</span><span class="p">)</span> <span class="o">:</span> <span class="n">connection_url</span><span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="n">entity</span><span class="p">(</span><span class="n">e</span><span class="p">),</span> <span class="n">message_count</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">closed</span><span class="p">(</span><span class="nb">false</span><span class="p">),</span> <span class="n">read_timeout</span><span class="p">(</span><span class="mi">5000</span><span class="p">),</span> <span class="n">last_read</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">container</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">sid</span><span class="p">)</span>
            <span class="n">session_identifier</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">sid</span><span class="p">);</span>
        <span class="c1">// session_identifier is now either empty/null or an AMQP string type.</span>
        <span class="c1">// If null, Service Bus will pick the first available message and create</span>
        <span class="c1">// a filter at its end with that message&#39;s session identifier.</span>
        <span class="c1">// Technically, an AMQP string is not a valid filter-set value unless it</span>
        <span class="c1">// is annotated as an AMQP described type, so this may change.</span>

    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">run</span> <span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">container</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">message_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">closed</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="n">c</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="n">connection_url</span><span class="p">,</span> <span class="n">connection_options</span><span class="p">().</span><span class="n">handler</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">));</span>
        <span class="n">container</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_connection_open</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">connection</span> <span class="o">&amp;</span><span class="n">connection</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">source</span><span class="o">::</span><span class="n">filter_map</span> <span class="n">sb_filter_map</span><span class="p">;</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">symbol</span> <span class="n">key</span><span class="p">(</span><span class="s">&quot;com.microsoft:session-filter&quot;</span><span class="p">);</span>
        <span class="n">sb_filter_map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">session_identifier</span><span class="p">);</span>
        <span class="n">receiver</span> <span class="o">=</span> <span class="n">connection</span><span class="p">.</span><span class="n">open_receiver</span><span class="p">(</span><span class="n">entity</span><span class="p">,</span> <span class="n">receiver_options</span><span class="p">().</span><span class="n">source</span><span class="p">(</span><span class="n">source_options</span><span class="p">().</span><span class="n">filters</span><span class="p">(</span><span class="n">sb_filter_map</span><span class="p">)));</span>

        <span class="c1">// Start timeout processing here.  If Service Bus has no pending</span>
        <span class="c1">// messages, it may defer completing the receiver open until a message</span>
        <span class="c1">// becomes available (e.g. to be able to set the actual session</span>
        <span class="c1">// identifier if none was specified).</span>
        <span class="n">last_read</span> <span class="o">=</span> <span class="n">proton</span><span class="o">::</span><span class="n">timestamp</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
        <span class="c1">// Call this-&gt;process_timeout after read_timeout.</span>
        <span class="n">container</span><span class="o">-&gt;</span><span class="n">schedule</span><span class="p">(</span><span class="n">read_timeout</span><span class="p">,</span> <span class="p">[</span><span class="k">this</span><span class="p">]()</span> <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">process_timeout</span><span class="p">();</span> <span class="p">});</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_receiver_open</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">receiver</span> <span class="o">&amp;</span><span class="n">r</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">closed</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span> <span class="c1">// PROTON-1264</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">value</span> <span class="n">actual_session_id</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">source</span><span class="p">().</span><span class="n">filters</span><span class="p">().</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;com.microsoft:session-filter&quot;</span><span class="p">);</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;receiving messages with session identifier </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">actual_session_id</span>
                  <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> from queue &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">entity</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="n">last_read</span> <span class="o">=</span> <span class="n">proton</span><span class="o">::</span><span class="n">timestamp</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_message</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">delivery</span> <span class="o">&amp;</span><span class="p">,</span> <span class="n">proton</span><span class="o">::</span><span class="n">message</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">message_count</span><span class="o">++</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;   received message: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">m</span><span class="p">.</span><span class="n">body</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="n">last_read</span> <span class="o">=</span> <span class="n">proton</span><span class="o">::</span><span class="n">timestamp</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">process_timeout</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">timestamp</span> <span class="n">deadline</span> <span class="o">=</span> <span class="n">last_read</span> <span class="o">+</span> <span class="n">read_timeout</span><span class="p">;</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">timestamp</span> <span class="n">now</span> <span class="o">=</span> <span class="n">proton</span><span class="o">::</span><span class="n">timestamp</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">now</span> <span class="o">&gt;=</span> <span class="n">deadline</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">receiver</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
            <span class="n">closed</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="n">receiver</span><span class="p">.</span><span class="n">connection</span><span class="p">().</span><span class="n">close</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">message_count</span><span class="p">)</span>
                <span class="n">do_next_sequence</span><span class="p">();</span>
            <span class="k">else</span>
                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Done. No more messages.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">proton</span><span class="o">::</span><span class="n">duration</span> <span class="n">next</span> <span class="o">=</span> <span class="n">deadline</span> <span class="o">-</span> <span class="n">now</span><span class="p">;</span>
            <span class="n">container</span><span class="o">-&gt;</span><span class="n">schedule</span><span class="p">(</span><span class="n">next</span><span class="p">,</span> <span class="p">[</span><span class="k">this</span><span class="p">]()</span> <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">process_timeout</span><span class="p">();</span> <span class="p">});</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>


<span class="c1">/// Connect to Service Bus queue and send messages divided into different sessions.</span>
<span class="k">class</span> <span class="nc">session_sender</span> <span class="o">:</span> <span class="k">public</span> <span class="n">proton</span><span class="o">::</span><span class="n">messaging_handler</span> <span class="p">{</span>
  <span class="k">private</span><span class="o">:</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">connection_url</span><span class="p">;</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">entity</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">msg_count</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">total</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">accepts</span><span class="p">;</span>

  <span class="k">public</span><span class="o">:</span>
    <span class="n">session_sender</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="o">:</span> <span class="n">connection_url</span><span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="n">entity</span><span class="p">(</span><span class="n">e</span><span class="p">),</span>
                                                                 <span class="n">msg_count</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">total</span><span class="p">(</span><span class="mi">7</span><span class="p">),</span> <span class="n">accepts</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>

    <span class="kt">void</span> <span class="n">run</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">container</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">c</span><span class="p">.</span><span class="n">open_sender</span><span class="p">(</span><span class="n">connection_url</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">entity</span><span class="p">,</span> <span class="n">sender_options</span><span class="p">(),</span> <span class="n">connection_options</span><span class="p">().</span><span class="n">handler</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">send_remaining_messages</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">gid</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(;</span> <span class="n">msg_count</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">.</span><span class="n">credit</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">msg_count</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">switch</span> <span class="p">(</span><span class="n">msg_count</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="n">gid</span> <span class="o">=</span> <span class="s">&quot;red&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="n">gid</span> <span class="o">=</span> <span class="s">&quot;green&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="n">gid</span> <span class="o">=</span> <span class="s">&quot;blue&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="n">gid</span> <span class="o">=</span> <span class="s">&quot;red&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">4</span><span class="o">:</span> <span class="n">gid</span> <span class="o">=</span> <span class="s">&quot;black&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">5</span><span class="o">:</span> <span class="n">gid</span> <span class="o">=</span> <span class="s">&quot;blue&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">6</span><span class="o">:</span> <span class="n">gid</span> <span class="o">=</span> <span class="s">&quot;yellow&quot;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">std</span><span class="o">::</span><span class="n">ostringstream</span> <span class="n">mbody</span><span class="p">;</span>
            <span class="n">mbody</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;message &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">msg_count</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; in service bus session </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">gid</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span>
            <span class="n">proton</span><span class="o">::</span><span class="n">message</span> <span class="n">m</span><span class="p">(</span><span class="n">mbody</span><span class="p">.</span><span class="n">str</span><span class="p">());</span>
            <span class="n">m</span><span class="p">.</span><span class="n">group_id</span><span class="p">(</span><span class="n">gid</span><span class="p">);</span>  <span class="c1">// Service Bus uses the group_id property to as the session identifier.</span>
            <span class="n">s</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;   sent message: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">m</span><span class="p">.</span><span class="n">body</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_sendable</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">send_remaining_messages</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_tracker_accept</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">tracker</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">accepts</span><span class="o">++</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">accepts</span> <span class="o">==</span> <span class="n">total</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// upload complete</span>
            <span class="n">t</span><span class="p">.</span><span class="n">sender</span><span class="p">().</span><span class="n">close</span><span class="p">();</span>
            <span class="n">t</span><span class="p">.</span><span class="n">sender</span><span class="p">().</span><span class="n">connection</span><span class="p">().</span><span class="n">close</span><span class="p">();</span>
            <span class="n">do_next_sequence</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>


<span class="c1">/// Orchestrate the sequential actions of sending and receiving session-based messages.</span>
<span class="k">class</span> <span class="nc">sequence</span> <span class="o">:</span> <span class="k">public</span> <span class="n">proton</span><span class="o">::</span><span class="n">messaging_handler</span> <span class="p">{</span>
  <span class="k">private</span><span class="o">:</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">container</span> <span class="o">*</span><span class="n">container</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">sequence_no</span><span class="p">;</span>
    <span class="n">session_sender</span> <span class="n">snd</span><span class="p">;</span>
    <span class="n">session_receiver</span> <span class="n">rcv_red</span><span class="p">,</span> <span class="n">rcv_green</span><span class="p">,</span> <span class="n">rcv_null</span><span class="p">;</span>

  <span class="k">public</span><span class="o">:</span>
    <span class="k">static</span> <span class="n">sequence</span> <span class="o">*</span><span class="n">the_sequence</span><span class="p">;</span>

    <span class="n">sequence</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="o">:</span>
        <span class="n">container</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">sequence_no</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
        <span class="n">snd</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">e</span><span class="p">),</span> <span class="n">rcv_red</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="s">&quot;red&quot;</span><span class="p">),</span> <span class="n">rcv_green</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="s">&quot;green&quot;</span><span class="p">),</span> <span class="n">rcv_null</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">the_sequence</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_container_start</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">container</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">container</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">;</span>
        <span class="n">next_sequence</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">next_sequence</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">sequence_no</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// run these in order exactly once</span>
        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="n">snd</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="o">*</span><span class="n">container</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="n">rcv_green</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="o">*</span><span class="n">container</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="n">rcv_red</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="o">*</span><span class="n">container</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
        <span class="c1">// Run this until the receiver decides there is no messages left to sequence through</span>
        <span class="k">default</span><span class="o">:</span> <span class="n">rcv_null</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="o">*</span><span class="n">container</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="n">sequence</span> <span class="o">*</span><span class="n">sequence</span><span class="o">::</span><span class="n">the_sequence</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">do_next_sequence</span><span class="p">()</span> <span class="p">{</span> <span class="n">sequence</span><span class="o">::</span><span class="n">the_sequence</span><span class="o">-&gt;</span><span class="n">next_sequence</span><span class="p">();</span> <span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">sb_namespace</span><span class="p">;</span> <span class="c1">// i.e. &quot;foo.servicebus.windows.net&quot;</span>
    <span class="c1">// Make sure the next two are urlencoded for Proton</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">sb_key_name</span><span class="p">;</span>  <span class="c1">// shared access key name for entity (AKA &quot;Policy Name&quot;)</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">sb_key</span><span class="p">;</span>       <span class="c1">// shared access key</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">sb_entity</span><span class="p">;</span>    <span class="c1">// AKA the service bus queue.  Must enable</span>
                              <span class="c1">// sessions on it for this example.</span>

    <span class="n">example</span><span class="o">::</span><span class="n">options</span> <span class="n">opts</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
    <span class="n">opts</span><span class="p">.</span><span class="n">add_value</span><span class="p">(</span><span class="n">sb_namespace</span><span class="p">,</span> <span class="sc">&#39;n&#39;</span><span class="p">,</span> <span class="s">&quot;namespace&quot;</span><span class="p">,</span> <span class="s">&quot;Service Bus full namespace&quot;</span><span class="p">,</span> <span class="s">&quot;NAMESPACE&quot;</span><span class="p">);</span>
    <span class="n">opts</span><span class="p">.</span><span class="n">add_value</span><span class="p">(</span><span class="n">sb_key_name</span><span class="p">,</span> <span class="sc">&#39;p&#39;</span><span class="p">,</span> <span class="s">&quot;policy&quot;</span><span class="p">,</span> <span class="s">&quot;policy name that specifies access rights (key name)&quot;</span><span class="p">,</span> <span class="s">&quot;POLICY&quot;</span><span class="p">);</span>
    <span class="n">opts</span><span class="p">.</span><span class="n">add_value</span><span class="p">(</span><span class="n">sb_key</span><span class="p">,</span> <span class="sc">&#39;k&#39;</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="s">&quot;secret key for the policy&quot;</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">);</span>
    <span class="n">opts</span><span class="p">.</span><span class="n">add_value</span><span class="p">(</span><span class="n">sb_entity</span><span class="p">,</span> <span class="sc">&#39;e&#39;</span><span class="p">,</span> <span class="s">&quot;entity&quot;</span><span class="p">,</span> <span class="s">&quot;entity path (queue name)&quot;</span><span class="p">,</span> <span class="s">&quot;ENTITY&quot;</span><span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="n">opts</span><span class="p">.</span><span class="n">parse</span><span class="p">();</span>
        <span class="n">check_arg</span><span class="p">(</span><span class="n">sb_namespace</span><span class="p">,</span> <span class="s">&quot;namespace&quot;</span><span class="p">);</span>
        <span class="n">check_arg</span><span class="p">(</span><span class="n">sb_key_name</span><span class="p">,</span> <span class="s">&quot;policy&quot;</span><span class="p">);</span>
        <span class="n">check_arg</span><span class="p">(</span><span class="n">sb_key</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">);</span>
        <span class="n">check_arg</span><span class="p">(</span><span class="n">sb_entity</span><span class="p">,</span> <span class="s">&quot;entity&quot;</span><span class="p">);</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">connection_string</span><span class="p">(</span><span class="s">&quot;amqps://&quot;</span> <span class="o">+</span> <span class="n">sb_key_name</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">sb_key</span> <span class="o">+</span> <span class="s">&quot;@&quot;</span> <span class="o">+</span> <span class="n">sb_namespace</span><span class="p">);</span>

        <span class="n">sequence</span> <span class="n">seq</span><span class="p">(</span><span class="n">connection_string</span><span class="p">,</span> <span class="n">sb_entity</span><span class="p">);</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">container</span><span class="p">(</span><span class="n">seq</span><span class="p">).</span><span class="n">run</span><span class="p">();</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="service_bus.cpp">Download this file</a></p>
