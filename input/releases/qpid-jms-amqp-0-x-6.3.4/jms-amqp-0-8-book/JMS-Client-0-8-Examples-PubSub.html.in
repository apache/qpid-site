<div class="docbook"><div class="navheader"><table summary="Navigation header" width="100%"><tr><th align="center" colspan="3">4.2.&#160;Publish/subscribe example</th></tr><tr><td align="left" width="20%"><a accesskey="p" href="JMS-Client-0-8-Examples.html">Prev</a>&#160;</td><th align="center" width="60%">Chapter&#160;4.&#160;Examples</th><td align="right" width="20%">&#160;<a accesskey="n" href="JMS-Client-0-8-Client-Understanding.html">Next</a></td></tr></table><hr /></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="JMS-Client-0-8-Examples-PubSub"></a>4.2.&#160;Publish/subscribe example</h2></div></div></div><p>In this second example, we illustrate publish/subscribe messaging. Again, we create a
			JNDI context using a properties file, use the context to lookup a connection factory,
			create and start a connection, create a session, and lookup a destination (a topic) from
			the JNDI context. Then we create a producer and two durable subscribers , send a message
			with the producer. Both subscribers receive the same message.</p><div class="example"><a id="JMS-Client-0-8-Examples-PubSub-Java"></a><p class="title"><strong>Example&#160;4.3.&#160;JMS Example - Publish/subscribe Messaging</strong></p><div class="example-contents"><pre class="programlisting">
import javax.jms.*;
import javax.naming.Context;
import javax.naming.InitialContext;

import java.util.Properties;

public class StocksExample {

    public StocksExample() {
    }

    public static void main(String[] args) throws Exception {
      StocksExample stocks = new StocksExample();
      stocks.runTest();
    }

    private void runTest() throws Exception {
      Properties properties = new Properties();
      properties.load(this.getClass().getResourceAsStream("stocks.properties"));
      Context context = new InitialContext(properties);

      ConnectionFactory connectionFactory
          = (ConnectionFactory) context.lookup("qpidConnectionFactory");
      Connection connection = connectionFactory.createConnection();
      connection.start();

      Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
      Topic priceTopic = (Topic) context.lookup("myprices");                             <a class="co" href="JMS-Client-0-8-Examples-PubSub.html#callout-pubsub-destination" id="pubsub-java-destination"><span><img alt="1" border="0" src="images/callouts/1.png" /></span></a>

      MessageConsumer subscriber1 = session.createDurableSubscriber(priceTopic, "sub1"); <a class="co" href="JMS-Client-0-8-Examples-PubSub.html#callout-pubsub-subscribers" id="pubsub-java-subscribers"><span><img alt="2" border="0" src="images/callouts/2.png" /></span></a>
      MessageConsumer subscriber2 = session.createDurableSubscriber(priceTopic, "sub2" /*, "price &gt; 150", false*/ );
      MessageProducer messageProducer = session.createProducer(priceTopic);

      Message message = session.createMessage();
      message.setStringProperty("instrument", "IBM");
      message.setIntProperty("price", 100);
      messageProducer.send(message);
      session.commit();

      message = subscriber1.receive(1000);
      session.commit();
      System.out.println("Subscriber 1 received : " + message);

      message = subscriber2.receive(1000);
      session.commit();
      System.out.println("Subscriber 2 received : " + message);

      session.unsubscribe("sub1");                                                       <a class="co" href="JMS-Client-0-8-Examples-PubSub.html#callout-pubsub-unsubscribe" id="pubsub-java-unsubscribe"><span><img alt="3" border="0" src="images/callouts/3.png" /></span></a>
      session.unsubscribe("sub2");
      connection.close();
      context.close();
    }
}
	</pre></div></div><br class="example-break" /><div class="calloutlist"><table border="0" summary="Callout list"><tr><td align="left" valign="top" width="5%"><p><a id="callout-pubsub-destination"></a><a href="#pubsub-java-destination"><span><img alt="1" border="0" src="images/callouts/1.png" /></span></a> </p></td><td align="left" valign="top"><p>Looks up a destination for the topic with JNDI name myprices.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a id="callout-pubsub-subscribers"></a><a href="#pubsub-java-subscribers"><span><img alt="2" border="0" src="images/callouts/2.png" /></span></a> </p></td><td align="left" valign="top"><p>Creates two durable subscribers, <code class="literal">sub1</code> and
						<code class="literal">sub2</code>. Durable subscriptions retain messages for the
					client even when the client is disconnected, until the subscription is
					unsubscribed. Subscription 2 has a (commented out) message selector argument so
					you can conveniently experiement with the effect of those. <a class="footnote" href="#ftn.d0e283" id="d0e283"><sup class="footnote">[3]</sup></a></p></td></tr><tr><td align="left" valign="top" width="5%"><p><a id="callout-pubsub-unsubscribe"></a><a href="#pubsub-java-unsubscribe"><span><img alt="3" border="0" src="images/callouts/3.png" /></span></a> </p></td><td align="left" valign="top"><p>Unsubscribes the two durable subscribers, permanently removing the knowledge
					of the subscriptions from the system. An application would normally
						<span class="emphasis"><em>NOT</em></span> do this. The typical use-case for durable
					subsciption is one where the subscription exists over an extended period of
					time.</p></td></tr></table></div><p>The contents of the <code class="literal">stocks.properties</code> file are shown below.</p><div class="example"><a id="JMS-Client-0-8-Examples-PubSub-PropertiesFile"></a><p class="title"><strong>Example&#160;4.4.&#160;JMS Example - Publish/subscribe Messaging - JNDI Properties</strong></p><div class="example-contents"><pre class="programlisting">
java.naming.factory.initial = org.apache.qpid.jndi.PropertiesFileInitialContextFactory
connectionfactory.qpidConnectionFactory = amqp://guest:guest@clientid/?brokerlist='tcp://localhost:5672'
topic.myprices = prices <a class="co" href="JMS-Client-0-8-Examples-PubSub.html#callout-pubsub-properties-destination" id="pubsub-properties-destination"><span><img alt="1" border="0" src="images/callouts/1.png" /></span></a>
	</pre></div></div><br class="example-break" /><div class="calloutlist"><table border="0" summary="Callout list"><tr><td align="left" valign="top" width="5%"><p><a id="callout-pubsub-properties-destination"></a><a href="#pubsub-properties-destination"><span><img alt="1" border="0" src="images/callouts/1.png" /></span></a> </p></td><td align="left" valign="top"><p>Defines a topic for which MessageProducers and/or MessageConsumers send and
					receive messages. The format of this entry is described in <a class="xref" href="JMS-Client-0-8-JNDI-Properties-Format-Topic.html" title="6.3.&#160;Topic">Section&#160;6.3, &#8220;Topic&#8221;</a>.</p></td></tr></table></div><div class="footnotes"><br /><hr style="width:100; text-align:left;margin-left: 0" /><div class="footnote" id="ftn.d0e283"><p><a class="para" href="#d0e283"><sup class="para">[3] </sup></a>Each durable subscription is implemented as a queue on the Broker. See
								<a class="xref" href="JMS-Client-0-8-Client-Understanding-MessageConsumer.html#JMS-Client-0-8-Client-Understanding-MessageConsumer-TopicSubscriptions" title="5.6.2.&#160;Topic Subscriptions">Section&#160;5.6.2, &#8220;Topic Subscriptions&#8221;</a> for details.</p></div></div></div><div class="navfooter"><hr /><table summary="Navigation footer" width="100%"><tr><td align="left" width="40%"><a accesskey="p" href="JMS-Client-0-8-Examples.html">Prev</a>&#160;</td><td align="center" width="20%"><a accesskey="u" href="JMS-Client-0-8-Examples.html">Up</a></td><td align="right" width="40%">&#160;<a accesskey="n" href="JMS-Client-0-8-Client-Understanding.html">Next</a></td></tr><tr><td align="left" valign="top" width="40%">Chapter&#160;4.&#160;Examples&#160;</td><td align="center" width="20%"><a accesskey="h" href="JMS-Client-Book.html">Home</a></td><td align="right" valign="top" width="40%">&#160;Chapter&#160;5.&#160;Understanding the Client</td></tr></table></div></div>