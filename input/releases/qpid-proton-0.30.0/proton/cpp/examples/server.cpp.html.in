
<h1>server.cpp</h1>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&lt;proton/connection.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/container.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/message.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/message_id.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/messaging_handler.hpp&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;map&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;cctype&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&quot;fake_cpp11.hpp&quot;</span><span class="cp"></span>

<span class="k">class</span> <span class="nc">server</span> <span class="o">:</span> <span class="k">public</span> <span class="n">proton</span><span class="o">::</span><span class="n">messaging_handler</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">conn_url_</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">addr_</span><span class="p">;</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">connection</span> <span class="n">conn_</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">proton</span><span class="o">::</span><span class="n">sender</span><span class="o">&gt;</span> <span class="n">senders_</span><span class="p">;</span>

  <span class="k">public</span><span class="o">:</span>
    <span class="n">server</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">u</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">)</span> <span class="o">:</span>
        <span class="n">conn_url_</span><span class="p">(</span><span class="n">u</span><span class="p">),</span> <span class="n">addr_</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="p">{}</span>

    <span class="kt">void</span> <span class="n">on_container_start</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">container</span><span class="o">&amp;</span> <span class="n">c</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">conn_</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="n">conn_url_</span><span class="p">);</span>
        <span class="n">conn_</span><span class="p">.</span><span class="n">open_receiver</span><span class="p">(</span><span class="n">addr_</span><span class="p">);</span>

        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Server connected to &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">conn_url_</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_upper</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">uc</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
        <span class="kt">size_t</span> <span class="n">l</span> <span class="o">=</span> <span class="n">uc</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>

        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">l</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">uc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">toupper</span><span class="p">(</span><span class="n">uc</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">uc</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_message</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">delivery</span><span class="o">&amp;</span><span class="p">,</span> <span class="n">proton</span><span class="o">::</span><span class="n">message</span><span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Received &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">m</span><span class="p">.</span><span class="n">body</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">reply_to</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">reply_to</span><span class="p">();</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">message</span> <span class="n">reply</span><span class="p">;</span>

        <span class="n">reply</span><span class="p">.</span><span class="n">to</span><span class="p">(</span><span class="n">reply_to</span><span class="p">);</span>
        <span class="n">reply</span><span class="p">.</span><span class="n">body</span><span class="p">(</span><span class="n">to_upper</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">body</span><span class="p">())));</span>
        <span class="n">reply</span><span class="p">.</span><span class="n">correlation_id</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">correlation_id</span><span class="p">());</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">senders_</span><span class="p">[</span><span class="n">reply_to</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">senders_</span><span class="p">[</span><span class="n">reply_to</span><span class="p">]</span> <span class="o">=</span> <span class="n">conn_</span><span class="p">.</span><span class="n">open_sender</span><span class="p">(</span><span class="n">reply_to</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">senders_</span><span class="p">[</span><span class="n">reply_to</span><span class="p">].</span><span class="n">send</span><span class="p">(</span><span class="n">reply</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">conn_url</span> <span class="o">=</span> <span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">:</span> <span class="s">&quot;//127.0.0.1:5672&quot;</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="o">?</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">:</span> <span class="s">&quot;examples&quot;</span><span class="p">;</span>

        <span class="n">server</span> <span class="n">srv</span><span class="p">(</span><span class="n">conn_url</span><span class="p">,</span> <span class="n">addr</span><span class="p">);</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">container</span><span class="p">(</span><span class="n">srv</span><span class="p">).</span><span class="n">run</span><span class="p">();</span>

        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="server.cpp">Download this file</a></p>
