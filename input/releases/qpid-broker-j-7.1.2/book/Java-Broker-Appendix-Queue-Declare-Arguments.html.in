<div class="docbook"><div class="navheader"><table summary="Navigation header" width="100%"><tr><th align="center" colspan="3">Appendix&#160;G.&#160;Queue Declaration Arguments supported by the Broker</th></tr><tr><td align="left" width="20%"><a accesskey="p" href="Java-Broker-Miscellaneous-Installing-External-JDBC-Driver.html">Prev</a>&#160;</td><th align="center" width="60%">&#160;</th><td align="right" width="20%">&#160;</td></tr></table><hr /></div><div class="appendix"><div class="titlepage"><div><div><h1 class="title"><a id="Java-Broker-Appendix-Queue-Declare-Arguments"></a>Appendix&#160;G.&#160;Queue Declaration Arguments supported by the Broker</h1></div></div></div><p>
        <span class="emphasis"><em>Qpid Broker-J</em></span>
        supports a number of custom arguments which can be specified as part of <span class="emphasis"><em>queue.declare</em></span>
        commands for AMQP 0-x protocols. This section provides an overview of the supported arguments.
    </p><div class="table"><a id="Java-Broker-Appendix-Supported-Queue-Declare-Arguments"></a><p class="title"><strong>Table&#160;G.1.&#160;Queue declare arguments</strong></p><div class="table-contents"><table border="1" summary="Queue declare arguments"><colgroup><col class="col1" /><col class="col2" /></colgroup><thead><tr><th>Argument Name</th><th>Description</th></tr></thead><tbody><tr><td colspan="2"><a id="Java-Broker-Appendix-Queue-Declare-Arguments-Overflow-Policy"></a>
                        <p>Declaration of overflow policy.
                            See
                            <a class="xref" href="Java-Broker-Concepts-Queues.html#Java-Broker-Concepts-Queue-OverflowPolicy" title="4.7.5.&#160;Controlling Queue Size">Section&#160;4.7.5, &#8220;Controlling Queue Size&#8221;</a>
                            for more details.
                        </p>
                    </td></tr><tr><td><a id="Java-Broker-Appendix-Queue-Declare-Arguments-Policy-Type"></a>
                        <p>qpid.policy_type</p>
                    </td><td>
                        <p>Defines queue overflow policy.</p>
                    </td></tr><tr><td><a id="Java-Broker-Appendix-Queue-Declare-Arguments-Max-Count"></a>
                        <p>qpid.max_count</p>
                    </td><td>
                        <p>Defines <span class="emphasis"><em>maximum number of messages</em></span>.
                        </p>
                    </td></tr><tr><td><a id="Java-Broker-Appendix-Queue-Declare-Arguments-Max-Size"></a>
                        <p>qpid.max_size</p>
                    </td><td>
                        <p>Defines <span class="emphasis"><em>maximum number of bytes</em></span>.
                        </p>
                    </td></tr><tr><td colspan="2">
                        <p>The <span class="emphasis"><em>Overflow Policy</em></span> and the limits can be specified using
                            <span class="emphasis"><em>Address</em></span>
                            based syntax as in the example below:
                            </p><pre class="screen">
my-queue; {create: always, node: {x-declare: {arguments:{'qpid.max_count': 10000, 'qpid.max_size': 102400, 'qpid.policy_type: 'ring'}}}}
</pre><p>
                        </p>
                    </td></tr><tr><td colspan="2"><a id="Java-Broker-Appendix-Queue-Declare-Arguments-Overflow-Policy-Producer-Flow-Control"></a>
                        <p>Alternative declaration of <span class="emphasis"><em>Producer Flow Control</em></span> overflow policy.
                            See
                            <a class="xref" href="Java-Broker-Concepts-Queues.html#Java-Broker-Concepts-Queue-OverflowPolicy" title="4.7.5.&#160;Controlling Queue Size">Section&#160;4.7.5, &#8220;Controlling Queue Size&#8221;</a>
                            for more details.
                        </p>
                    </td></tr><tr><td><a id="Java-Broker-Appendix-Queue-Declare-Arguments-Capacity"></a>
                        <p>x-qpid-capacity</p>
                    </td><td>
                        <p>Defines <span class="emphasis"><em>maximum number of bytes</em></span>.
                        </p>
                    </td></tr><tr><td><a id="Java-Broker-Appendix-Queue-Declare-Arguments-Flow-Resume-Capacity"></a>
                        <p>x-qpid-flow-resume-capacity</p>
                    </td><td>
                        <p>Defines flow resume threshold in bytes</p>
                    </td></tr><tr><td colspan="2">
                        <p>The <span class="emphasis"><em>Producer Flow Control</em></span> can be specified using
                            <span class="emphasis"><em>Address</em></span> based syntax as in the example below:
                            </p><pre class="screen">
my-queue; {create: always, node: {x-declare: {arguments:{'x-qpid-capacity': 102400, 'x-qpid-flow-resume-capacity': 8192000}}}}
</pre><p>
                        </p>
                    </td></tr><tr><td><a id="Java-Broker-Appendix-Queue-Declare-Arguments-X-Qpid-Priorities"></a>
                        <p>x-qpid-priorities</p>
                    </td><td>
                        <p>Specifies a priority queue with given number priorities</p>
                    </td></tr><tr><td><a id="Java-Broker-Appendix-Queue-Declare-Arguments-Qpid-Sort-Key"></a>
                        <p>qpid.queue_sort_key</p>
                    </td><td>
                        <p>Specifies sorted queue with given message property used to sort the entries</p>
                    </td></tr><tr><td><a id="Java-Broker-Appendix-Queue-Declare-Arguments-Qpid-Last-Value-Key"></a>
                        <p>qpid.last_value_queue_key</p>
                    </td><td>
                        <p>Specifies lvq queue with given message property used to conflate the entries</p>
                    </td></tr><tr><td><a id="Java-Broker-Appendix-Queue-Declare-Arguments-Qpid-Ensure-Nondestructive-Consumers"></a>
                        <p>qpid.ensure_nondestructive_consumers</p>
                    </td><td>
                        <p>Set to true if the queue should make all consumers attached to it behave
                            non-destructively. (Default is false).</p>
                    </td></tr><tr><td><a id="Java-Broker-Appendix-Queue-Declare-Arguments-X-Qpid-Maximum-Delivery-Count"></a>
                        <p>x-qpid-maximum-delivery-count</p>
                    </td><td>
                        <p>Specifies this queue's maximum delivery count.</p>
                    </td></tr><tr><td><a id="Java-Broker-Appendix-Queue-Declare-Arguments-X-Qpid-DLQ-Enabled"></a>
                        <p>x-qpid-dlq-enabled</p>
                    </td><td>
                        <p>If set <code class="literal">true</code>, a dead letter queue will be automatically created
                        and assigned as this queue's <code class="literal">alternateBinding</code>.</p>
                    </td></tr></tbody></table></div></div><br class="table-break" /></div><div class="navfooter"><hr /><table summary="Navigation footer" width="100%"><tr><td align="left" width="40%"><a accesskey="p" href="Java-Broker-Miscellaneous-Installing-External-JDBC-Driver.html">Prev</a>&#160;</td><td align="center" width="20%">&#160;</td><td align="right" width="40%">&#160;</td></tr><tr><td align="left" valign="top" width="40%">F.2.&#160;Installing External JDBC Driver&#160;</td><td align="center" width="20%"><a accesskey="h" href="Apache-Qpid-Broker-J-Book.html">Home</a></td><td align="right" valign="top" width="40%">&#160;</td></tr></table></div></div>