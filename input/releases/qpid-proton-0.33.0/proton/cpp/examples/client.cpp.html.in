
<h1>client.cpp</h1>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&quot;options.hpp&quot;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/connection.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/container.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/delivery.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/message.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/messaging_handler.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/receiver_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/source_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/tracker.hpp&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&quot;fake_cpp11.hpp&quot;</span><span class="cp"></span>

<span class="k">using</span> <span class="n">proton</span><span class="o">::</span><span class="n">receiver_options</span><span class="p">;</span>
<span class="k">using</span> <span class="n">proton</span><span class="o">::</span><span class="n">source_options</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">client</span> <span class="o">:</span> <span class="k">public</span> <span class="n">proton</span><span class="o">::</span><span class="n">messaging_handler</span> <span class="p">{</span>
  <span class="k">private</span><span class="o">:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">url</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">requests</span><span class="p">;</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="n">sender</span><span class="p">;</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">receiver</span> <span class="n">receiver</span><span class="p">;</span>

  <span class="k">public</span><span class="o">:</span>
    <span class="n">client</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">u</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">r</span><span class="p">)</span> <span class="o">:</span> <span class="n">url</span><span class="p">(</span><span class="n">u</span><span class="p">),</span> <span class="n">requests</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{}</span>

    <span class="kt">void</span> <span class="n">on_container_start</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">container</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">sender</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">open_sender</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
        <span class="c1">// Create a receiver requesting a dynamically created queue</span>
        <span class="c1">// for the message source.</span>
        <span class="n">receiver_options</span> <span class="n">opts</span> <span class="o">=</span> <span class="n">receiver_options</span><span class="p">().</span><span class="n">source</span><span class="p">(</span><span class="n">source_options</span><span class="p">().</span><span class="n">dynamic</span><span class="p">(</span><span class="nb">true</span><span class="p">));</span>
        <span class="n">receiver</span> <span class="o">=</span> <span class="n">sender</span><span class="p">.</span><span class="n">connection</span><span class="p">().</span><span class="n">open_receiver</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">opts</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">send_request</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">message</span> <span class="n">req</span><span class="p">;</span>
        <span class="n">req</span><span class="p">.</span><span class="n">body</span><span class="p">(</span><span class="n">requests</span><span class="p">.</span><span class="n">front</span><span class="p">());</span>
        <span class="n">req</span><span class="p">.</span><span class="n">reply_to</span><span class="p">(</span><span class="n">receiver</span><span class="p">.</span><span class="n">source</span><span class="p">().</span><span class="n">address</span><span class="p">());</span>
        <span class="n">sender</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">req</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_receiver_open</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">receiver</span> <span class="o">&amp;</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">send_request</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_message</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">delivery</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">,</span> <span class="n">proton</span><span class="o">::</span><span class="n">message</span> <span class="o">&amp;</span><span class="n">response</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">requests</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="k">return</span><span class="p">;</span> <span class="c1">// Spurious extra message!</span>

        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">requests</span><span class="p">.</span><span class="n">front</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; =&gt; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">response</span><span class="p">.</span><span class="n">body</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="n">requests</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">requests</span><span class="p">.</span><span class="n">begin</span><span class="p">());</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">requests</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">send_request</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">d</span><span class="p">.</span><span class="n">connection</span><span class="p">().</span><span class="n">close</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">url</span><span class="p">(</span><span class="s">&quot;127.0.0.1:5672/examples&quot;</span><span class="p">);</span>
    <span class="n">example</span><span class="o">::</span><span class="n">options</span> <span class="n">opts</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>

    <span class="n">opts</span><span class="p">.</span><span class="n">add_value</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="s">&quot;address&quot;</span><span class="p">,</span> <span class="s">&quot;connect and send to URL&quot;</span><span class="p">,</span> <span class="s">&quot;URL&quot;</span><span class="p">);</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="n">opts</span><span class="p">.</span><span class="n">parse</span><span class="p">();</span>

        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">requests</span><span class="p">;</span>
        <span class="n">requests</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;Twas brillig, and the slithy toves&quot;</span><span class="p">);</span>
        <span class="n">requests</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;Did gire and gymble in the wabe.&quot;</span><span class="p">);</span>
        <span class="n">requests</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;All mimsy were the borogroves,&quot;</span><span class="p">);</span>
        <span class="n">requests</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;And the mome raths outgrabe.&quot;</span><span class="p">);</span>

        <span class="n">client</span> <span class="n">c</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">requests</span><span class="p">);</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">container</span><span class="p">(</span><span class="n">c</span><span class="p">).</span><span class="n">run</span><span class="p">();</span>

        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">example</span><span class="o">::</span><span class="n">bad_option</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">opts</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="client.cpp">Download this file</a></p>
