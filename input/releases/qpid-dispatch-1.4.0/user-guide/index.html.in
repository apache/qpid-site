<h1>Using Qpid Dispatch</h1>
<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#introduction">1. Introduction</a>
<ul class="sectlevel2">
<li><a href="#overview">1.1. Overview</a></li>
<li><a href="#benefits">1.2. Benefits</a></li>
<li><a href="#features">1.3. Features</a></li>
</ul>
</li>
<li><a href="#theory_of_operation">2. Theory of Operation</a>
<ul class="sectlevel2">
<li><a href="#overview_2">2.1. Overview</a></li>
<li><a href="#connections">2.2. Connections</a>
<ul class="sectlevel3">
<li><a href="#listener">2.2.1. Listener</a></li>
<li><a href="#connector">2.2.2. Connector</a></li>
</ul>
</li>
<li><a href="#addresses">2.3. Addresses</a>
<ul class="sectlevel3">
<li><a href="#mobile_addresses">2.3.1. Mobile Addresses</a></li>
<li><a href="#link_route_addresses">2.3.2. Link Route Addresses</a></li>
</ul>
</li>
<li><a href="#message_routing">2.4. Message Routing</a>
<ul class="sectlevel3">
<li><a href="#routing_patterns">2.4.1. Routing Patterns</a></li>
<li><a href="#routing_mechanisms">2.4.2. Routing Mechanisms</a></li>
<li><a href="#message_settlement">2.4.3. Message Settlement</a></li>
</ul>
</li>
<li><a href="#security">2.5. Security</a></li>
</ul>
</li>
<li><a href="#getting-started">3. Getting Started</a>
<ul class="sectlevel2">
<li><a href="#starting-the-router">3.1. Starting the Router</a></li>
<li><a href="#routing_messages_in_a_peer_to_peer_configuration">3.2. Routing Messages in a Peer-to-Peer Configuration</a>
<ul class="sectlevel3">
<li><a href="#starting-the-receiver-client">3.2.1. Starting the Receiver Client</a></li>
<li><a href="#sending-messages">3.2.2. Sending Messages</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#router-configuration">4. Configuration</a>
<ul class="sectlevel2">
<li><a href="#accessing_the_router_configuration_file">4.1. Accessing the Router Configuration File</a></li>
<li><a href="#how_the_router_configuration_file_is_structured">4.2. How the Router Configuration File is Structured</a></li>
<li><a href="#methods-for-using-pattern-matching">4.3. Methods for Using Pattern Matching and Wildcards</a>
<ul class="sectlevel3">
<li><a href="#router-address-pattern-matching">4.3.1. Pattern Matching for Addresses</a></li>
<li><a href="#pattern-matching-vhost-policy-hostnames">4.3.2. Pattern Matching for Vhost Policy Hostnames</a></li>
</ul>
</li>
<li><a href="#methods-for-changing-router-configuration">4.4. Changing a Router&#8217;s Configuration</a>
<ul class="sectlevel3">
<li><a href="#making-permanent-change-to-router-configuration">4.4.1. Making a Permanent Change to the Router&#8217;s Configuration</a></li>
<li><a href="#changing-configuration-for-running-router">4.4.2. Changing the Configuration for a Running Router</a></li>
</ul>
</li>
<li><a href="#default_configuration_settings">4.5. Default Configuration Settings</a></li>
<li><a href="#setting_essential_configuration_properties">4.6. Setting Essential Configuration Properties</a></li>
</ul>
</li>
<li><a href="#router-network-connections">5. Network Connections</a>
<ul class="sectlevel2">
<li><a href="#adding-incoming-connections">5.1. Listening for Incoming Connections</a></li>
<li><a href="#adding-outgoing-connections">5.2. Adding Outgoing Connections</a></li>
</ul>
</li>
<li><a href="#security-config">6. Security</a>
<ul class="sectlevel2">
<li><a href="#authenticating_remote_peers">6.1. Authenticating Remote Peers</a>
<ul class="sectlevel3">
<li><a href="#setting-up-ssl-for-encryption-and-authentication">6.1.1. Setting Up SSL/TLS for Encryption and Authentication</a></li>
<li><a href="#setting-up-sasl-for-authentication-and-payload-encryption">6.1.2. Setting Up SASL for Authentication and Payload Encryption</a></li>
<li><a href="#securing-incoming-connections">6.1.3. Securing Incoming Connections</a></li>
<li><a href="#securing-outgoing-connections">6.1.4. Securing Outgoing Connections</a></li>
<li><a href="#integrating-with-kerberos">6.1.5. Integrating with Kerberos</a></li>
</ul>
</li>
<li><a href="#authorizing_access_to_messaging_resources">6.2. Authorizing Access to Messaging Resources</a>
<ul class="sectlevel3">
<li><a href="#how_dispatch_router_enforces_connection_and_resource_limits">6.2.1. How Dispatch Router Enforces Connection and Resource Limits</a></li>
<li><a href="#setting_global_connection_limits">6.2.2. Setting Global Connection Limits</a></li>
<li><a href="#setting_connection_and_resource_limits_for_messaging_endpoints">6.2.3. Setting Connection and Resource Limits for Messaging Endpoints</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#routing">7. Routing</a>
<ul class="sectlevel2">
<li><a href="#comparison_of_message_routing_and_link_routing">7.1. Comparison of Message Routing and Link Routing</a>
<ul class="sectlevel3">
<li><a href="#when_to_use_message_routing">7.1.1. When to Use Message Routing</a></li>
<li><a href="#when_to_use_link_routing">7.1.2. When to Use Link Routing</a></li>
</ul>
</li>
<li><a href="#configuring_message_routing">7.2. Configuring Message Routing</a>
<ul class="sectlevel3">
<li><a href="#addresses_2">7.2.1. Addresses</a></li>
<li><a href="#routing-patterns-overview">7.2.2. Routing Patterns</a></li>
<li><a href="#message_settlement_2">7.2.3. Message Settlement</a></li>
<li><a href="#routing-messages-between-clients">7.2.4. Routing Messages Between Clients</a></li>
<li><a href="#routing-messages-through-broker">7.2.5. Routing Messages Through a Broker Queue</a></li>
<li><a href="#example_routing_messages_through_broker_queues">7.2.6. Example: Routing Messages Through Broker Queues</a></li>
</ul>
</li>
<li><a href="#configuring_link_routing">7.3. Configuring Link Routing</a>
<ul class="sectlevel3">
<li><a href="#link_route_addresses_2">7.3.1. Link Route Addresses</a></li>
<li><a href="#link_route_routing_patterns">7.3.2. Link Route Routing Patterns</a></li>
<li><a href="#link_route_flow_control">7.3.3. Link Route Flow Control</a></li>
<li><a href="#creating-link-route">7.3.4. Creating a Link Route</a></li>
<li><a href="#example_using_a_link_route_to_provide_client_isolation">7.3.5. Example: Using a Link Route to Provide Client Isolation</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#logging">8. Logging</a>
<ul class="sectlevel2">
<li><a href="#logging-modules-you-can-configure">8.1. Logging Modules</a>
<ul class="sectlevel3">
<li><a href="#the_code_default_code_logging_module">8.1.1. The <code>DEFAULT</code> Logging Module</a></li>
<li><a href="#the_code_router_code_logging_module">8.1.2. The <code>ROUTER</code> Logging Module</a></li>
<li><a href="#the_code_router_core_code_logging_module">8.1.3. The <code>ROUTER_CORE</code> Logging Module</a></li>
<li><a href="#the_code_router_hello_code_logging_module">8.1.4. The <code>ROUTER_HELLO</code> Logging Module</a></li>
<li><a href="#the_code_router_ls_code_logging_module">8.1.5. The <code>ROUTER_LS</code> Logging Module</a></li>
<li><a href="#the_code_router_ma_code_logging_module">8.1.6. The <code>ROUTER_MA</code> Logging Module</a></li>
<li><a href="#the_code_message_code_logging_module">8.1.7. The <code>MESSAGE</code> Logging Module</a></li>
<li><a href="#the_code_server_code_logging_module">8.1.8. The <code>SERVER</code> Logging Module</a></li>
<li><a href="#the_code_agent_code_logging_module">8.1.9. The <code>AGENT</code> Logging Module</a></li>
<li><a href="#the_code_container_code_logging_module">8.1.10. The <code>CONTAINER</code> Logging Module</a></li>
<li><a href="#the_code_error_code_logging_module">8.1.11. The <code>ERROR</code> Logging Module</a></li>
<li><a href="#the_code_policy_code_logging_module">8.1.12. The <code>POLICY</code> Logging Module</a></li>
</ul>
</li>
<li><a href="#configure-default-logging">8.2. Configuring Logging</a></li>
<li><a href="#viewing_log_entries">8.3. Viewing Log Entries</a>
<ul class="sectlevel3">
<li><a href="#viewing_log_entries_on_the_console">8.3.1. Viewing Log Entries on the Console</a></li>
<li><a href="#viewing_log_entries_on_the_cli">8.3.2. Viewing Log Entries on the CLI</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#management">9. Management</a>
<ul class="sectlevel2">
<li><a href="#using_apache_qpid_dispatch_router_console">9.1. Using Apache Qpid Dispatch Router Console</a>
<ul class="sectlevel3">
<li><a href="#console-overview">9.1.1. Console Overview</a></li>
<li><a href="#console-installation">9.1.2. Console Installation</a></li>
<li><a href="#console-operation">9.1.3. Console Operation</a></li>
</ul>
</li>
<li><a href="#monitoring-using-qdstat">9.2. Monitoring Dispatch Router Using <code>qdstat</code></a>
<ul class="sectlevel3">
<li><a href="#syntax_for_using_code_qdstat_code">9.2.1. Syntax for Using <code>qdstat</code></a></li>
<li><a href="#viewing_general_statistics_for_a_router">9.2.2. Viewing General Statistics for a Router</a></li>
<li><a href="#viewing_a_list_of_connections_to_a_router">9.2.3. Viewing a List of Connections to a Router</a></li>
<li><a href="#viewing_amqp_links_attached_to_a_router">9.2.4. Viewing AMQP Links Attached to a Router</a></li>
<li><a href="#viewing_known_routers_on_a_network">9.2.5. Viewing Known Routers on a Network</a></li>
<li><a href="#viewing_addresses_known_to_a_router">9.2.6. Viewing Addresses Known to a Router</a></li>
<li><a href="#viewing_a_router_s_autolinks">9.2.7. Viewing a Router&#8217;s Autolinks</a></li>
<li><a href="#viewing_the_status_of_a_router_s_link_routes">9.2.8. Viewing the Status of a Router&#8217;s Link Routes</a></li>
<li><a href="#viewing_memory_consumption_information">9.2.9. Viewing Memory Consumption Information</a></li>
</ul>
</li>
<li><a href="#managing-router">9.3. Managing Dispatch Router Using <code>qdmanage</code></a>
<ul class="sectlevel3">
<li><a href="#syntax_for_using_code_qdmanage_code">9.3.1. Syntax for Using <code>qdmanage</code></a></li>
<li><a href="#managing_network_connections">9.3.2. Managing Network Connections</a></li>
<li><a href="#managing_security">9.3.3. Managing Security</a></li>
<li><a href="#managing_routing">9.3.4. Managing Routing</a></li>
<li><a href="#managing_logging">9.3.5. Managing Logging</a></li>
</ul>
</li>
<li><a href="#management_entities">9.4. Management Entities</a></li>
</ul>
</li>
<li><a href="#reliability">10. Reliability</a>
<ul class="sectlevel2">
<li><a href="#path_redundancy">10.1. Path Redundancy</a></li>
<li><a href="#path_redundancy_and_temporal_decoupling">10.2. Path Redundancy and Temporal Decoupling</a></li>
<li><a href="#sharded_queue">10.3. Sharded Queue</a></li>
</ul>
</li>
<li><a href="#technical-details-specifications">11. Technical Details and Specifications</a>
<ul class="sectlevel2">
<li><a href="#client-compatibility">11.1. Client Compatibility</a></li>
<li><a href="#amqp-mapping">11.2. AMQP Mapping</a>
<ul class="sectlevel3">
<li><a href="#message-annotations">11.2.1. Message Annotations</a></li>
<li><a href="#sourcetarget-capabilities">11.2.2. Source/Target Capabilities</a></li>
<li><a href="#dynamic-node-properties">11.2.3. Dynamic-Node-Properties</a></li>
<li><a href="#addresses-and-address-formats">11.2.4. Addresses and Address Formats</a></li>
<li><a href="#implementation-of-the-amqp-management-specification">11.2.5. Implementation of the AMQP Management Specification</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#cyrus-sasl">Appendix A: Using Cyrus SASL to Provide Authentication</a>
<ul class="sectlevel2">
<li><a href="#generating-sasl-database">A.1. Generating a SASL Database</a></li>
<li><a href="#viewing_users_in_a_sasl_database">A.2. Viewing Users in a SASL Database</a></li>
<li><a href="#configuring-sasl-database">A.3. Configuring a SASL Database</a></li>
</ul>
</li>
</ul>
</div>
<div class="sect1">
<h2 id="introduction">1. Introduction</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="overview">1.1. Overview</h3>
<div class="paragraph">
<p>The Dispatch Router is an AMQP message router that provides
advanced interconnect capabilities. It allows flexible routing of
messages between any AMQP-enabled endpoints, whether they be clients,
servers, brokers or any other entity that can send or receive standard
AMQP messages.</p>
</div>
<div class="paragraph">
<p>A messaging client can make a single AMQP connection into a messaging
bus built of Dispatch Router routers and, over that connection, exchange
messages with one or more message brokers, and at the same time exchange
messages directly with other endpoints without involving a broker at
all.</p>
</div>
<div class="paragraph">
<p>The router is an intermediary for messages but it is <em>not</em> a broker. It
does not <em>take responsibility for</em> messages. It will, however, propagate
settlement and disposition across a network such that delivery
guarantees are met. In other words: the router network will deliver the
message, possibly via several intermediate routers, <em>and</em> it will route
the acknowledgement of that message by the ultimate receiver back across
the same path. This means that <em>responsibility</em> for the message is
transfered from the original sender to the ultimate receiver <em>as if
they were directly connected</em>. However this is done via a flexible
network that allows highly configurable routing of the message
transparent to both sender and receiver.</p>
</div>
<div class="paragraph">
<p>There are some patterns where this enables "brokerless messaging"
approaches that are preferable to brokered approaches. In other cases a
broker is essential (in particular where you need the separation of
responsibility and/or the buffering provided by store-and-forward) but a
dispatch network can still be useful to tie brokers and clients together
into patterns that are difficult with a single broker.</p>
</div>
<div class="paragraph">
<p>For a "brokerless" example, consider the common brokered implementation
of the request-response pattern, a client puts a request on a queue and
then waits for a reply on another queue. In this case the broker can be
a hindrance - the client may want to know immediately if there is nobody
to serve the request, but typically it can only wait for a timeout to
discover this. With a Dispatch Router network, the client can be informed
immediately if its message cannot be delivered because nobody is
listening. When the client receives acknowledgement of the request it
knows not just that it is sitting on a queue, but that it has actually
been received by the server.</p>
</div>
<div class="paragraph">
<p>For an exampe of using Dispatch Router to enhance the use of brokers, consider
using an array of brokers to implement a scalable distributed work
queue. A dispatch network can make this appear as a single queue, with
senders publishing to a single address and receivers subscribing to a
single address. The dispatch network can distribute work to any broker
in the array and collect work from any broker for any receiver. Brokers
can be shut down or added without affecting clients. This elegantly
solves the common difficulty of "stuck messages" when implementing this
pattern with brokers alone. If a receiver is connected to a broker that
has no messages, but there are messages on another broker, you have to
somehow transfer them or leave them "stuck". With a Dispatch Router network,
<em>all</em> the receivers are connected to <em>all</em> the brokers. If there is a
message anywhere it can be delivered to any receiver.</p>
</div>
<div class="paragraph">
<p>Dispatch Router is meant to be deployed in topologies of multiple routers,
preferably with redundant paths. It uses link-state routing protocols
and algorithms (similar to OSPF or IS-IS from the networking world) to
calculate the best path from every point to every other point and to
recover quickly from failures. It does not need to use clustering for
high availability; rather, it relies on redundant paths to provide
continued connectivity in the face of system or network failure. Because
it never takes responsibility for messages it is effectively stateless.
Messages not delivered to their final destination will not be
acknowledged to the sender and therefore the sender can re-send such
messages if it is disconnected from the network.</p>
</div>
</div>
<div class="sect2">
<h3 id="benefits">1.2. Benefits</h3>
<div class="paragraph">
<p>Simplifies connectivity</p>
</div>
<div class="ulist">
<ul>
<li>
<p>An endpoint can do all of its messaging through a single transport
connection</p>
</li>
<li>
<p>Avoid opening holes in firewalls for incoming connections</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Provides messaging connectivity where there is no TCP/IP connectivity</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A server or broker can be in a private IP network (behind a NAT
firewall) and be accessible by messaging endpoints in other networks
(learn more).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Simplifies reliability</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Reliability and availability are provided using redundant topology,
not server clustering</p>
</li>
<li>
<p>Reliable end-to-end messaging without persistent stores</p>
</li>
<li>
<p>Use a message broker only when you need store-and-forward semantics</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="features">1.3. Features</h3>
<div class="ulist">
<ul>
<li>
<p>Can be deployed stand-alone or in a network of routers</p>
<div class="ulist">
<ul>
<li>
<p>Supports arbitrary network topology - no restrictions on redundancy</p>
<div class="ulist">
<ul>
<li>
<p>Automatic route computation - adjusts quickly to changes in topology</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>Provides remote access to brokers or other AMQP servers</p>
</li>
<li>
<p>Security</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="theory_of_operation">2. Theory of Operation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This section introduces some key concepts about the router.</p>
</div>
<div class="sect2">
<h3 id="overview_2">2.1. Overview</h3>
<div class="paragraph">
<p>The Dispatch Router is an <em>application layer</em> program running as a normal
user program or as a daemon.</p>
</div>
<div class="paragraph">
<p>Dispatch Router accepts AMQP connections from clients and creates AMQP
connections to brokers or AMQP-based services. Dispatch Router classifies
incoming AMQP messages and routes the
messages between message producers and message consumers.</p>
</div>
<div class="paragraph">
<p>Dispatch Router is meant to be deployed in topologies of multiple routers,
preferably with redundant paths. It uses link-state routing protocols
and algorithms similar to OSPF or IS-IS from the networking world to
calculate the best path from every message source to every message
destination and to recover quickly from failures. Dispatch Router relies on
redundant network paths to provide continued connectivity in the face
of system or network failure.</p>
</div>
<div class="paragraph">
<p>A messaging client can make a single AMQP connection into a messaging
bus built with routers and, over that connection, exchange messages
with one or more message brokers connected to any router in the
network. At the same time the client can exchange messages directly
with other endpoints without involving a broker at all.</p>
</div>
</div>
<div class="sect2">
<h3 id="connections">2.2. Connections</h3>
<div class="paragraph">
<p>Dispatch Router connects clients, servers, AMQP services, and other
routers through network connections.</p>
</div>
<div class="sect3">
<h4 id="listener">2.2.1. Listener</h4>
<div class="paragraph">
<p>Dispatch Router provides <em>listeners</em> that accept client connections.
A client connecting to a router listener uses the
same methods that it would use to connect to a broker. From the
client&#8217;s perspective the router connection and link establishment are
identical to broker connection and link establishment.</p>
</div>
<div class="paragraph">
<p>Several types of listeners are defined by their role.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 20%;">
<col style="width: 80%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Role</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Description</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">normal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The connection is used for AMQP clients using normal message delivery.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">inter-router</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The connection is assumed to be to another router in the network.  Inter-router discovery and routing protocols can only be used over inter-router connections.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">route-container</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The connection is a broker or other resource that holds known addresses. The router will use this connection to create links as necessary. The addresses are available for routing only after the remote resource has created a connection.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="connector">2.2.2. Connector</h4>
<div class="paragraph">
<p>Dispatch Router can also be configured to create outbound connections to
messaging brokers or other AMQP entities using <em>connectors</em>. A
connector is defined with the network address of the broker and the
name or names of the resources that are available in that broker. When
a router connects to a broker through a connector it uses the same
methods a normal messaging client would use when connecting to the
broker.</p>
</div>
<div class="paragraph">
<p>Several types of connectors are defined by their role.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 20%;">
<col style="width: 80%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Role</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Description</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">normal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The connection is used for AMQP clients using normal message delivery. On this connector the router will initiate the connection but it will never create any links. Links are to be created by the peer that accepts the connection.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">inter-router</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The connection is assumed to be to another router in the network.  Inter-router discovery and routing protocols can only be used over inter-router connections.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">route-container</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The connection is to a broker or other resource that holds known addresses. The router will use this connection to create links as necessary. The addresses are available for routing only after the router has created a connection to the remote resource.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect2">
<h3 id="addresses">2.3. Addresses</h3>
<div class="paragraph">
<p>AMQP addresses are used to control the flow of messages across a
network of routers. Addresses are used in a number of different places
in the AMQP 1.0 protocol. They can be used in a specific message in
the <em>to</em> and <em>reply-to</em> fields of a message&#8217;s properties. They are also
used during the creation of links in the <em>address</em> field of a <em>source</em> or
a <em>target</em>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Addresses in this discussion refer to AMQP protocol addresses and not
to TCP/IP network addresses. TCP/IP network addresses are used by
messaging clients, brokers, and routers to create AMQP connections.
AMQP protocol addresses are the names of source and destination
endpoints for messages within the messaging network.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Addresses designate various kinds of entities in a messaging network:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Endpoint processes that consume data or offer a service</p>
</li>
<li>
<p>Topics that match multiple consumers to multiple producers</p>
</li>
<li>
<p>Entities within a messaging broker:</p>
<div class="ulist">
<ul>
<li>
<p>Queues</p>
</li>
<li>
<p>Durable Topics</p>
</li>
<li>
<p>Exchanges</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>The syntax of an AMQP address is opaque as far as the router network
is concerned. A syntactical structure may be used by the administrator
who creates addresses but the router treats them as opaque
strings.</p>
</div>
<div class="paragraph">
<p>Dispatch Router maintains several classes of address based on how the address is
configured or discovered.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Address Type</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Description</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">mobile</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The address is a rendezvous point between senders and receivers. The router aggregates and serializes messages from senders and distributes messages to receivers.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">link route</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The address defines a private messaging path between a sender and a receiver. The router simply passes messages between the end points.</p></td>
</tr>
</tbody>
</table>
<div class="sect3">
<h4 id="mobile_addresses">2.3.1. Mobile Addresses</h4>
<div class="paragraph">
<p>Routers consider addresses to be mobile such that any users of an
address may be directly connected to any router in a network and may
move around the topology. In cases where messages are broadcast to or
balanced across multiple consumers, the address users may be connected
to multiple routers in the network.</p>
</div>
<div class="paragraph">
<p>Mobile addresses are rendezvous points for senders and receivers.
Messages arrive at the mobile address and are dispatched to their
destinations according to the routing defined for the mobile address.
The details of these routing patterns are discussed later.</p>
</div>
<div class="paragraph">
<p>Mobile addresses may be discovered during normal router operation or
configured through management settings.</p>
</div>
<div class="sect4">
<h5 id="discovered_mobile_addresses">Discovered Mobile Addresses</h5>
<div class="paragraph">
<p>Mobile addresses are created when a client creates a link to a source
or destination address that is unknown to the router network.</p>
</div>
<div class="paragraph">
<p>Suppose a service provider wants to offer <em>my-service</em> that clients
may use. The service provider must open a receiver link with source
address <em>my-service</em>.  The router creates a mobile address
<em>my-service</em> and propagates the address so that it is known to every
router in the network.</p>
</div>
<div class="paragraph">
<p>Later a client wants to use the service and creates a sending link
with target address <em>my-service</em>. The router matches the service
provider&#8217;s receiver having source address <em>my-service</em> to the client&#8217;s
sender having target address <em>my-service</em> and routes messages between
the two.</p>
</div>
<div class="paragraph">
<p>Any number of other clients can create links to the service as
well. The clients do not have to know where in the router network the
service provider is physically located nor are the clients required to
connect to a specific router to use the service. Regardless of how
many clients are using the service the service provider needs only a
single connection and link into the router network.</p>
</div>
<div class="paragraph">
<p>Another view of this same scenario is when a client tries to use the
service before service provider has connected to the network. In this
case the router network creates the mobile address <em>my-service</em> as
before. However, since the mobile address has only client sender links
and no receiver links the router stalls the clients and prevents them
from sending any messages.  Later, after the service provider connects
and creates the receiver link, the router will issue credits to the
clients and the messages will begin to flow between the clients and
the service.</p>
</div>
<div class="paragraph">
<p>The service provider can connect, disconnect, and reconnect from a
different location without having to change any of the clients or
their connections.  Imagine having the service running on a
laptop. One day the connection is from corporate headquarters and the
next day the connection is from some remote location. In this case the
service provider&#8217;s computer will typically have different host IP
addresses for each connection. Using the router network the service
provider connects to the router network and offers the named service
and the clients connect to the router network and consume from the
named service. The router network routes messages between the mobile
addresses effectively masking host IP addresses of the service
provider and the client systems.</p>
</div>
</div>
<div class="sect4">
<h5 id="configured_mobile_addresses">Configured Mobile Addresses</h5>
<div class="paragraph">
<p>Mobile addresses may be configured using the router <em>autoLink</em>
object. An address created via an <em>autoLink</em> represents a queue,
topic, or other service in an external broker. Logically the
<em>autoLink</em> addresses are treated by the router network as if the
broker had connected to the router and offered the services itself.</p>
</div>
<div class="paragraph">
<p>For each configured mobile address the router will create a single
link to the external resource. Messages flow between sender links and
receiver links the same regardless if the mobile address was
discovered or configured.</p>
</div>
<div class="paragraph">
<p>Multiple <em>autoLink</em> objects may define the same address on multiple
brokers.  In this case the router network creates a sharded resource
split between the brokers. Any client can seamlessly send and receive
messages from either broker.</p>
</div>
<div class="paragraph">
<p>Note that the brokers do not need to be clustered or federated to
receive this treatment. The brokers may even be from different vendors
or be different versions of the same broker yet still work together to
provide a larger service platform.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="link_route_addresses">2.3.2. Link Route Addresses</h4>
<div class="paragraph">
<p>Link route addresses may be configured using the router <em>linkRoute</em>
object. An link route address represents a queue, topic, or other
service in an external broker similar to addresses configured by
<em>autoLink</em> objects. For link route addresses the router propagates a
separate link attachment to the broker resource for each incoming
client link. The router does not automatically create any links to the
broker resource.</p>
</div>
<div class="paragraph">
<p>Using link route addresses the router network does not participate in
aggregated message distribution. The router simply passes message
delivery and settlement between the two end points.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="message_routing">2.4. Message Routing</h3>
<div class="paragraph">
<p>Addresses have semantics associated with them that are assigned when
the address is provisioned or discovered.  The semantics of an address
control how routers behave when they see the address being
used. Address semantics include the following considerations:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Routing pattern - balanced, closest, multicast</p>
</li>
<li>
<p>Routing mechanism - message routed, link routed</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="routing_patterns">2.4.1. Routing Patterns</h4>
<div class="paragraph">
<p>Routing patterns define the paths that a message with a mobile address
can take across a network. These routing patterns can be used for both
direct routing, in which the router distributes messages between
clients without a broker, and indirect routing, in which the router
enables clients to exchange messages through a broker.</p>
</div>
<div class="paragraph">
<p>Note that the routing patterns fall into two categories:  Anycast
(Balanced and Closest) and Multicast.  There is no concept of
"unicast" in which there is only one consumer for an address.</p>
</div>
<div class="paragraph">
<p>Anycast distribution delivers each message to one consumer whereas
multicast distribution delivers each message to all consumers.</p>
</div>
<div class="paragraph">
<p>Anycast delivery is reliable when the message deliveries are
unsettled. There is a reliability contract that the router network
abides by when delivering unsettled messages to anycast addresses.
For every such delivery sent by a producer, the router network
guarantees that one of the following outcomes will occur:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The delivery shall be settled with ACCEPTED or REJECTED disposition where the disposition is supplied by the consumer.</p>
</li>
<li>
<p>The delivery shall be settled with RELEASED disposition, meaning that the message was not delivered to any consumer.</p>
</li>
<li>
<p>The delivery shall be settled with MODIFIED disposition, meaning that the message may have been delivered to a consumer but should be considered in-doubt and re-sent.</p>
</li>
<li>
<p>The connection to the producer shall be dropped, signifying that all unsettled deliveries should now be considered in-doubt by the producer and later re-sent.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Multicast delivery is not reliable. If a producer sends an unsettled delivery, the disposition may be ACCEPTED or RELEASED.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If ACCEPTED, there is no guarantee that the message was delivered to any consumer.</p>
</li>
<li>
<p>If RELEASED, the message was definitely not delivered to any consumer.</p>
</li>
</ul>
</div>
<div class="sect4">
<h5 id="balanced">Balanced</h5>
<div class="paragraph">
<p>An anycast method which allows multiple receivers to use the same
address. In this case, messages (or links) are routed to exactly one
of the receivers and the network attempts to balance the traffic load
across the set of receivers using the same address. This routing
delivers messages to receivers based on how quickly they settle the
deliveries. Faster receivers get more messages.</p>
</div>
</div>
<div class="sect4">
<h5 id="closest">Closest</h5>
<div class="paragraph">
<p>An anycast method in which even if there are more receivers for the
same address, every message is sent along the shortest path to reach
the destination. This means that only one receiver will get the
message. Each message is delivered to the closest receivers in terms
of topology cost. If there are multiple receivers with the same lowest
cost, deliveries will be spread evenly among those receivers.</p>
</div>
</div>
<div class="sect4">
<h5 id="multicast">Multicast</h5>
<div class="paragraph">
<p>Having multiple consumers on the same address at the same time,
messages are routed such that each consumer receives one copy of the
message.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="routing_mechanisms">2.4.2. Routing Mechanisms</h4>
<div class="paragraph">
<p>The fact that addresses can be used in different ways suggests that
message routing can be accomplished in different ways. Before going
into the specifics of the different routing mechanisms, it would be
good to first define what is meant by the term <em>routing</em>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>In a network built of multiple, interconnected routers 'routing'
determines which connection to use to send a message directly
to its destination or one step closer to its destination.</pre>
</div>
</div>
<div class="paragraph">
<p>Each router serves as the terminus of a collection of incoming and
outgoing links. Some of the links are designated for message routing,
and others are designated for link routing. In both cases, the links
either connect directly to endpoints that produce and consume
messages, or they connect to other routers in the network along
previously established connections.</p>
</div>
<div class="sect4">
<h5 id="message_routed">Message Routed</h5>
<div class="paragraph">
<p>Message routing occurs upon delivery of a message and is done based on
the address in the message&#8217;s <em>to</em> field.</p>
</div>
<div class="paragraph">
<p>When a delivery arrives on an incoming message-routing link, the
router extracts the address from the delivered message&#8217;s <em>to</em> field and
looks the address up in its routing table. The lookup results in zero
or more outgoing links onto which the message shall be resent.</p>
</div>
<div class="paragraph">
<p>Message routing can also occur without an address in the
message&#8217;s <em>to</em> field if the incoming link has a target address. In
fact, if the sender uses a link with a target address, the <em>to</em> field
shall be ignored even if used.</p>
</div>
</div>
<div class="sect4">
<h5 id="link_routed">Link Routed</h5>
<div class="paragraph">
<p>Link routing occurs when a new link is attached to the router across
one of its AMQP connections. It is done based on the <em>target.address</em>
field of an inbound link and the <em>source.address</em> field of an outbound
link.</p>
</div>
<div class="paragraph">
<p>Link routing uses the same routing table that message routing
uses. The difference is that the routing occurs during the link-attach
operation, and link attaches are propagated along the appropriate path
to the destination. What results is a chain of links, connected
end-to-end, from source to destination. It is similar to a virtual
circuit in a telecom system.</p>
</div>
<div class="paragraph">
<p>Each router in the chain holds pairs of link termini that are tied
together. The router then simply exchanges all deliveries, delivery
state changes, and link state changes between the two termini.</p>
</div>
<div class="paragraph">
<p>The endpoints that use the link chain do not see any difference in
behavior between a link chain and a single point-to-point link. All of
the features available in the link protocol (flow control,
transactional delivery, etc.) are available over a routed link-chain.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="message_settlement">2.4.3. Message Settlement</h4>
<div class="paragraph">
<p>Messages may be delivered with varying degrees of reliability.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>At most once</p>
</li>
<li>
<p>At least once</p>
</li>
<li>
<p>Exactly once</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The reliability is negotiated between the client and server during
link establishment. The router handles all levels of reliability by treating
messages as either <em>pre-settled</em> or <em>unsettled</em>.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 20%;">
<col style="width: 80%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delivery</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Handling</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">pre-settled</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">If the arriving delivery is pre-settled (i.e., fire and forget), the incoming delivery shall be settled by the router, and the outgoing deliveries shall also be pre-settled. In other words, the pre-settled nature of the message delivery is propagated across the network to the message&#8217;s destination.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">unsettled</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Unsettled delivery is also propagated across the network. Because unsettled delivery records cannot be discarded, the router tracks the incoming deliveries and keeps the association of the incoming deliveries to the resulting outgoing deliveries. This kept association allows the router to continue to propagate changes in delivery state (settlement and disposition) back and forth along the path which the message traveled.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect2">
<h3 id="security">2.5. Security</h3>
<div class="paragraph">
<p>Dispatch Router uses the SSL protocol and related certificates and SASL
protocol mechanisms to encrypt and authenticate remote peers. Router
listeners act as network servers and router connectors act as network
clients. Both connection types may be configured securely with SSL
and SASL.</p>
</div>
<div class="paragraph">
<p>The router <code>policy</code> module is an optional authorization mechanism
enforcing user connection restrictions and AMQP resource access
control.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="getting-started">3. Getting Started</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Before configuring Dispatch Router, you should understand how to start the router, how it is configured by default, and how to use it in a simple peer-to-peer configuration.</p>
</div>
<div class="sect2">
<h3 id="starting-the-router">3.1. Starting the Router</h3>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>To start the router, use the <strong><code>qdrouterd</code></strong> command.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>This example uses the default configuration to start the router as a daemon:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdrouterd -d</pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>You can specify a different configuration file with which to start the router. For more information, see <a href="#methods-for-changing-router-configuration"><em>Changing a Router&#8217;s Configuration</em></a>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The router starts, using the default configuration file stored at <code>/etc/qpid-dispatch/qdrouterd.conf</code>.</p>
</div>
</li>
<li>
<p>View the log to verify the router status:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --log</pre>
</div>
</div>
<div class="paragraph">
<p>This example shows that the router was correctly installed, is running, and is ready to route traffic between clients:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --log
Fri May 20 09:38:03 2017 SERVER (info) Container Name: Router.A <b class="conum">(1)</b>
Fri May 20 09:38:03 2017 ROUTER (info) Router started in Standalone mode <b class="conum">(2)</b>
Fri May 20 09:38:03 2017 ROUTER_CORE (info) Router Core thread running. 0/Router.A
Fri May 20 09:38:03 2017 ROUTER_CORE (info) In-process subscription M/$management
Fri May 20 09:38:03 2017 AGENT (info) Activating management agent on $_management_internal <b class="conum">(3)</b>
Fri May 20 09:38:03 2017 ROUTER_CORE (info) In-process subscription L/$management
Fri May 20 09:38:03 2017 ROUTER_CORE (info) In-process subscription L/$_management_internal
Fri May 20 09:38:03 2017 DISPLAYNAME (info) Activating DisplayNameService on $displayname
Fri May 20 09:38:03 2017 ROUTER_CORE (info) In-process subscription L/$displayname
Fri May 20 09:38:03 2017 CONN_MGR (info) Configured Listener: 0.0.0.0:amqp proto=any role=normal <b class="conum">(4)</b>
Fri May 20 09:38:03 2017 POLICY (info) Policy configured maximumConnections: 0, policyFolder: '', access rules enabled: 'false'
Fri May 20 09:38:03 2017 POLICY (info) Policy fallback defaultApplication is disabled
Fri May 20 09:38:03 2017 SERVER (info) Operational, 4 Threads Running <b class="conum">(5)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The name of this router instance.</p>
</li>
<li>
<p>By default, the router starts in <em>standalone</em> mode, which means that it cannot connect to other routers or be used in a router network.</p>
</li>
<li>
<p>The management agent. It provides the <code>$management</code> address, through which management tools such as <code>qdmanage</code> and <code>qdstat</code> can perform create, read, update, and delete (CRUD) operations on the router. As an AMQP endpoint, the management agent supports all operations defined by the <a href="https://www.oasis-open.org/committees/download.php/54441/AMQP%20Management%20v1.0%20WD09">AMQP management specification (Draft 9)</a>.</p>
</li>
<li>
<p>A listener is started on all available network interfaces and listens for connections on the standard AMQP port (5672, which is not encrypted).</p>
</li>
<li>
<p>Threads for handling message traffic and all other internal operations.</p>
</li>
</ol>
</div>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="routing_messages_in_a_peer_to_peer_configuration">3.2. Routing Messages in a Peer-to-Peer Configuration</h3>
<div class="paragraph">
<p>This example demonstrates how the router can connect clients by receiving and sending messages between them. It uses the router&#8217;s default configuration file and does not require a broker.</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/01-peer-to-peer.png" alt="Peer-to-peer Communication">
</div>
<div class="title">Figure 1. Peer-to-peer Communication</div>
</div>
<div class="paragraph">
<p>As the diagram indicates, the configuration consists of an Dispatch Router component with two clients connected to it: a sender and a receiver. The receiver wants to receive messages on a specific address, and the sender sends
messages to that address.</p>
</div>
<div class="paragraph">
<p>A broker is not used in this example, so there is no <em>"store and forward"</em> mechanism in the middle. Instead, the messages flow from sender to receiver only if the receiver is online, and the sender can confirm that the messages have arrived at their destination.</p>
</div>
<div class="paragraph">
<p>This example uses a Apache Qpid Proton Python client to start a receiver client, and then send five messages from the sender client.</p>
</div>
<div class="paragraph">
<div class="title">Prerequisites</div>
<p>Apache Qpid Proton Python must be installed before you can complete the peer-to-peer routing example. For more information, see <a href="https://qpid.apache.org/proton/" class="bare">https://qpid.apache.org/proton/</a>.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p><a href="#starting-the-receiver-client">Start the receiver client</a>.</p>
</li>
<li>
<p><a href="#sending-messages">Send messages</a>.</p>
</li>
</ol>
</div>
<div class="sect3">
<h4 id="starting-the-receiver-client">3.2.1. Starting the Receiver Client</h4>
<div class="paragraph">
<p>In this example, the receiver client is started first. This means that the messages will be sent as soon as the sender client is started.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>In practice, the order in which you start senders and receivers does not matter. In both cases, messages will be sent as soon as the receiver comes online.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>To start the receiver by using the Python receiver client, navigate to the Python examples directory and run the <code>simple_recv.py</code> example:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ cd <em>INSTALL_DIR</em>/examples/python/
$ python simple_recv.py -a 127.0.0.1:5672/examples -m 5</pre>
</div>
</div>
<div class="paragraph">
<p>This command starts the receiver and listens on the default address (<code>127.0.0.1:5672/examples</code>). The receiver is also set to receive a maximum of five messages.</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="sending-messages">3.2.2. Sending Messages</h4>
<div class="paragraph">
<p>After starting the receiver client, you can send messages from the sender. These messages will travel through the router to the receiver.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In a new terminal window, navigate to the Python examples directory and run the <code>simple_send.py</code> example:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ cd <em>INSTALL_DIR</em>/examples/python/
$ python simple_send.py -a 127.0.0.1:5672/examples -m 5</pre>
</div>
</div>
<div class="paragraph">
<p>This command sends five auto-generated messages to the default address (<code>127.0.0.1:5672/examples</code>) and then confirms that they were delivered and acknowledged by the receiver:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">all messages confirmed</pre>
</div>
</div>
<div class="paragraph">
<p>The receiver client receives the messages and displays their content:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">{u'sequence': 1L}
{u'sequence': 2L}
{u'sequence': 3L}
{u'sequence': 4L}
{u'sequence': 5L}</pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="router-configuration">4. Configuration</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Before starting Dispatch Router, you should understand where the router&#8217;s configuration file is stored, how the file is structured, and the methods you can use to modify it.</p>
</div>
<div class="sect2">
<h3 id="accessing_the_router_configuration_file">4.1. Accessing the Router Configuration File</h3>
<div class="paragraph">
<p>The router&#8217;s configuration is defined in the router configuration file. You can access this file to view and modify that configuration.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Open the following file: <code>/etc/qpid-dispatch/qdrouterd.conf</code>.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>When Dispatch Router is installed, <code>qdrouterd.conf</code> is installed in this directory by default. When the router is started, it runs with the settings defined in this file.</p>
</div>
<div class="paragraph">
<p>For more information about the router configuration file (including available entities and attributes), see the <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.html" target="_blank" rel="noopener">qdrouterd man page</a>.</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="how_the_router_configuration_file_is_structured">4.2. How the Router Configuration File is Structured</h3>
<div class="paragraph">
<p>Before you can make changes to a router configuration file, you should understand how the file is structured.</p>
</div>
<div class="paragraph">
<p>The configuration file contains sections. A section is a configurable entity, and it contains a set of attribute name-value pairs that define the settings for that entity. The syntax is as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">sectionName {
    attributeName: attributeValue
    attributeName: attributeValue
    ...
}</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="methods-for-using-pattern-matching">4.3. Methods for Using Pattern Matching and Wildcards</h3>
<div class="paragraph">
<p>The router configuration file supports pattern matching and wildcards to enable you to match multiple values for certain attributes. However, the syntax varies based on the type of entity that you are configuring.</p>
</div>
<div class="sect3">
<h4 id="router-address-pattern-matching">4.3.1. Pattern Matching for Addresses</h4>
<div class="paragraph">
<p>In some router configuration scenarios, you might need to use pattern matching to match a range of addresses rather than a single, literal address. Address patterns match any address that corresponds to the pattern.</p>
</div>
<div class="paragraph">
<p>An address pattern is a sequence of tokens (typically words) that are delimited by either <code>.</code> or <code>/</code> characters. They also can contain special wildcard characters that represent words:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>*</code> represents exactly one word</p>
</li>
<li>
<p><code>#</code> represents zero or more words</p>
</li>
</ul>
</div>
<div class="exampleblock">
<div class="title">Example 1. Address Pattern</div>
<div class="content">
<div class="paragraph">
<p>This address contains two tokens, separated by the <code>/</code> delimiter:</p>
</div>
<div class="paragraph">
<p><code>my/address</code></p>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 2. Address Pattern with Wildcard</div>
<div class="content">
<div class="paragraph">
<p>This address contains three tokens. The <code>*</code> is a wildcard, representing any single word that might be between <code>my</code> and <code>address</code>:</p>
</div>
<div class="paragraph">
<p><code>my/*/address</code></p>
</div>
</div>
</div>
<div class="paragraph">
<p>The following table shows some address patterns and examples of the addresses that would match them:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">This pattern&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Matches&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">But not&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/*</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/europe</code></p>
</div>
<div class="paragraph">
<p><code>news/usa</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news</code></p>
</div>
<div class="paragraph">
<p><code>news/usa/sports</code></p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/#</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news</code></p>
</div>
<div class="paragraph">
<p><code>news/europe</code></p>
</div>
<div class="paragraph">
<p><code>news/usa/sports</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>europe</code></p>
</div>
<div class="paragraph">
<p><code>usa</code></p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/europe/#</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/europe</code></p>
</div>
<div class="paragraph">
<p><code>news/europe/sports</code></p>
</div>
<div class="paragraph">
<p><code>news/europe/politics/fr</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/usa</code></p>
</div>
<div class="paragraph">
<p><code>europe</code></p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/*/sports</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news/europe/sports</code></p>
</div>
<div class="paragraph">
<p><code>news/usa/sports</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>news</code></p>
</div>
<div class="paragraph">
<p><code>news/europe/fr/sports</code></p>
</div></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="pattern-matching-vhost-policy-hostnames">4.3.2. Pattern Matching for Vhost Policy Hostnames</h4>
<div class="paragraph">
<p>In a vhost policy, vhost hostnames can be either literal hostnames or patterns that cover a range of hostnames.</p>
</div>
<div class="paragraph">
<p>A hostname pattern is a sequence of words with one or more of the following wildcard characters:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>*</code> represents exactly one word</p>
</li>
<li>
<p><code>#</code> represents zero or more words</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The following table shows some examples of hostname patterns:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">This pattern&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Matches&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">But not&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>*.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>www.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>example.com</code>
<code>srv2.www.example.com</code></p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>#.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>example.com</code>
<code>www.example.com</code>
<code>a.b.c.d.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>myhost.com</code></p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>www.*.test.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>www.a.test.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>www.test.example.com</code>
<code>www.a.b.c.test.example.com</code></p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>www.#.test.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>www.test.example.com</code>
<code>www.a.test.example.com</code>
<code>www.a.b.c.test.example.com</code></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><code>test.example.com</code></p>
</div></div></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Vhost hostname pattern matching applies the following precedence rules:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Policy pattern</th>
<th class="tableblock halign-left valign-top">Precedence</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Exact match</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">High</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">*</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Medium</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">#</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Low</p></td>
</tr>
</tbody>
</table>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Dispatch Router does not permit you to create vhost hostname patterns that conflict with existing patterns. This includes patterns that can be reduced to be the same as an existing pattern. For example, you would not be able to create the <code>#.#.#.#.com</code> pattern if <code>#.com</code> already exists.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="methods-for-changing-router-configuration">4.4. Changing a Router&#8217;s Configuration</h3>
<div class="paragraph">
<p>You can use different methods for changing a router&#8217;s configuration based on whether the router is currently running, and whether you want the change to take effect immediately.</p>
</div>
<div class="ulist">
<div class="title">Choices</div>
<ul>
<li>
<p><a href="#making-permanent-change-to-router-configuration">Make a permanent change to the router&#8217;s configuration</a>.</p>
</li>
<li>
<p><a href="#changing-configuration-for-running-router">Change the configuration for a running router.</a></p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="making-permanent-change-to-router-configuration">4.4.1. Making a Permanent Change to the Router&#8217;s Configuration</h4>
<div class="paragraph">
<p>You can make a permanent change to the router&#8217;s configuration by editing the router&#8217;s configuration file directly. You must restart the router for the changes to take effect, but the changes will be saved even if the router is stopped.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Do one of the following:</p>
<div class="ulist">
<ul>
<li>
<p>Edit the default configuration file (<code>/etc/qpid-dispatch/qdrouterd.conf</code>).</p>
</li>
<li>
<p>Create a new configuration file.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Start (or restart) the router.</p>
<div class="paragraph">
<p>If you created a new configuration file, you must specify the path using the <code>--conf</code> parameter. For example, the following command starts the router with a non-default configuration file:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo qdrouterd -d --conf /etc/qpid-dispatch/new-configuration-file.conf</pre>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="changing-configuration-for-running-router">4.4.2. Changing the Configuration for a Running Router</h4>
<div class="paragraph">
<p>If the router is running, you can change its configuration on the fly. The changes you make take effect immediately, but are lost if the router is stopped.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use <code>qdmanage</code> to change the configuration.</p>
<div class="paragraph">
<p>For more information about using <code>qdmanage</code>, see <a href="#managing-router">Managing Dispatch Router Using <em>qdmanage</em></a>.</p>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="default_configuration_settings">4.5. Default Configuration Settings</h3>
<div class="paragraph">
<p>The router&#8217;s configuration file controls the way in which the router functions. The default configuration file contains the minimum number of settings required for the router to run. As you become more familiar with the router, you can add to or change these settings, or create your own configuration files.</p>
</div>
<div class="paragraph">
<p>When you installed Dispatch Router, the default configuration file was added at the following path: <code>/etc/qpid-dispatch/qdrouterd.conf</code>. It includes some basic configuration settings that define the router&#8217;s operating mode, how it listens for incoming connections, and routing patterns for the message routing mechanism.</p>
</div>
<div class="listingblock">
<div class="title">Default Configuration File</div>
<div class="content">
<pre class="nowrap">router {
    mode: standalone <b class="conum">(1)</b>
    id: Router.A <b class="conum">(2)</b>
}

listener { <b class="conum">(3)</b>
    host: 0.0.0.0 <b class="conum">(4)</b>
    port: amqp <b class="conum">(5)</b>
    authenticatePeer: no <b class="conum">(6)</b>
}

address { <b class="conum">(7)</b>
    prefix: closest
    distribution: closest
}

address {
    prefix: multicast
    distribution: multicast
}

address {
    prefix: unicast
    distribution: closest
}

address {
    prefix: exclusive
    distribution: closest
}

address {
    prefix: broadcast
    distribution: multicast
}</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>By default, the router operates in <em>standalone</em> mode. This means that it can only communicate with endpoints that are directly connected to it. It cannot connect to other routers, or participate in a router network.</p>
</li>
<li>
<p>The unique identifier of the router. This ID is used as the <code>container-id</code> (container name) at the AMQP protocol level. It is required, and the router will not start if this attribute is not defined.</p>
</li>
<li>
<p>The <code>listener</code> entity handles incoming connections from client endpoints.</p>
</li>
<li>
<p>The IP address on which the router will listen for incoming connections. By default, the router is configured to listen on all network interfaces.</p>
</li>
<li>
<p>The port on which the router will listen for incoming connections. By default, the default AMQP port (5672) is specified with a symbolic service name.</p>
</li>
<li>
<p>Specifies whether the router should authenticate peers before they can connect to the router. By default, peer authentication is not required.</p>
</li>
<li>
<p>By default, the router is configured to use the message routing mechanism. Each <code>address</code> entity defines how messages that are received with a particular address <code>prefix</code> should be distributed. For example, all messages with addresses that start with <code>closest</code> will be distributed using the <code>closest</code> distribution pattern.</p>
</li>
</ol>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>If a client requests a message with an address that is not defined in the router&#8217;s configuration file, the <code>balanced</code> distribution pattern will be used automatically.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="setting_essential_configuration_properties">4.6. Setting Essential Configuration Properties</h3>
<div class="paragraph">
<p>The router&#8217;s default configuration settings enable the router to run with minimal configuration. However, you may need to change some of these settings for the router to run properly in your environment.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Open the router&#8217;s configuration file.</p>
<div class="paragraph">
<p>If you are changing the router&#8217;s default configuration file, the file is located at <code>/etc/qpid-dispatch/qdrouterd.conf</code>.</p>
</div>
</li>
<li>
<p>To define essential router information, change the following attributes as needed in the <code>router</code> section:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">router {
    mode: <em>STANDALONE/INTERIOR</em>
    id: <em>ROUTER_ID</em>
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>mode</code></dt>
<dd>
<p>Specify one of the following modes:</p>
<div class="ulist">
<ul>
<li>
<p><code>standalone</code> - Use this mode if the router does not communicate with other routers and is not part of a router network. When operating in this mode, the router only routes messages between directly connected endpoints.</p>
</li>
<li>
<p><code>interior</code> - Use this mode if the router is part of a router network and needs to collaborate with other routers.</p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1"><code>id</code></dt>
<dd>
<p>The unique identifier for the router. This ID will also be the container name at the AMQP protocol level.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_router">router</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>If necessary for your environment, secure the router.</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><a href="#setting-up-ssl-for-encryption-and-authentication">Set up SSL/TLS for encryption, authentication, or both</a></p>
</li>
<li>
<p><a href="#setting-up-sasl-for-authentication-and-payload-encryption">Set up SASL for authentication and payload encryption</a></p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>Connect the router to other routers, clients, and brokers.</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><a href="#adding-incoming-connections">Add incoming connections</a></p>
</li>
<li>
<p><a href="#adding-outgoing-connections">Add outgoing connections</a></p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>Set up routing for your environment:</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><a href="#routing-messages-between-clients">Configure the router to route messages between clients directly</a></p>
</li>
<li>
<p><a href="#routing-messages-through-broker">Configure the router to route messages through a broker queue</a></p>
</li>
<li>
<p><a href="#creating-link-route">Create a link route to define a private messaging path between endpoints</a></p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p><a href="#logging">Set up logging</a>.</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="router-network-connections">5. Network Connections</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Connections define how the router communicates with clients, other routers, and brokers. You can configure <em>incoming connections</em> to define how the router listens for data from clients and other routers, and you can configure <em>outgoing connections</em> to define how the router sends data to other routers and brokers.</p>
</div>
<div class="sect2">
<h3 id="adding-incoming-connections">5.1. Listening for Incoming Connections</h3>
<div class="paragraph">
<p>Listening for incoming connections involves setting the host and port on which the router should listen for traffic.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>In the router&#8217;s configuration file, add a <code>listener</code>:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    host: <em>HOST_NAME/ADDRESS</em>
    port: <em>PORT_NUMBER/NAME</em>
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>host</code></dt>
<dd>
<p>Either an IP address (IPv4 or IPv6) or hostname on which the router should listen for incoming connections.</p>
</dd>
<dt class="hdlist1"><code>port</code></dt>
<dd>
<p>The port number or symbolic service name on which the router should listen for incoming connections.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_listener">listener</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>If necessary, <a href="#securing-incoming-connections">secure the connection</a>.</p>
<div class="paragraph">
<p>If you have set up SSL/TLS or SASL in your environment, you can configure the router to only accept encrypted or authenticated communication on this connection.</p>
</div>
</li>
<li>
<p>If you want the router to listen for incoming connections on additional hosts or ports, configure an additional <code>listener</code> entity for each host and port.</p>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="adding-outgoing-connections">5.2. Adding Outgoing Connections</h3>
<div class="paragraph">
<p>Configuring outgoing connections involves setting the host and port on which the router connects to other routers and brokers.</p>
</div>
<div class="paragraph">
<p>When a router connects to a broker, the broker might provide backup connection data that the router can use if the primary connection fails. If the primary connection fails, the router attempts to reconnect by using a combination of the primary and&#8201;&#8212;&#8201;if provided&#8201;&#8212;&#8201;backup connections in round-robin fashion until the connection is successful. For more information about viewing the backup connection data provided by the broker, see <a href="#managing-connectors">Managing Connectors</a>.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>In the router&#8217;s configuration file, add a <code>connector</code>:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    name: <em>NAME</em>
    host: <em>HOST_NAME/ADDRESS</em>
    port: <em>PORT_NUMBER/NAME</em>
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>name</code></dt>
<dd>
<p>The name of the <code>connector</code>. You should specify a name that describes the entity to which the connector connects. This name is used by configured addresses (for example, a <code>linkRoute</code> entity) in order to specify which connection should be used for them.</p>
</dd>
<dt class="hdlist1"><code>host</code></dt>
<dd>
<p>Either an IP address (IPv4 or IPv6) or hostname on which the router should connect.</p>
</dd>
<dt class="hdlist1"><code>port</code></dt>
<dd>
<p>The port number or symbolic service name on which the router should connect.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_connector">connector</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>If necessary, <a href="#securing-outgoing-connections">secure the connection</a>.</p>
<div class="paragraph">
<p>If you have set up SSL/TLS or SASL in your environment, you can configure the router to only send encrypted or authenticated communication on this connection.</p>
</div>
</li>
<li>
<p>For each remaining router or broker to which this router should connect, configure an additional <code>connector</code> entity.</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="security-config">6. Security</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Securing your router network involves configuring authentication and authorization. You can authenticate and encrypt the router&#8217;s connections using SSL/TLS or SASL. Additionally, you can authorize access to messaging resources by setting user connection restrictions and defining AMQP resource access control.</p>
</div>
<div class="sect2">
<h3 id="authenticating_remote_peers">6.1. Authenticating Remote Peers</h3>
<div class="paragraph">
<p>You can configure Dispatch Router to communicate with clients, routers, and brokers in a secure way by authenticating and encrypting the router&#8217;s connections. Dispatch Router supports the following security protocols:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><em>SSL/TLS</em> for certificate-based encryption and mutual authentication</p>
</li>
<li>
<p><em>SASL</em> for authentication and payload encryption</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="setting-up-ssl-for-encryption-and-authentication">6.1.1. Setting Up SSL/TLS for Encryption and Authentication</h4>
<div class="paragraph">
<p>Before you can secure incoming and outgoing connections using SSL/TLS encryption and authentication, you must first set up the SSL/TLS profile in the router&#8217;s configuration file.</p>
</div>
<div class="paragraph">
<div class="title">Prerequisites</div>
<p>You must have the following files in PEM format:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>An X.509 CA certificate (used for signing the router certificate for the SSL/TLS server authentication feature).</p>
</li>
<li>
<p>A private key (with or without password protection) for the router.</p>
</li>
<li>
<p>An X.509 router certificate signed by the X.509 CA certificate.</p>
</li>
</ul>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In the router&#8217;s configuration file, add an <code>sslProfile</code> section:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">sslProfile {
    name: <em>NAME</em>
    ciphers: <em>CIPHERS</em>
    protocols: <em>PROTOCOL</em>
    caCertFile: <em>PATH</em>.pem
    certFile: <em>PATH</em>.pem
    privateKeyFile: <em>PATH</em>.pem
    password: <em>PASSWORD/PATH_TO_PASSWORD_FILE</em>
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>name</code></dt>
<dd>
<p>A name for the SSL/TLS profile. You can use this name to refer to the profile from the incoming and outgoing connections.</p>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">name: router-ssl-profile</pre>
</div>
</div>
</dd>
<dt class="hdlist1"><code>ciphers</code></dt>
<dd>
<p>The SSL cipher suites that can be used by this SSL/TLS profile. If certain ciphers are unsuitable for your environment, you can use this attribute to restrict them from being used.</p>
<div class="paragraph">
<p>To enable a cipher list, enter one or more cipher strings separated by colons (<code>:</code>).</p>
</div>
<div class="exampleblock">
<div class="title">Example 3. Enabling a Cipher List</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">ciphers: ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP</pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>To see the full list of available ciphers, use the <code>openssl ciphers</code> command. For more information about each cipher, see the <a href="https://www.openssl.org/docs/manmaster/man1/ciphers.html" target="_blank" rel="noopener">ciphers man page</a>.</p>
</div>
</dd>
<dt class="hdlist1"><code>protocols</code></dt>
<dd>
<p>The SSL/TLS protocols that this router can use. You can specify a list of one or more of the following values: TLSv1, TLSv1.1, or TLSv1.2.</p>
<div class="paragraph">
<p>To specify multiple protocols, separate the protocols with a space.</p>
</div>
<div class="exampleblock">
<div class="title">Example 4. Specifying Multiple Protocols</div>
<div class="content">
<div class="paragraph">
<p>This example permits the SSL/TLS profile to use TLS v1.1 and TLS v1.2 only:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">protocols: TLSv1.1 TLSv1.2</pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>If you do not specify a value, the router will use the TLS protocol specified by the system-wide configuration.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>When setting the TLS protocol versions for the router, you should also consider the TLS protocol version (or versions) used by your client applications. If a subset of TLS protocol versions does not exist between a client and the router, the client will not be able to connect to the router.</p>
</div>
</td>
</tr>
</table>
</div>
</dd>
<dt class="hdlist1"><code>caCertFile</code></dt>
<dd>
<p>The absolute path to the file that contains the public certificates of trusted certificate authorities (CA).</p>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">caCertFile: /qdrouterd/ssl_certs/ca-cert.pem</pre>
</div>
</div>
</dd>
<dt class="hdlist1"><code>certFile</code></dt>
<dd>
<p>The absolute path to the file containing the PEM-formatted public certificate to be used on the local end of any connections using this profile.</p>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">certFile: /qdrouterd/ssl_certs/router-cert-pwd.pem</pre>
</div>
</div>
</dd>
<dt class="hdlist1"><code>privateKeyFile</code></dt>
<dd>
<p>The absolute path to the file containing the PEM-formatted private key for the above certificate.</p>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">privateKeyFile: /qdrouterd/ssl_certs/router-key-pwd.pem</pre>
</div>
</div>
</dd>
<dt class="hdlist1"><code>passwordFile</code> or <code>password</code></dt>
<dd>
<p>If the private key is password-protected, you must provide the password by either specifying the absolute path to a file containing the password that unlocks the certificate key, or entering the password directly in the configuration file.</p>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">password: routerKeyPassword</pre>
</div>
</div>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional <code>sslProfile</code> attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_sslprofile">sslProfile</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="setting-up-sasl-for-authentication-and-payload-encryption">6.1.2. Setting Up SASL for Authentication and Payload Encryption</h4>
<div class="paragraph">
<p>If you plan to use SASL to authenticate connections, you must first add the SASL attributes to the <code>router</code> entity in the router&#8217;s configuration file. These attributes define a set of SASL parameters that can be used by the router&#8217;s incoming and outgoing connections.</p>
</div>
<div class="paragraph">
<div class="title">Prerequisites</div>
<p>Before you can set up SASL, you must have the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="#generating-sasl-database">The SASL database is generated.</a></p>
</li>
<li>
<p><a href="#configuring-sasl-database">The SASL configuration file is configured.</a></p>
</li>
<li>
<p>The Cyrus SASL plugin is installed for each SASL mechanism you plan to use.</p>
<div class="paragraph">
<p>Cyrus SASL uses plugins to support specific SASL mechanisms. Before you can use a particular SASL mechanism, the relevant plugin must be installed. For example, you need the <code>cyrus-sasl-plain</code> plugin to use SASL PLAIN authentication.</p>
</div>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>To see a list of Cyrus SASL plugins in a <code>dnf</code>-based Linux system, use the <code>dnf search cyrus-sasl</code> command. To install a Cyrus SASL plugin, use the <code>dnf install <em>PLUGIN</em></code> command.</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In the router&#8217;s configuration file, add the following attributes to the <code>router</code> section:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">router {
    ...
    saslConfigDir: <em>PATH</em>
    saslConfigName: <em>FILE_NAME</em>
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>saslConfigDir</code></dt>
<dd>
<p>The absolute path to the SASL configuration file.</p>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">saslConfigDir: /qdrouterd/security</pre>
</div>
</div>
</dd>
<dt class="hdlist1"><code>saslConfigName</code></dt>
<dd>
<p>The name of the SASL configuration file. This name should <em>not</em> include the <code>.conf</code> file extension.</p>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">saslConfigName: qdrouterd_sasl</pre>
</div>
</div>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="securing-incoming-connections">6.1.3. Securing Incoming Connections</h4>
<div class="paragraph">
<p>You can secure incoming connections by configuring each connection&#8217;s <code>listener</code> entity for encryption, authentication, or both.</p>
</div>
<div class="paragraph">
<div class="title">Prerequisites</div>
<p>Before securing incoming connections, the security protocols you plan to use should be set up.</p>
</div>
<div class="ulist">
<div class="title">Choices</div>
<ul>
<li>
<p><a href="#adding-ssl-encryption-to-incoming-connection">Add SSL/TLS encryption</a></p>
</li>
<li>
<p><a href="#adding-sasl-authentication-to-incoming-connection">Add SASL authentication</a></p>
</li>
<li>
<p><a href="#adding-ssl-client-authentication-to-incoming-connection">Add SSL/TLS client authentication</a></p>
</li>
<li>
<p><a href="#adding-sasl-payload-encryption-to-incoming-connection">Add SASL payload encryption</a></p>
</li>
</ul>
</div>
<div class="sect4">
<h5 id="adding-ssl-encryption-to-incoming-connection">Adding SSL/TLS Encryption to an Incoming Connection</h5>
<div class="paragraph">
<p>You can configure an incoming connection to accept encrypted connections only. By adding SSL/TLS encryption, to connect to this router, a remote peer must first start an SSL/TLS handshake with the router and be able to validate the server certificate received by the router during the handshake.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In the router&#8217;s configuration file, add the following attributes to the connection&#8217;s <code>listener</code> entity:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    ...
    sslProfile: <em>SSL_PROFILE_NAME</em>
    requireSsl: yes
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>sslProfile</code></dt>
<dd>
<p>The name of the SSL/TLS profile you set up.</p>
</dd>
<dt class="hdlist1"><code>requireSsl</code></dt>
<dd>
<p>Enter <code>yes</code> to require all clients connecting to the router on this connection to use encryption.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect4">
<h5 id="adding-sasl-authentication-to-incoming-connection">Adding SASL Authentication to an Incoming Connection</h5>
<div class="paragraph">
<p>You can configure an incoming connection to authenticate the client using SASL. You can use SASL authentication with or without SSL/TLS encryption.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In the router&#8217;s configuration file, add the following attributes to the connection&#8217;s <code>listener</code> section:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    ...
    authenticatePeer: yes
    saslMechanisms: <em>MECHANISMS</em>
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>authenticatePeer</code></dt>
<dd>
<p>Set this attribute to <code>yes</code> to require the router to authenticate the identity of a remote peer before it can use this incoming connection.</p>
</dd>
<dt class="hdlist1"><code>saslMechanisms</code></dt>
<dd>
<p>The SASL authentication mechanism (or mechanisms) to use for peer authentication. You can choose any of the Cyrus SASL authentication mechanisms <em>except</em> for <code>ANONYMOUS</code>. To specify multiple authentication mechanisms, separate each mechanism with a space.</p>
<div class="paragraph">
<p>For a full list of supported Cyrus SASL authentication mechanisms, see <a href="https://www.cyrusimap.org/sasl/sasl/authentication_mechanisms.html" target="_blank" rel="noopener">Authentication Mechanisms</a>.</p>
</div>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect4">
<h5 id="adding-ssl-client-authentication-to-incoming-connection">Adding SSL/TLS Client Authentication to an Incoming Connection</h5>
<div class="paragraph">
<p>You can configure an incoming connection to authenticate the client using SSL/TLS.</p>
</div>
<div class="paragraph">
<p>The base SSL/TLS configuration provides content encryption and server authentication, which means that remote peers can verify the router&#8217;s identity, but the router cannot verify a peer&#8217;s identity.</p>
</div>
<div class="paragraph">
<p>However, you can require an incoming connection to use SSL/TLS client authentication, which means that remote peers must provide an additional certificate to the router during the SSL/TLS handshake. By using this certificate, the router can verify the client&#8217;s identity without using a username and password.</p>
</div>
<div class="paragraph">
<p>You can use SSL/TLS client authentication with or without SASL authentication.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In the router&#8217;s configuration, file, add the following attribute to the connection&#8217;s <code>listener</code> entity:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    ...
    authenticatePeer: yes
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>authenticatePeer</code></dt>
<dd>
<p>Set this attribute to <code>yes</code> to require the router to authenticate the identity of a remote peer before it can use this incoming connection.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect4">
<h5 id="adding-sasl-payload-encryption-to-incoming-connection">Adding SASL Payload Encryption to an Incoming Connection</h5>
<div class="paragraph">
<p>If you do not use SSL/TLS, you can still encrypt the incoming connection by using SASL payload encryption.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In the router&#8217;s configuration file, add the following attributes to the connection&#8217;s <code>listener</code> section:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    ...
    requireEncryption: yes
    saslMechanisms: <em>MECHANISMS</em>
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>requireEncryption</code></dt>
<dd>
<p>Set this attribute to <code>yes</code> to require the router to use SASL payload encryption for the connection.</p>
</dd>
<dt class="hdlist1"><code>saslMechanisms</code></dt>
<dd>
<p>The SASL mechanism to use. You can choose any of the Cyrus SASL authentication mechanisms. To specify multiple authentication mechanisms, separate each mechanism with a space.</p>
<div class="paragraph">
<p>For a full list of supported Cyrus SASL authentication mechanisms, see <a href="https://www.cyrusimap.org/sasl/sasl/authentication_mechanisms.html" target="_blank" rel="noopener">Authentication Mechanisms</a>.</p>
</div>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect3">
<h4 id="securing-outgoing-connections">6.1.4. Securing Outgoing Connections</h4>
<div class="paragraph">
<p>You can secure outgoing connections by configuring each connection&#8217;s <code>connector</code> entity for encryption, authentication, or both.</p>
</div>
<div class="paragraph">
<div class="title">Prerequisites</div>
<p>Before securing outgoing connections, the security protocols you plan to use should be set up.</p>
</div>
<div class="ulist">
<div class="title">Choices</div>
<ul>
<li>
<p><a href="#adding-ssl-authentication-to-outgoing-connection">Add SSL/TLS authentication</a></p>
</li>
<li>
<p><a href="#adding-sasl-authentication-to-outgoing-connection">Add SASL authentication</a></p>
</li>
</ul>
</div>
<div class="sect4">
<h5 id="adding-ssl-authentication-to-outgoing-connection">Adding SSL/TLS Client Authentication to an Outgoing Connection</h5>
<div class="paragraph">
<p>If an outgoing connection connects to an external client configured with mutual authentication, you should ensure that the outgoing connection is configured to provide the external client with a valid security certificate during the SSL/TLS handshake.</p>
</div>
<div class="paragraph">
<p>You can use SSL/TLS client authentication with or without SASL authentication.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In the router&#8217;s configuration file, add the <code>sslProfile</code> attribute to the connection&#8217;s <code>connector</code> entity:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    ...
    sslProfile: <em>SSL_PROFILE_NAME</em>
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>sslProfile</code></dt>
<dd>
<p>The name of the SSL/TLS profile you set up.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect4">
<h5 id="adding-sasl-authentication-to-outgoing-connection">Adding SASL Authentication to an Outgoing Connection</h5>
<div class="paragraph">
<p>You can configure an outgoing connection to provide authentication credentials to the external container. You can use SASL authentication with or without SSL/TLS encryption.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In the router&#8217;s configuration file, add the <code>saslMechanisms</code> attribute to the connection&#8217;s <code>connector</code> entity:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    ...
    saslMechanisms: <em>MECHANISMS</em>
    saslUsername: <em>USERNAME</em>
    saslPassword: <em>PASSWORD</em>
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>saslMechanisms</code></dt>
<dd>
<p>One or more SASL mechanisms to use to authenticate the router to the external container. You can choose any of the Cyrus SASL authentication mechanisms. To specify multiple authentication mechanisms, separate each mechanism with a space.</p>
<div class="paragraph">
<p>For a full list of supported Cyrus SASL authentication mechanisms, see <a href="https://www.cyrusimap.org/sasl/sasl/authentication_mechanisms.html" target="_blank" rel="noopener">Authentication Mechanisms</a>.</p>
</div>
</dd>
<dt class="hdlist1"><code>saslUsername</code></dt>
<dd>
<p>If any of the SASL mechanisms uses username/password authentication, then provide the username to connect to the external container.</p>
</dd>
<dt class="hdlist1"><code>saslPassword</code></dt>
<dd>
<p>If any of the SASL mechanisms uses username/password authentication, then provide the password to connect to the external container.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect3">
<h4 id="integrating-with-kerberos">6.1.5. Integrating with Kerberos</h4>
<div class="paragraph">
<p>By using the <code>GSSAPI</code> SASL mechanism, you can configure Dispatch Router to authenticate incoming connections using Kerberos.</p>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>A Kerberos infrastructure must be deployed in your environment.</p>
</li>
<li>
<p>In the Kerberos environment, a service principal of <code>amqp/<em>HOSTNAME</em>@<em>REALM</em></code> must be configured.</p>
<div class="paragraph">
<p>This is the service principal that Dispatch Router uses.</p>
</div>
</li>
<li>
<p>The <code>cyrus-sasl-gssapi</code> package must be installed on each client and router host machine.</p>
</li>
<li>
<p><a href="#setting-up-sasl-for-authentication-and-payload-encryption">SASL must be set up for Dispatch Router</a>.</p>
</li>
</ul>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>On the router&#8217;s host machine, open the <code>/etc/sasl2/qdrouterd.conf</code> configuration file.</p>
<div class="openblock">
<div class="content">
<div class="exampleblock">
<div class="title">Example 5. An <code>/etc/sasl2/qdrouterd.conf</code> Configuration File</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">pwcheck_method: auxprop
auxprop_plugin: sasldb
sasldb_path: qdrouterd.sasldb
keytab: /etc/krb5.keytab
mech_list: ANONYMOUS DIGEST-MD5 EXTERNAL PLAIN GSSAPI</pre>
</div>
</div>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Verify the following:</p>
<div class="ulist">
<ul>
<li>
<p>The <code>mech_list</code> attribute contains the <code>GSSAPI</code> mechanism.</p>
</li>
<li>
<p>The <code>keytab</code> attribute points to the location of the keytab file.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Open the router&#8217;s configuration file.</p>
</li>
<li>
<p>For each incoming connection that should use Kerberos for authentication, set the router&#8217;s <code>listener</code> to use the <code>GSSAPI</code> mechanism.</p>
<div class="openblock">
<div class="content">
<div class="exampleblock">
<div class="title">Example 6. A <code>listener</code> in the Router Configuration File</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">listener {
    ...
    authenticatePeer: yes
    saslMechanisms: GSSAPI
}</pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>For more information about these attributes, see <a href="#adding-sasl-authentication-to-incoming-connection">Adding SASL Authentication to an Incoming Connection</a>.</p>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect2">
<h3 id="authorizing_access_to_messaging_resources">6.2. Authorizing Access to Messaging Resources</h3>
<div class="paragraph">
<p>You can configure <em>policies</em> to secure messaging resources in your messaging environment. Policies ensure that only authorized users can access messaging endpoints through the router network, and that the resources on those endpoints are used in an authorized way.</p>
</div>
<div class="paragraph">
<p>Dispatch Router provides the following types of policies:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Global policies</dt>
<dd>
<p>Settings for the router. A global policy defines the maximum number of incoming user connections for the router (across all messaging endpoints), and defines how the router should use vhost policies.</p>
</dd>
<dt class="hdlist1">Vhost policies</dt>
<dd>
<p>Connection and AMQP resource limits for a messaging endpoint (called an AMQP virtual host, or vhost). A vhost policy defines what a client can access on a messaging endpoint over a particular connection.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>The resource limits defined in global and vhost policies are applied to user connections only. The limits do not affect inter-router connections or router connections that are outbound to waypoints.</p>
</div>
<div class="sect3">
<h4 id="how_dispatch_router_enforces_connection_and_resource_limits">6.2.1. How Dispatch Router Enforces Connection and Resource Limits</h4>
<div class="paragraph">
<p>Dispatch Router uses policies to determine whether to permit a connection, and if it is permitted, to apply the appropriate resource limits.</p>
</div>
<div class="paragraph">
<p>When a client creates a connection to the router, the router first determines whether to allow or deny the connection. This decision is based on the following criteria:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Whether the connection will exceed the router’s global connection limit (defined in the global policy)</p>
</li>
<li>
<p>Whether the connection will exceed the vhost’s connection limits (defined in the vhost policy that matches the host to which the connection is directed)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the connection is allowed, the router assigns the user (the authenticated user name from the connection) to a user group, and enforces the user group’s resource limits for the lifetime of the connection.</p>
</div>
</div>
<div class="sect3">
<h4 id="setting_global_connection_limits">6.2.2. Setting Global Connection Limits</h4>
<div class="paragraph">
<p>You can set the incoming connection limit for the router. This limit defines the total number of concurrent client connections that can be open for this router.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In the router configuration file, add a <code>policy</code> section and set the <code>maxConnections</code>.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">policy {
    maxConnections: 10000
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>maxConnections</code></dt>
<dd>
<p>This limit is always enforced, even if no other policy settings have been defined. The limit is applied to all incoming connections regardless of remote host, authenticated user, or targeted vhost. The default (and the maximum) value is <code>65535</code>.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="setting_connection_and_resource_limits_for_messaging_endpoints">6.2.3. Setting Connection and Resource Limits for Messaging Endpoints</h4>
<div class="paragraph">
<p>You can define the connection limit and AMQP resource limits for a messaging endpoint by configuring a <em>vhost policy</em>. Vhost policies define what resources clients are permitted to access on a messaging endpoint over a particular connection.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>A vhost is typically the name of the host to which the client connection is directed. For example, if a client application opens a connection to the <code>amqp://mybroker.example.com:5672/queue01</code> URL, the vhost would be <code>mybroker.example.com</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>You can create vhost policies using either of the following methods:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="#configuring-vhost-policies-router">Configure vhost policies directly in the router configuration file</a></p>
</li>
<li>
<p><a href="#configuring-vhost-policies-json">Configure vhost policies as JSON files</a></p>
</li>
</ul>
</div>
<div class="sect4">
<h5 id="enabling-vhost-policies">Enabling Vhost Policies</h5>
<div class="paragraph">
<p>You must enable the router to use vhost policies before you can create the policies.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>In the router configuration file, add a <code>policy</code> section if one does not exist, and enable vhost policies for the router.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">policy {
    ...
    enableVhostPolicy: true
    enableVhostNamePatterns: true | false
    defaultVhost: $default
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>enableVhostPolicy</code></dt>
<dd>
<p>Enables the router to enforce the connection denials and resource limits defined in the configured vhost policies. The default is <code>false</code>, which means that the router will not enforce any vhost policies.</p>
</dd>
<dt class="hdlist1"><code>enableVhostNamePatterns</code></dt>
<dd>
<p>Enables pattern matching for vhost hostnames. If set to <code>true</code>, you can use wildcards to specify a range of hostnames for a vhost. If set to <code>false</code>, vhost hostnames are treated as literal strings. This means that you must specify the exact hostname for each vhost. The default is <code>false</code>.</p>
</dd>
<dt class="hdlist1"><code>defaultVhost</code></dt>
<dd>
<p>The name of the default vhost policy, which is applied to any connection for which a vhost policy has not been configured. The default is <code>$default</code>. If <code>defaultVhost</code> is not defined, then default vhost processing is disabled.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect4">
<h5 id="configuring-vhost-policies-router">Configuring Vhost Policies in the Router Configuration File</h5>
<div class="paragraph">
<p>You can configure vhost policies in the router configuration file by configuring <code>vhost</code> entities. However, if multiple routers in your router network should be configured with the same vhost configuration, you will need to add the vhost configuration to each router’s configuration file.</p>
</div>
<div class="paragraph">
<div class="title">Prerequisites</div>
<p>Vhost policies must be enabled for the router. For more information, see <a href="#enabling-vhost-policies">Enabling Vhost Policies</a>.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>Add a <code>vhost</code> section and define the connection limits for the messaging endpoint.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>The connection limits apply to all users that are connected to the vhost. These limits control the number of users that can be connected simultaneously to the vhost.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">vhost {
    hostname: example.com
    maxConnections: 10000
    maxConnectionsPerUser: 100
    maxConnectionsPerHost: 100
    allowUnknownUser: true
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>hostname</code></dt>
<dd>
<p>The literal hostname of the vhost (the messaging endpoint) or a pattern that matches the vhost hostname. This vhost policy will be applied to any client connection that is directed to the hostname that you specify. This name must be unique; you can only have one vhost policy per hostname.</p>
<div class="paragraph">
<p>If <code>enableVhostNamePatterns</code> is set to <code>true</code>, you can use wildcards to specify a pattern that matches a range of hostnames. For more information, see <a href="#pattern-matching-vhost-policy-hostnames">Pattern Matching for Vhost Policy Hostnames</a>.</p>
</div>
</dd>
<dt class="hdlist1"><code>maxConnections</code></dt>
<dd>
<p>The global maximum number of concurrent client connections allowed for this vhost. The default is 65535.</p>
</dd>
<dt class="hdlist1"><code>maxConnectionsPerUser</code></dt>
<dd>
<p>The maximum number of concurrent client connections allowed for any user. The default is 65535.</p>
</dd>
<dt class="hdlist1"><code>maxConnectionsPerHost</code></dt>
<dd>
<p>The maximum number of concurrent client connections allowed for any remote host (the host from which the client is connecting). The default is 65535.</p>
</dd>
<dt class="hdlist1"><code>allowUnknownUser</code></dt>
<dd>
<p>Whether unknown users (users who are not members of a defined user group) are allowed to connect to the vhost. Unknown users are assigned to the $default user group and receive $default settings. The default is false, which means that unknown users are not allowed.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>In the <code>vhost</code> section, beneath the connection settings that you added, add a <code>groups</code> entity to define the resource limits.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>You define resource limits by user group. A user group specifies the messaging resources the members of the group are allowed to access.</p>
</div>
<div class="exampleblock">
<div class="title">Example 7. User Groups in a Vhost Policy</div>
<div class="content">
<div class="paragraph">
<p>This example shows three user groups: admin, developers, and $default:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">vhost {
    ...
    groups: {
        admin: {
            users: admin1, admin2
            remoteHosts: 127.0.0.1, ::1
            sources: *
            targets: *
        }
        developers: {
            users: dev1, dev2, dev3
            remoteHosts: *
            sources: myqueue1, myqueue2
            targets: myqueue1, myqueue2
        }
        $default: {
            remoteHosts: *
            allowDynamicSource: true,
            sources: myqueue1, myqueue2
            targets: myqueue1, myqueue2
        }
    }
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>users</code></dt>
<dd>
<p>A list of authenticated users for this user group. Use commas to separate multiple users. A user may belong to only one vhost user group.</p>
</dd>
<dt class="hdlist1"><code>remoteHosts</code></dt>
<dd>
<p>A list of remote hosts from which the users may connect. A host can be a hostname, IP address, or IP address range. Use commas to separate multiple hosts. To allow access from all remote hosts, specify a wildcard <code>*</code>. To deny access from all remote hosts, leave this attribute blank.</p>
</dd>
<dt class="hdlist1"><code>sources</code> | <code>sourcePattern</code></dt>
<dd>
<p>A list of AMQP source addresses from which users in this group may receive messages.</p>
<div class="paragraph">
<p>Use <code>sources</code> to specify one or more literal addresses. To specify multiple addresses, use a comma-separated list. To prevent users in this group from receiving messages from any addresses, leave this attribute blank. To allow access to an address specific to a particular user, specify the <code>${user}</code> token. For more information, see <a href="#methods-for-specifying-vhost-policy-source-target-addresses">Methods for Specifying Vhost Policy Source and Target Addresses</a>.</p>
</div>
<div class="paragraph">
<p>Alternatively, you can use <code>sourcePattern</code> to match one or more addresses that correspond to a pattern. A pattern is a sequence of words delimited by either a <code>.</code> or <code>/</code> character. You can use wildcard characters to represent a word. The  <code>*</code> character matches exactly one word, and the <code>#</code> character matches any sequence of zero or more words.</p>
</div>
<div class="paragraph">
<p>To specify multiple address ranges, use a comma-separated list of address patterns. For more information, see <a href="#router-address-pattern-matching">Router Address Pattern Matching</a>. To allow access to address ranges that are specific to a particular user, specify the <code>${user}</code> token. For more information, see <a href="#methods-for-specifying-vhost-policy-source-target-addresses">Methods for Specifying Vhost Policy Source and Target Addresses</a>.</p>
</div>
</dd>
<dt class="hdlist1"><code>targets</code> | <code>targetPattern</code></dt>
<dd>
<p>A list of AMQP target addresses from which users in this group may send messages. You can specify multiple AMQP addresses and use user name substitution and address patterns the same way as with source addresses.</p>
</dd>
</dl>
</div>
</div>
</div>
</div>
</div>
</li>
<li>
<p>If necessary, add any advanced user group settings to the vhost user groups.</p>
<div class="paragraph">
<p>The advanced user group settings enable you to define resource limits based on the AMQP connection open, session begin, and link attach phases of the connection. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_vhost" target="_blank" rel="noopener">vhost</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="configuring-vhost-policies-json">Configuring Vhost Policies as JSON Files</h5>
<div class="paragraph">
<p>As an alternative to using the router configuration file, you can configure vhost policies in JSON files. If you have multiple routers that need to share the same vhost configuration, you can put the vhost configuration JSON files in a location accessible to each router, and then configure the routers to apply the vhost policies defined in these JSON files.</p>
</div>
<div class="ulist">
<div class="title">Prerequisites</div>
<ul>
<li>
<p>Vhost policies must be enabled for the router. For more information, see <a href="#enabling-vhost-policies">Enabling Vhost Policies</a>.</p>
</li>
</ul>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>In the router configuration file, specify the directory where you want to store the vhost policy definition JSON files.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">policy {
    ...
    policyDir: <em>DIRECTORY_PATH</em>
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>policyDir</code></dt>
<dd>
<p>The absolute path to the directory that holds vhost policy definition files in JSON format. The router processes all of the vhost policies in each JSON file that is in this directory.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
<li>
<p>In the vhost policy definition directory, create a JSON file for each vhost policy.</p>
<div class="openblock">
<div class="content">
<div class="exampleblock">
<div class="title">Example 8. Vhost Policy Definition JSON File</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-json hljs" data-lang="json">[
    ["vhost", {
        "hostname": "example.com",
        "maxConnections": 10000,
        "maxConnectionsPerUser": 100,
        "maxConnectionsPerHost": 100,
        "allowUnknownUser": true,
        "groups": {
            "admin": {
                "users": ["admin1", "admin2"],
                "remoteHosts": ["127.0.0.1", "::1"],
                "sources": "*",
                "targets": "*"
            },
            "developers": {
                "users": ["dev1", "dev2", "dev3"],
                "remoteHosts": "*",
                "sources": ["myqueue1", "myqueue2"],
                "targets": ["myqueue1", "myqueue2"]
            },
            "$default": {
                "remoteHosts": "*",
                "allowDynamicSource": true,
                "sources": ["myqueue1", "myqueue2"],
                "targets": ["myqueue1", "myqueue2"]
            }
        }
    }]
]</code></pre>
</div>
</div>
<div class="paragraph">
<p>For more information about these attributes, see <a href="#configuring-vhost-policies-router">Configuring Vhost Policies in the Router Configuration File</a>.</p>
</div>
</div>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="methods-for-specifying-vhost-policy-source-target-addresses">Methods for Specifying Vhost Policy Source and Target Addresses</h5>
<div class="paragraph">
<p>If you want to allow or deny access to multiple addresses on a vhost, there are several methods you can use to match multiple addresses without having to specify each address individually.</p>
</div>
<div class="paragraph">
<p>The following table describes the methods you can use to specify multiple source and target addresses for a vhost:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 33%;">
<col style="width: 67%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Do this&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Allow all users in the user group to access all source or target addresses on the vhost</p></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Use a <code>*</code> wildcard character.</p>
</div>
<div class="exampleblock">
<div class="title">Example 9. Receive from Any Address</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code>sources: *</code></pre>
</div>
</div>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Prevent all users in the user group from accessing all source or target addresses on the vhost</p></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Do not specify a value.</p>
</div>
<div class="exampleblock">
<div class="title">Example 10. Prohibit Message Transfers to All Addresses</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code>targets:</code></pre>
</div>
</div>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Allow access to some resources specific to each user</p></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Use the <code>${user}</code> username substitution token. You can use this token with <code>source</code>, <code>target</code>, <code>sourcePattern</code>, and <code>targetPattern</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>You can only specify the <code>${user}</code> token once in an AMQP address name or pattern. If there are multiple tokens in an address, only the leftmost token will be substituted.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="exampleblock">
<div class="title">Example 11. Receive from a User-Specific Address</div>
<div class="content">
<div class="paragraph">
<p>This definition allows the users in the user group to receive messages from any address that meets any of the following rules:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Starts with the prefix <code>tmp_</code> and ends with the user name</p>
</li>
<li>
<p>Starts with the prefix <code>temp</code> followed by any additional characters</p>
</li>
<li>
<p>Starts with the user name, is followed by <code>-home-</code>, and ends with any additional characters</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre>sources: tmp_${user}, temp*, ${user}-home-*</pre>
</div>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 12. User-Specific Address Patterns</div>
<div class="content">
<div class="paragraph">
<p>This definition allows the users in the user group to receive messages from any address that meets any of the following rules:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Starts with the prefix <code>tmp</code> and ends with the user name</p>
</li>
<li>
<p>Starts with the prefix <code>temp</code> followed by zero or more additional characters</p>
</li>
<li>
<p>Starts with the user name, is followed by <code>home</code>, and ends with one or more additional characters</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre>sourcePattern: tmp.${user}, temp/#, ${user}.home/*</pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>In an address pattern (<code>sourcePattern</code> or <code>targetPattern</code>), the username substitution token must be either the first or last token in the pattern. The token must also be alone within its delimited field, which means that it cannot be concatenated with literal text prefixes or suffixes.</p>
</div>
</td>
</tr>
</table>
</div></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sect4">
<h5 id="vhost_policy_examples">Vhost Policy Examples</h5>
<div class="paragraph">
<p>These examples demonstrate how to use vhost policies to authorize access to messaging resources.</p>
</div>
<div class="exampleblock">
<div class="title">Example 13. Defining Basic Resource Limits for a Messaging Endpoint</div>
<div class="content">
<div class="paragraph">
<p>In this example, a vhost policy defines resource limits for clients connecting to the <code>example.com</code> host.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-json hljs" data-lang="json">[
    ["vhost", {
        "hostname": "example.com",  <b class="conum">(1)</b>
        "maxConnectionsPerUser": 10,  <b class="conum">(2)</b>
        "allowUnknownUser": true,  <b class="conum">(3)</b>
        "groups": {
            "admin": {
                "users": ["admin1", "admin2"],  <b class="conum">(4)</b>
                "remoteHosts": ["127.0.0.1", "::1"],  <b class="conum">(5)</b>
                "sources": "*",  <b class="conum">(6)</b>
                "targets": "*"  <b class="conum">(7)</b>
            },
            "$default": {
                "remoteHosts": "*",  <b class="conum">(8)</b>
                "sources": ["news*", "sports*" "chat*"],  <b class="conum">(9)</b>
                "targets": "chat*"  <b class="conum">(10)</b>
            }
        }
    }]
]</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The rules defined in this vhost policy will be applied to any user connecting to <code>example.com</code>.</p>
</li>
<li>
<p>Each user can open up to 10 connections to the vhost.</p>
</li>
<li>
<p>Any user can connect to this vhost. Users that are not part of the <code>admin</code> group are assigned to the <code>$default</code> group.</p>
</li>
<li>
<p>If the <code>admin1</code> or <code>admin2</code> user connects to the vhost, they are assigned to the <code>admin</code> user group.</p>
</li>
<li>
<p>Users in the <code>admin</code> user group must connect from localhost. If the admin user attempts to connect from any other host, the connection will be denied.</p>
</li>
<li>
<p>Users in the admin user group can receive from any address offered by the vhost.</p>
</li>
<li>
<p>Users in the admin user group can send to any address offered by the vhost.</p>
</li>
<li>
<p>Any non-admin user is permitted to connect from any host.</p>
</li>
<li>
<p>Non-admin users are permitted to receive messages from any addresses that start with the <code>news</code>, <code>sports</code>, or <code>chat</code> prefixes.</p>
</li>
<li>
<p>Non-admin users are permitted to send messages to any addresses that start with the <code>chat</code> prefix.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 14. Limiting Memory Consumption</div>
<div class="content">
<div class="paragraph">
<p>By using the advanced vhost policy attributes, you can control how much system buffer memory a user connection can potentially consume.</p>
</div>
<div class="paragraph">
<p>In this example, a stock trading site provides services for stock traders. However, the site must also accept high-capacity, automated data feeds from stock exchanges. To prevent trading activity from consuming memory needed for the feeds, a larger amount of system buffer memory is allotted to the feeds than to the traders.</p>
</div>
<div class="paragraph">
<p>This example uses the <code>maxSessions</code> and <code>maxSessionWindow</code> attributes to set the buffer memory consumption limits for each AMQP session. These settings are passed directly to the AMQP connection and session negotiations, and do not require any processing cycles on the router.</p>
</div>
<div class="paragraph">
<p>This example does not show the vhost policy settings that are unrelated to buffer allocation.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight nowrap"><code class="language-json hljs" data-lang="json">[
    ["vhost", {
        "hostname": "traders.com",  <b class="conum">(1)</b>
        "groups": {
            "traders": {
                "users": ["trader1", "trader2"],  <b class="conum">(2)</b>
                "maxFrameSize": 10000,
                "maxSessionWindow": 5000000,  <b class="conum">(3)</b>
                "maxSessions": 1  <b class="conum">(4)</b>
            },
            "feeds": {
                "users": ["nyse-feed", "nasdaq-feed"],  <b class="conum">(5)</b>
                "maxFrameSize": 60000,
                "maxSessionWindow": 1200000000,  <b class="conum">(6)</b>
                "maxSessions": 3  <b class="conum">(7)</b>
            }
        }
    }]
]</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The rules defined in this vhost policy will be applied to any user connecting to <code>traders.com</code>.</p>
</li>
<li>
<p>The <code>traders</code> group includes <code>trader1</code>, <code>trader2</code>, and any other user defined in the list.</p>
</li>
<li>
<p>At most, 5,000,000 bytes of data can be in flight on each session.</p>
</li>
<li>
<p>Only one session per connection is allowed.</p>
</li>
<li>
<p>The <code>feeds</code> group includes two users.</p>
</li>
<li>
<p>At most, 1,200,000,000 bytes of data can be in flight on each session.</p>
</li>
<li>
<p>Up to three sessions per connection are allowed.</p>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="routing">7. Routing</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Routing is the process by which messages are delivered to their destinations. To accomplish this, Dispatch Router provides two routing mechanisms: <em>message routing</em> and <em>link routing</em>.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Message routing</dt>
<dd>
<p>Routing is performed on messages as producers send them to a router. When a message arrives on a router, the router routes the message and its <em>settlement</em> based on the message&#8217;s <em>address</em> and <em>routing pattern</em>.</p>
<div class="openblock">
<div class="content">
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/message-routing.png" alt="Message Routing">
</div>
<div class="title">Figure 2. Message Routing</div>
</div>
<div class="paragraph">
<p>In this diagram, the message producer attaches a link to the router, and then sends a message over the link. When the router receives the message, it identifies the message&#8217;s destination based on the message&#8217;s address, and then uses its routing table to determine the best route to deliver the message either to its destination or to the next hop in the route. All dispositions (including settlement) are propagated along the same path that the original message transfer took. Flow control is handled between the sender and the router, and then between the router and the receiver.</p>
</div>
</div>
</div>
</dd>
<dt class="hdlist1">Link routing</dt>
<dd>
<p>Routing is performed on link-attach frames, which are chained together to form a virtual messaging path that directly connects a sender and receiver. Once a link route is established, the transfer of message deliveries, flow frames, and dispositions is performed across the link route.</p>
<div class="openblock">
<div class="content">
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/link-routing.png" alt="Link Routing">
</div>
<div class="title">Figure 3. Link Routing</div>
</div>
<div class="paragraph">
<p>In this diagram, a router is connected to clients and to a broker, and it provides a link route to a queue on the broker (my_queue). The sender connects to the router, and the router propagates the link-attaches to the broker to form a direct link between the sender and the broker. The sender can begin sending messages to the queue, and the router passes the deliveries along the link route directly to the broker queue.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div class="sect2">
<h3 id="comparison_of_message_routing_and_link_routing">7.1. Comparison of Message Routing and Link Routing</h3>
<div class="paragraph">
<p>While you can use either message routing or link routing to deliver messages to a destination, they differ in several important ways. Understanding these differences will enable you to choose the proper routing approach for any particular use case.</p>
</div>
<div class="sect3">
<h4 id="when_to_use_message_routing">7.1.1. When to Use Message Routing</h4>
<div class="paragraph">
<p>Message routing is the default routing mechanism. You can use it to route messages on a per-message basis between clients directly (direct-routed messaging), or to and from broker queues (brokered messaging).</p>
</div>
<div class="paragraph">
<p>Message routing is best suited to the following requirements:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Default, basic message routing.</p>
<div class="paragraph">
<p>Dispatch Router automatically routes messages by default, so manual configuration is only required if you want routing behavior that is different than the default.</p>
</div>
</li>
<li>
<p>Message-based routing patterns.</p>
<div class="paragraph">
<p>Message routing supports both anycast and multicast routing patterns. You can load-balance individual messages across multiple consumers, and multicast (or fan-out) messages to multiple subscribers.</p>
</div>
</li>
<li>
<p>Sharding messages across multiple broker instances when message delivery order is not important.</p>
<div class="paragraph">
<p>Sharding messages from one producer might cause that producer&#8217;s messages to be received in a different order than the order in which they were sent.</p>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Message routing is not suitable for any of the following requirements:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Dedicated path through the router network.</p>
<div class="paragraph">
<p>For inter-router transfers, all message deliveries are placed on the same inter-router link. This means that the traffic for one address might affect the delivery of the traffic for another address.</p>
</div>
</li>
<li>
<p>Granular, end-to-end flow control.</p>
<div class="paragraph">
<p>With message routing, end-to-end flow control is based on the settlement of deliveries and therefore might not be optimal in every case.</p>
</div>
</li>
<li>
<p>Transaction support.</p>
</li>
<li>
<p>Server-side selectors.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="when_to_use_link_routing">7.1.2. When to Use Link Routing</h4>
<div class="paragraph">
<p>Link routing requires more detailed configuration than message routing as well as an AMQP container that can accept incoming link-attaches (typically a broker). However, link routing enables you to satisfy more advanced use cases than message routing.</p>
</div>
<div class="paragraph">
<p>You can use link routing if you need to meet any of the following requirements:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Dedicated path through the router network.</p>
<div class="paragraph">
<p>With link routing, each link route has dedicated inter-router links through the network. Each link has its own dedicated message buffers, which means that the address will not have "head-of-line" blocking issues with other addresses.</p>
</div>
</li>
<li>
<p>Sharding messages across multiple broker instances with guaranteed delivery order.</p>
<div class="paragraph">
<p>Link routing to a sharded queue preserves the delivery order of the producer&#8217;s messages by causing all messages on that link to go to the same broker instance.</p>
</div>
</li>
<li>
<p>End-to-end flow control.</p>
<div class="paragraph">
<p>Flow control is "real" in that credits flow across the link route from the receiver to the sender.</p>
</div>
</li>
<li>
<p>Transaction support.</p>
<div class="paragraph">
<p>Link routing supports local transactions to a single broker. Distributed transactions are not supported.</p>
</div>
</li>
<li>
<p>Server-side selectors.</p>
<div class="paragraph">
<p>With a link route, consumers can provide server-side selectors for broker subscriptions.</p>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="configuring_message_routing">7.2. Configuring Message Routing</h3>
<div class="paragraph">
<p>With message routing, routing is performed on messages as producers send them to a router. When a message arrives on a router, the router routes the message and its <em>settlement</em> based on the message&#8217;s <em>address</em> and <em>routing pattern</em>.</p>
</div>
<div class="paragraph">
<p>With message routing, you can do the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Route messages between clients (direct-routed, or brokerless messaging)</p>
<div class="paragraph">
<p>This involves configuring an address with a routing pattern. All messages sent to the address will be routed based on the routing pattern.</p>
</div>
</li>
<li>
<p>Route messages through a broker queue (brokered messaging)</p>
<div class="paragraph">
<p>This involves configuring a waypoint address to identify the broker queue and then connecting the router to the broker. All messages sent to the waypoint address will be routed to the broker queue.</p>
</div>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="addresses_2">7.2.1. Addresses</h4>
<div class="paragraph">
<p>Addresses determine how messages flow through your router network. An address designates an endpoint in your messaging network, such as:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Endpoint processes that consume data or offer a service</p>
</li>
<li>
<p>Topics that match multiple consumers to multiple producers</p>
</li>
<li>
<p>Entities within a messaging broker:</p>
<div class="ulist">
<ul>
<li>
<p>Queues</p>
</li>
<li>
<p>Durable Topics</p>
</li>
<li>
<p>Exchanges</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>When a router receives a message, it uses the message&#8217;s address to determine where to send the message (either its destination or one step closer to its destination).</p>
</div>
</div>
<div class="sect3">
<h4 id="routing-patterns-overview">7.2.2. Routing Patterns</h4>
<div class="paragraph">
<p>Each address has one of the following routing patterns, which define the path that a message with the address can take across the messaging network:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Balanced</dt>
<dd>
<p>An anycast method that allows multiple consumers to use the same address. Each message is delivered to a single consumer only, and Dispatch Router attempts to balance the traffic load across the router network.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>If multiple consumers are attached to the same address, each router determines which outbound path should receive a message by considering each path&#8217;s current number of unsettled deliveries. This means that more messages will be delivered along paths where deliveries are settled at higher rates.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Dispatch Router neither measures nor uses message settlement time to determine which outbound path to use.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>In this scenario, the messages are spread across both receivers regardless of path length:</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/balanced-routing.png" alt="Balanced Message Routing">
</div>
<div class="title">Figure 4. Balanced Message Routing</div>
</div>
</div>
</div>
</dd>
<dt class="hdlist1">Closest</dt>
<dd>
<p>An anycast method in which every message is sent along the shortest path to reach the destination, even if there are other consumers for the same address.</p>
<div class="paragraph">
<p>Dispatch Router determines the shortest path based on the topology cost to reach each of the consumers. If there are multiple consumers with the same lowest cost, messages will be spread evenly among those consumers.</p>
</div>
<div class="paragraph">
<p>In this scenario, all messages sent by <code>Sender</code> will be delivered to <code>Receiver 1</code>:</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/closest-routing.png" alt="Closest Message Routing">
</div>
<div class="title">Figure 5. Closest Message Routing</div>
</div>
</dd>
<dt class="hdlist1">Multicast</dt>
<dd>
<p>Messages are sent to all consumers attached to the address. Each consumer will receive one copy of the message.</p>
<div class="paragraph">
<p>In this scenario, all messages are sent to all receivers:</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/multicast-routing.png" alt="Multicast Message Routing">
</div>
<div class="title">Figure 6. Multicast Message Routing</div>
</div>
</dd>
</dl>
</div>
</div>
<div class="sect3">
<h4 id="message_settlement_2">7.2.3. Message Settlement</h4>
<div class="paragraph">
<p>Message settlement is negotiated between the producer and the router when the producer establishes a link to the router. Depending on the settlement pattern, messages might be delivered with any of the following degrees of reliability:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>At most once</p>
</li>
<li>
<p>At least once</p>
</li>
<li>
<p>Exactly once</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Dispatch Router treats all messages as either <em>pre-settled</em> or <em>unsettled</em>, and it is responsible for propagating the settlement of each message it routes.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Pre-settled</dt>
<dd>
<p>Sometimes called <em>fire and forget</em>, the router settles the incoming and outgoing deliveries and propagates the settlement to the message&#8217;s destination. However, it does not guarantee delivery.</p>
</dd>
<dt class="hdlist1">Unsettled</dt>
<dd>
<p>The router propagates the settlement between the sender and receiver, and guarantees one of the following outcomes:</p>
<div class="ulist">
<ul>
<li>
<p>The message is delivered and settled, with the consumer&#8217;s disposition indicated.</p>
</li>
<li>
<p>The delivery is settled with a disposition of <code>RELEASED</code>.</p>
<div class="paragraph">
<p>This means that the message did not reach its destination.</p>
</div>
</li>
<li>
<p>The delivery is settled with a disposition of <code>MODIFIED</code>.</p>
<div class="paragraph">
<p>This means that the message might or might not have reached its destination. The delivery is considered to be "in-doubt" and should be re-sent if "at least once" delivery is required.</p>
</div>
</li>
<li>
<p>The link, session, or connection to Dispatch Router was dropped, and all deliveries are "in-doubt".</p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</div>
<div class="sect3">
<h4 id="routing-messages-between-clients">7.2.4. Routing Messages Between Clients</h4>
<div class="paragraph">
<p>You can route messages between clients without using a broker. In a brokerless scenario (sometimes called <em>direct-routed messaging</em>), Dispatch Router routes messages between clients directly.</p>
</div>
<div class="paragraph">
<p>To route messages between clients, you configure an address with a routing distribution pattern. When a router receives a message with this address, the message is routed to its destination or destinations based on the address&#8217;s routing distribution pattern.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>In the router&#8217;s configuration file, add an <code>address</code> section:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">address {
    prefix: <em>ADDRESS_PREFIX</em>
    distribution: balanced|closest|multicast
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>prefix</code> | <code>pattern</code></dt>
<dd>
<p>The address or group of addresses to which the address settings should be applied. You can specify a prefix to match an exact address or beginning segment of an address. Alternatively, you can specify a pattern to match an address using wildcards.</p>
<div class="paragraph">
<p>A <em>prefix</em> matches either an exact address or the beginning segment within an address that is delimited by either a <code>.</code> or <code>/</code> character. For example, the prefix <code>my_address</code> would match the address <code>my_address</code> as well as <code>my_address.1</code> and <code>my_address/1</code>. However, it would not match <code>my_address1</code>.</p>
</div>
<div class="paragraph">
<p>A <em>pattern</em> matches an address that corresponds to a pattern. A pattern is a sequence of words delimited by either a <code>.</code> or <code>/</code> character. You can use wildcard characters to represent a word. The  <code>*</code> character matches exactly one word, and the <code>#</code> character matches any sequence of zero or more words.</p>
</div>
<div class="paragraph">
<p>The <code>*</code> and <code>#</code> characters are reserved as wildcards. Therefore, you should not use them in the message address.</p>
</div>
<div class="paragraph">
<p>For more information about creating address patterns, see <a href="#router-address-pattern-matching">Pattern Matching for Addresses</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>You can convert a <code>prefix</code> value to a <code>pattern</code> by appending <code>/#</code> to it. For example, the prefix <code>a/b/c</code> is equivalent to the pattern <code>a/b/c/#</code>.</p>
</div>
</td>
</tr>
</table>
</div>
</dd>
<dt class="hdlist1"><code>distribution</code></dt>
<dd>
<p>The message distribution pattern. The default is <code>balanced</code>, but you can specify any of the following options:</p>
<div class="ulist">
<ul>
<li>
<p><code>balanced</code> - Messages sent to the address will be routed to one of the receivers, and the routing network will attempt to balance the traffic load based on the rate of settlement.</p>
</li>
<li>
<p><code>closest</code> - Messages sent to the address are sent on the shortest path to reach the destination. It means that if there are multiple receivers for the same address, only the closest one will receive the message.</p>
</li>
<li>
<p><code>multicast</code> - Messages are sent to all receivers that are attached to the address in a <em>publish/subscribe</em> model.</p>
<div class="paragraph">
<p>For more information about message distribution patterns, see <a href="#routing-patterns-overview">Routing Patterns</a>.</p>
</div>
</li>
</ul>
</div>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_address">address</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>Add the same <code>address</code> section to any other routers that need to use the address.</p>
<div class="paragraph">
<p>The <code>address</code> that you added to this router configuration file only controls how this router distributes messages sent to the address. If you have additional routers in your router network that should distribute messages for this address, then you must add the same <code>address</code> section to each of their configuration files.</p>
</div>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="routing-messages-through-broker">7.2.5. Routing Messages Through a Broker Queue</h4>
<div class="paragraph">
<p>You can route messages to and from a broker queue to provide clients with access to the queue through a router. In this scenario, clients connect to a router to send and receive messages, and the router routes the messages to or from the broker queue.</p>
</div>
<div class="paragraph">
<p>You can route messages to a queue hosted on a single broker, or route messages to a <em>sharded queue</em> distributed across multiple brokers.</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/brokered-messaging.png" alt="Brokered Messaging">
</div>
<div class="title">Figure 7. Brokered Messaging</div>
</div>
<div class="paragraph">
<p>In this diagram, the sender connects to the router and sends messages to my_queue. The router attaches an outgoing link to the broker, and then sends the messages to my_queue. Later, the receiver connects to the router and requests messages from my_queue. The router attaches an incoming link to the broker to receive the messages from my_queue, and then delivers them to the receiver.</p>
</div>
<div class="paragraph">
<p>You can also route messages to a <em>sharded queue</em>, which is a single, logical queue comprised of multiple, underlying physical queues. Using queue sharding, it is possible to distribute a single queue over multiple brokers. Clients can connect to any of the brokers that hold a shard to send and receive messages.</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/sharded-queue-02.png" alt="Brokered Messaging with Sharded Queue">
</div>
<div class="title">Figure 8. Brokered Messaging with Sharded Queue</div>
</div>
<div class="paragraph">
<p>In this diagram, a sharded queue (my_queue) is distributed across two brokers. The router is connected to the clients and to both brokers. The sender connects to the router and sends messages to my_queue. The router attaches an outgoing link to each broker, and then sends messages to each shard (by default, the routing distribution is <code>balanced</code>). Later, the receiver connects to the router and requests all of the messages from my_queue. The router attaches an incoming link to one of the brokers to receive the messages from my_queue, and then delivers them to the receiver.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p><a href="#configure-waypoint-address">Add a waypoint address</a>.</p>
<div class="paragraph">
<p>This address identifies the queue to which you want to route messages.</p>
</div>
</li>
<li>
<p><a href="#connect-router-to-broker">Add autolinks to connect the router to the broker</a>.</p>
<div class="paragraph">
<p>Autolinks connect the router to the broker queue identified by the waypoint address.</p>
</div>
</li>
<li>
<p><a href="#connect-router-to-broker">If the queue is sharded, add autolinks for each additional broker that hosts a shard</a>.</p>
</li>
</ol>
</div>
<div class="sect4">
<h5 id="configure-waypoint-address">Configuring Waypoint Addresses</h5>
<div class="paragraph">
<p>A waypoint address identifies a queue on a broker to which you want to route messages. You need to configure the waypoint address on each router that needs to use the address. For example, if a client is connected to <em>Router A</em> to send messages to the broker queue, and another client is connected to <em>Router B</em> to receive those messages, then you would need to configure the waypoint address on both <em>Router A</em> and <em>Router B</em>.</p>
</div>
<div class="paragraph">
<div class="title">Prerequisites</div>
<p>An incoming connection (<code>listener</code>) to which the clients can connect should be configured. This connection defines how the producers and consumers connect to the router to send and receive messages. For more information, see <a href="#adding-incoming-connections">Adding Incoming Connections</a>.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Create waypoint addresses on each router that needs to use the address:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">address {
    prefix: <em>ADDRESS_PREFIX</em>
    waypoint: yes
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>prefix</code> | <code>pattern</code></dt>
<dd>
<p>The address prefix or pattern that matches the broker queue to which you want to send messages. You can specify a prefix to match an exact address or beginning segment of an address. Alternatively, you can specify a pattern to match an address using wildcards.</p>
<div class="paragraph">
<p>A <em>prefix</em> matches either an exact address or the beginning segment within an address that is delimited by either a <code>.</code> or <code>/</code> character. For example, the prefix <code>my_address</code> would match the address <code>my_address</code> as well as <code>my_address.1</code> and <code>my_address/1</code>. However, it would not match <code>my_address1</code>.</p>
</div>
<div class="paragraph">
<p>A <em>pattern</em> matches an address that corresponds to a pattern. A pattern is a sequence of words delimited by either a <code>.</code> or <code>/</code> character. You can use wildcard characters to represent a word. The  <code>*</code> character matches exactly one word, and the <code>#</code> character matches any sequence of zero or more words.</p>
</div>
<div class="paragraph">
<p>The <code>*</code> and <code>#</code> characters are reserved as wildcards. Therefore, you should not use them in the message address.</p>
</div>
<div class="paragraph">
<p>For more information about creating address patterns, see <a href="#router-address-pattern-matching">Pattern Matching for Addresses</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>You can convert a <code>prefix</code> value to a <code>pattern</code> by appending <code>/#</code> to it. For example, the prefix <code>a/b/c</code> is equivalent to the pattern <code>a/b/c/#</code>.</p>
</div>
</td>
</tr>
</table>
</div>
</dd>
<dt class="hdlist1"><code>waypoint</code></dt>
<dd>
<p>Set this attribute to <code>yes</code> so that the router handles messages sent to this address as a waypoint.</p>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect4">
<h5 id="connect-router-to-broker">Connecting a Router to the Broker</h5>
<div class="paragraph">
<p>After you add waypoint addresses to identify the broker queue, you must connect a router to the broker using autolinks.</p>
</div>
<div class="paragraph">
<p>With autolinks, client traffic is handled on the router, not the broker. Clients attach their links to the router, and then the router uses internal autolinks to connect to the queue on the broker. Therefore, the queue will always have a single producer and a single consumer regardless of how many clients are attached to the router.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>If the connection to the broker fails, Dispatch Router automatically attempts to reestablish the connection and reroute message deliveries to any available alternate destinations. However, some deliveries could be returned to the sender with a <code>RELEASED</code> or <code>MODIFIED</code> disposition. Therefore, you should ensure that your clients can handle these deliveries appropriately (generally by resending them).</p>
</div>
</td>
</tr>
</table>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>If this router is different than the router that is connected to the clients, then add the waypoint address.</p>
</li>
<li>
<p>Add an outgoing connection to the broker:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    name: <em>NAME</em>
    host: <em>HOST_NAME/ADDRESS</em>
    port: <em>PORT_NUMBER/NAME</em>
    role: route-container
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>name</code></dt>
<dd>
<p>The name of the <code>connector</code>. Specify a name that describes the broker.</p>
</dd>
<dt class="hdlist1"><code>host</code></dt>
<dd>
<p>Either an IP address (IPv4 or IPv6) or hostname on which the router should connect to the broker.</p>
</dd>
<dt class="hdlist1"><code>port</code></dt>
<dd>
<p>The port number or symbolic service name on which the router should connect to the broker.</p>
</dd>
<dt class="hdlist1"><code>role</code></dt>
<dd>
<p>Specify <code>route-container</code> to indicate that this connection is for an external container (broker).</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_connector">connector</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>If you want to send messages to the broker queue, create an outgoing autolink to the broker queue:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">autoLink {
    addr: <em>ADDRESS</em>
    connection: <em>CONNECTOR_NAME</em>
    direction: out
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>addr</code></dt>
<dd>
<p>The address of the broker queue. When the autolink is created, it will be attached to this address.</p>
</dd>
<dt class="hdlist1"><code>externalAddr</code></dt>
<dd>
<p>An optional alternate address for the broker queue. You use an external address if the broker queue should have a different address than that which the sender uses. In this scenario, senders send messages to the <code>addr</code> address, and then the router routes them to the broker queue represented by the <code>externalAddr</code> address.</p>
</dd>
<dt class="hdlist1"><code>connection</code> | <code>containerID</code></dt>
<dd>
<p>How the router should connect to the broker. You can specify either an outgoing connection (<code>connection</code>) or the container ID of the broker (<code>containerID</code>).</p>
</dd>
<dt class="hdlist1"><code>direction</code></dt>
<dd>
<p>Set this attribute to <code>out</code> to specify that this autolink can send messages from the router to the broker.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_autolink">autoLink</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>If you want to receive messages from the broker queue, create an incoming autolink from the broker queue:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">autoLink {
    addr: <em>ADDRESS</em>
    connection: <em>CONNECTOR_NAME</em>
    direction: in
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>addr</code></dt>
<dd>
<p>The address of the broker queue. When the autolink is created, it will be attached to this address.</p>
</dd>
<dt class="hdlist1"><code>externalAddr</code></dt>
<dd>
<p>An optional alternate address for the broker queue. You use an external address if the broker queue should have a different address than that which the receiver uses. In this scenario, receivers receive messages from the <code>addr</code> address, and the router retrieves them from the broker queue represented by the <code>externalAddr</code> address.</p>
</dd>
<dt class="hdlist1"><code>connection</code> | <code>containerID</code></dt>
<dd>
<p>How the router should connect to the broker. You can specify either an outgoing connection (<code>connection</code>) or the container ID of the broker (<code>containerID</code>).</p>
</dd>
<dt class="hdlist1"><code>direction</code></dt>
<dd>
<p>Set this attribute to <code>in</code> to specify that this autolink can receive messages from the broker to the router.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_autolink">autoLink</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect3">
<h4 id="example_routing_messages_through_broker_queues">7.2.6. Example: Routing Messages Through Broker Queues</h4>
<div class="paragraph">
<p>This example shows how waypoints and autolinks can route messages through a pair of queues on a broker.</p>
</div>
<div class="sect4">
<h5 id="router_configuration">Router Configuration</h5>
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {  <b class="conum">(1)</b>
    name: broker
    role: route-container
    host: 198.51.100.1
    port: 61617
    saslMechanisms: ANONYMOUS
}

address {  <b class="conum">(2)</b>
    prefix: queue
    waypoint: yes
}

autoLink {  <b class="conum">(3)</b>
    addr: queue.first
    direction: in
    connection: broker
}

autoLink {  <b class="conum">(4)</b>
    addr: queue.first
    direction: out
    connection: broker
}

autoLink {  <b class="conum">(5)</b>
    addr: queue.second
    direction: in
    connection: broker
}

autoLink {  <b class="conum">(6)</b>
    addr: queue.second
    direction: out
    connection: broker
}</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The outgoing connection from the router to the broker. The <code>route-container</code> role enables the router to connect to an external AMQP container (in this case, a broker).</p>
</li>
<li>
<p>The namespace queue on the broker to which the router should route messages. All addresses that start with <code>queue</code> will be routed to a queue on the broker.</p>
</li>
<li>
<p>The incoming autolink from <code>queue.first</code> on the broker to the router.</p>
</li>
<li>
<p>The outgoing autolink from the router to <code>queue.first</code> on the broker.</p>
</li>
<li>
<p>The incoming autolink from <code>queue.second</code> on the broker to the router.</p>
</li>
<li>
<p>The outgoing autolink from the router to <code>queue.second</code> on the broker.</p>
</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="how_the_messages_are_routed">How the Messages are Routed</h5>
<div class="paragraph">
<p>Initially, when the broker is offline, the autolinks are inactive.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --autolinks
AutoLinks
  addr          dir  phs  extAddr  link  status    lastErr
  ========================================================
  queue.first   in   1                   inactive
  queue.first   out  0                   inactive
  queue.second  in   1                   inactive
  queue.second  out  0                   inactive</pre>
</div>
</div>
<div class="paragraph">
<p>Once the broker is online, the autolinks attempt to activate. In this case, the broker starts with the <code>queue.first</code> queue only, and the <code>queue.first</code> autolinks become active. The <code>queue.second</code> autolinks are in a failed state, because the <code>queue.second</code> queue does not exist on the broker.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --autolinks
AutoLinks
  addr          dir  phs  extAddr  link  status  lastErr
  ===========================================================================
  queue.first   in   1             6     active
  queue.first   out  0             7     active
  queue.second  in   1                   failed  Node not found: queue.second
  queue.second  out  0                   failed  Node not found: queue.second</pre>
</div>
</div>
<div class="paragraph">
<p>The producer now connects to the router and sends three messages to <code>queue.first</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ python simple_send.py -a 127.0.0.1/queue.first -m3
all messages confirmed</pre>
</div>
</div>
<div class="paragraph">
<p>The router&#8217;s address statistics show that the messages were delivered to the queue.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -a
Router Addresses
  class   addr           phs  distrib   in-proc  local  remote  cntnr  in  out  thru  to-proc  from-proc
  ========================================================================================================
  mobile  queue.first    1    balanced  0        0      0       0      0   0    0     0        0
  mobile  queue.first    0    balanced  0        1      0       0      3   3    0     0        0</pre>
</div>
</div>
<div class="paragraph">
<p>The <code>queue.first</code> address appears twice in the output: once for each phase of the address. Phase 0 is for routing messages from producers to the outgoing autolink. Phase 1 is for routing messages from the incoming autolink to the subscribed consumers. In this case, Phase 0 of the address has counted three messages in the <code>in</code> column (the messages that arrived on the router from the producer), and three messages in the <code>out</code> column (the messages that were sent from the router to the broker queue).</p>
</div>
<div class="paragraph">
<p>The consumer now connects to the router and receives the three messages from <code>queue.first</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ python simple_recv.py -a 127.0.0.1:5672/queue.first -m3
{u'sequence': int32(1)}
{u'sequence': int32(2)}
{u'sequence': int32(3)}</pre>
</div>
</div>
<div class="paragraph">
<p>The router&#8217;s address statistics now show that all three messages were received by the consumer from the broker queue.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -a
Router Addresses
  class   addr           phs  distrib   in-proc  local  remote  cntnr  in  out  thru  to-proc  from-proc
  ========================================================================================================
  mobile  queue.first    1    balanced  0        0      0       0      3   3    0     0        0
  mobile  queue.first    0    balanced  0        1      0       0      3   3    0     0        0</pre>
</div>
</div>
<div class="paragraph">
<p>The command output shows that Phase 1 of the address was used to deliver all three messages from the queue to the consumer.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Even in a multi-router network, and with multiple producers and consumers for <code>queue.first</code>, all deliveries are routed through the queue on the connected broker.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="configuring_link_routing">7.3. Configuring Link Routing</h3>
<div class="paragraph">
<p>Link routing provides an alternative strategy for brokered messaging. A link route represents a private messaging path between a sender and a receiver in which the router passes the messages between end points. You can think of a link route as a "virtual connection" or "tunnel" that travels from a sender, through the router network, to a receiver.</p>
</div>
<div class="paragraph">
<p>With link routing, routing is performed on link-attach frames, which are chained together to form a virtual messaging path that directly connects a sender and receiver. Once a link route is established, the transfer of message deliveries, flow frames, and dispositions is performed across the link route.</p>
</div>
<div class="sect3">
<h4 id="link_route_addresses_2">7.3.1. Link Route Addresses</h4>
<div class="paragraph">
<p>A link route address represents a broker queue, topic, or other service. When a client attaches a link route address to a router, the router propagates a link attachment to the broker resource identified by the address.</p>
</div>
</div>
<div class="sect3">
<h4 id="link_route_routing_patterns">7.3.2. Link Route Routing Patterns</h4>
<div class="paragraph">
<p>Routing patterns are not used with link routing, because there is a direct link between the sender and receiver. The router only makes a routing decision when it receives the initial link-attach request frame. Once the link is established, the router passes the messages along the link in a balanced distribution.</p>
</div>
</div>
<div class="sect3">
<h4 id="link_route_flow_control">7.3.3. Link Route Flow Control</h4>
<div class="paragraph">
<p>Unlike message routing, with link routing, the sender and receiver handle flow control directly: the receiver grants link credits, which is the number of messages it is able to receive. The router sends them directly to the sender, and then the sender sends the messages based on the credits that the receiver granted.</p>
</div>
</div>
<div class="sect3">
<h4 id="creating-link-route">7.3.4. Creating a Link Route</h4>
<div class="paragraph">
<p>Link routes establish a link between a sender and a receiver that travels through a router. You can configure inward and outward link routes to enable the router to receive link-attaches from clients and to send them to a particular destination.</p>
</div>
<div class="paragraph">
<p>With link routing, client traffic is handled on the broker, not the router. Clients have a direct link through the router to a broker&#8217;s queue. Therefore, each client is a separate producer or consumer.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>If the connection to the broker fails, the routed links are detached, and the router will attempt to reconnect to the broker (or its backup). Once the connection is reestablished, the link route to the broker will become reachable again.</p>
</div>
<div class="paragraph">
<p>From the client&#8217;s perspective, the client will see the detached links (that is, the senders or receivers), but not the failed connection. Therefore, if you want the client to reattach dropped links in the event of a broker connection failure, you must configure this functionality on the client. Alternatively, you can use message routing with autolinks instead of link routing. For more information, see <a href="#routing-messages-through-broker">Routing Messages through a Broker Queue</a>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>In the router configuration file, add an outgoing connection to the broker:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {
    name: <em>NAME</em>
    host: <em>HOST_NAME/ADDRESS</em>
    port: <em>PORT_NUMBER/NAME</em>
    role: route-container
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>name</code></dt>
<dd>
<p>The name of the <code>connector</code>. You should specify a name that describes the broker.</p>
</dd>
<dt class="hdlist1"><code>host</code></dt>
<dd>
<p>Either an IP address (IPv4 or IPv6) or hostname on which the router should connect to the broker.</p>
</dd>
<dt class="hdlist1"><code>port</code></dt>
<dd>
<p>The port number or symbolic service name on which the router should connect to the broker.</p>
</dd>
<dt class="hdlist1"><code>role</code></dt>
<dd>
<p>Specify <code>route-container</code> to indicate that this connection is for an external container (broker).</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_connector">connector</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>If you want clients to send local transactions to the broker, create a link route for the transaction coordinator:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">linkRoute {
    prefix: $coordinator  <b class="conum">(1)</b>
    connection: <em>CONNECTOR_NAME</em>
    direction: in
}</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The <code>$coordinator</code> prefix designates this link route as a transaction coordinator. When the client opens a transacted session, the requests to start and end the transaction are propagated along this link route to the broker.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Dispatch Router does not support routing transactions to multiple brokers. If you have multiple brokers in your environment, choose a single broker and route all transactions to it.</p>
</div>
</div>
</div>
</li>
<li>
<p>If you want clients to send messages on this link route, create an incoming link route:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">linkRoute {
    prefix: <em>ADDRESS_PREFIX</em>
    connection: <em>CONNECTOR_NAME</em>
    direction: in
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>prefix</code> | <code>pattern</code></dt>
<dd>
<p>The address prefix or pattern that matches the broker queue that should be the destination for routed link-attaches. All messages that match this prefix or pattern will be distributed along the link route. You can specify a prefix to match an exact address or beginning segment of an address. Alternatively, you can specify a pattern to match an address using wildcards.</p>
<div class="paragraph">
<p>A <em>prefix</em> matches either an exact address or the beginning segment within an address that is delimited by either a <code>.</code> or <code>/</code> character. For example, the prefix <code>my_address</code> would match the address <code>my_address</code> as well as <code>my_address.1</code> and <code>my_address/1</code>. However, it would not match <code>my_address1</code>.</p>
</div>
<div class="paragraph">
<p>A <em>pattern</em> matches an address that corresponds to a pattern. A pattern is a sequence of words delimited by either a <code>.</code> or <code>/</code> character. You can use wildcard characters to represent a word. The  <code>*</code> character matches exactly one word, and the <code>#</code> character matches any sequence of zero or more words.</p>
</div>
<div class="paragraph">
<p>The <code>*</code> and <code>#</code> characters are reserved as wildcards. Therefore, you should not use them in the message address.</p>
</div>
<div class="paragraph">
<p>For more information about creating address patterns, see <a href="#router-address-pattern-matching">Pattern Matching for Addresses</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>You can convert a <code>prefix</code> value to a <code>pattern</code> by appending <code>/#</code> to it. For example, the prefix <code>a/b/c</code> is equivalent to the pattern <code>a/b/c/#</code>.</p>
</div>
</td>
</tr>
</table>
</div>
</dd>
<dt class="hdlist1"><code>connection</code> | <code>containerID</code></dt>
<dd>
<p>How the router should connect to the broker. You can specify either an outgoing connection (<code>connection</code>) or the container ID of the broker (<code>containerID</code>).</p>
<div class="paragraph">
<p>If multiple brokers are connected to the router through this connection, requests for addresses matching the link route&#8217;s prefix or pattern are balanced across the brokers. Alternatively, if you want to specify a particular broker, use <code>containerID</code> and add the broker&#8217;s container ID.</p>
</div>
</dd>
<dt class="hdlist1"><code>direction</code></dt>
<dd>
<p>Set this attribute to <code>in</code> to specify that clients can send messages into the router network on this link route.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_linkroute">linkRoute</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>If you want clients to receive messages on this link route, create an outgoing link route:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">linkRoute {
    prefix: <em>ADDRESS_PREFIX</em>
    connection: <em>CONNECTOR_NAME</em>
    direction: out
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>prefix</code> | <code>pattern</code></dt>
<dd>
<p>The address prefix or pattern that matches the broker queue from which you want to receive routed link-attaches. All messages that match this prefix or pattern will be distributed along the link route. You can specify a prefix to match an exact address or beginning segment of an address. Alternatively, you can specify a pattern to match an address using wildcards.</p>
<div class="paragraph">
<p>A <em>prefix</em> matches either an exact address or the beginning segment within an address that is delimited by either a <code>.</code> or <code>/</code> character. For example, the prefix <code>my_address</code> would match the address <code>my_address</code> as well as <code>my_address.1</code> and <code>my_address/1</code>. However, it would not match <code>my_address1</code>.</p>
</div>
<div class="paragraph">
<p>A <em>pattern</em> matches an address that corresponds to a pattern. A pattern is a sequence of words delimited by either a <code>.</code> or <code>/</code> character. You can use wildcard characters to represent a word. The  <code>*</code> character matches exactly one word, and the <code>#</code> character matches any sequence of zero or more words.</p>
</div>
<div class="paragraph">
<p>The <code>*</code> and <code>#</code> characters are reserved as wildcards. Therefore, you should not use them in the message address.</p>
</div>
<div class="paragraph">
<p>For more information about creating address patterns, see <a href="#router-address-pattern-matching">Pattern Matching for Addresses</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>You can convert a <code>prefix</code> value to a <code>pattern</code> by appending <code>/#</code> to it. For example, the prefix <code>a/b/c</code> is equivalent to the pattern <code>a/b/c/#</code>.</p>
</div>
</td>
</tr>
</table>
</div>
</dd>
<dt class="hdlist1"><code>connection</code> | <code>containerID</code></dt>
<dd>
<p>How the router should connect to the broker. You can specify either an outgoing connection (<code>connection</code>) or the container ID of the broker (<code>containerID</code>).</p>
<div class="paragraph">
<p>If multiple brokers are connected to the router through this connection, requests for addresses matching the link route&#8217;s prefix or pattern are balanced across the brokers. Alternatively, if you want to specify a particular broker, use <code>containerID</code> and add the broker&#8217;s container ID.</p>
</div>
</dd>
<dt class="hdlist1"><code>direction</code></dt>
<dd>
<p>Set this attribute to <code>out</code> to specify that this link route is for receivers.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_linkroute">linkRoute</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="example_using_a_link_route_to_provide_client_isolation">7.3.5. Example: Using a Link Route to Provide Client Isolation</h4>
<div class="paragraph">
<p>This example shows how a link route can connect a client to a message broker that is on a different private network.</p>
</div>
<div class="listingblock">
<div class="title">Router Network with Isolated Clients</div>
<div class="content">
<pre>                        Public Network
                       +-----------------+
                       |      +-----+    |
                       | B1   | Rp  |    |
                       |      +/--\-+    |
                       |      /    \     |
                       |     /      \    |
                       +----/--------\---+
                           /          \
                          /            \
                         /              \
         Private Net A  /                \ Private Net B
        +--------------/--+           +---\-------------+
        |         +---/-+ |           | +--\--+         |
        |  B2     | Ra  | |           | | Rb  |   C1    |
        |         +-----+ |           | +-----+         |
        |                 |           |                 |
        |                 |           |                 |
        +-----------------+           +-----------------+</pre>
</div>
</div>
<div class="paragraph">
<p>Client <code>C1</code> is constrained by firewall policy to connect to the router in its own network (<code>Rb</code>). However, it can use a link route to access queues, topics, and any other AMQP services that are provided on message brokers <code>B1</code> and <code>B2</code>&#8201;&#8212;&#8201;even though they are on different networks.</p>
</div>
<div class="paragraph">
<p>In this example, client <code>C1</code> needs to receive messages from <code>b2.event-queue</code>, which is hosted on broker <code>B2</code> in <code>Private Net A</code>. A link route connects the client and broker even though neither of them is aware that there is a router network between them.</p>
</div>
<div class="sect4">
<h5 id="router_configuration_2">Router Configuration</h5>
<div class="paragraph">
<p>To enable client <code>C1</code> to receive messages from <code>b2.event-queue</code> on broker <code>B2</code>, router <code>Ra</code> must be able to do the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Connect to broker <code>B2</code></p>
</li>
<li>
<p>Route links to and from broker <code>B2</code></p>
</li>
<li>
<p>Advertise itself to the router network as a valid destination for links that have a <code>b2.event-queue</code> address.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The relevant part of the configuration file for router <code>Ra</code> shows the following:</p>
</div>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">connector {  <b class="conum">(1)</b>
    name: broker
    role: route-container
    host: 198.51.100.1
    port: 61617
    saslMechanisms: ANONYMOUS
}

linkRoute {  <b class="conum">(2)</b>
    prefix: b2
    direction: in
    connection: broker
}

linkRoute {  <b class="conum">(3)</b>
    prefix: b2
    direction: out
    connection: broker
}</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The outgoing connection from the router to broker <code>B2</code>. The <code>route-container</code> role enables the router to connect to an external AMQP container (in this case, a broker).</p>
</li>
<li>
<p>The incoming link route for receiving links from client senders. Any sender with a target whose address begins with <code>b2</code> will be routed to broker <code>B2</code> using the <code>broker</code> connector.</p>
</li>
<li>
<p>The outgoing link route for sending links to client receivers. Any receivers whose source address begins with <code>b2</code> will be routed to broker <code>B2</code> using the <code>broker</code> connector.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="paragraph">
<p>This configuration enables router <code>Ra</code> to advertise itself as a valid destination for targets and sources starting with <code>b2</code>. It also enables the router to connect to broker <code>B2</code>, and to route links to and from queues starting with the <code>b2</code> prefix.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>While not required, routers <code>Rp</code> and <code>Rb</code> should also have the same configuration.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect4">
<h5 id="how_the_client_receives_messages">How the Client Receives Messages</h5>
<div class="paragraph">
<p>By using the configured link route, client <code>C1</code> can receive messages from broker <code>B2</code> even though they are on different networks.</p>
</div>
<div class="paragraph">
<p>Router <code>Ra</code> establishes a connection to broker <code>B2</code>. Once the connection is open, <code>Ra</code> tells the other routers (<code>Rp</code> and <code>Rb</code>) that it is a valid destination for link routes to the <code>b2</code> prefix. This means that sender and receiver links attached to <code>Rb</code> or <code>Rp</code> will be routed along the shortest path to <code>Ra</code>, which then routes them to broker <code>B2</code>.</p>
</div>
<div class="paragraph">
<p>To receive messages from the <code>b2.event-queue</code> on broker <code>B2</code>, client <code>C1</code> attaches a receiver link with a source address of <code>b2.event-queue</code> to its local router, <code>Rb</code>. Because the address matches the <code>b2</code> prefix, <code>Rb</code> routes the link to <code>Rp</code>, which is the next hop in the route to its destination. <code>Rp</code> routes the link to <code>Ra</code>, which routes it to broker <code>B2</code>. Client <code>C1</code> now has a receiver established, and it can begin receiving messages.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>If broker <code>B2</code> is unavailable for any reason, router <code>Ra</code> will not advertise itself as a destination for <code>b2</code> addresses. In this case, routers <code>Rb</code> and <code>Rp</code> will reject link attaches that should be routed to broker <code>B2</code> with an error message indicating that there is no route available to the destination.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="logging">8. Logging</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Logging enables you to diagnose error and performance issues with Dispatch Router.</p>
</div>
<div class="paragraph">
<p>Dispatch Router consists of internal modules that provide important information about the router. For each module, you can specify logging levels, the format of the log file, and the location to which the logs should be written.</p>
</div>
<div class="sect2">
<h3 id="logging-modules-you-can-configure">8.1. Logging Modules</h3>
<div class="paragraph">
<p>Dispatch Router logs are broken into different categories called <em>logging modules</em>. Each module provides important information about a particular aspect of Dispatch Router.</p>
</div>
<div class="sect3">
<h4 id="the_code_default_code_logging_module">8.1.1. The <code>DEFAULT</code> Logging Module</h4>
<div class="paragraph">
<p>The default module. This module applies defaults to all of the other logging modules.</p>
</div>
</div>
<div class="sect3">
<h4 id="the_code_router_code_logging_module">8.1.2. The <code>ROUTER</code> Logging Module</h4>
<div class="paragraph">
<p>This module provides information and statistics about the local router. This includes how the router connects to other routers in the network, and information about the remote destinations that are directly reachable from the router (link routes, waypoints, autolinks, and so on).</p>
</div>
<div class="paragraph">
<p>In this example, on <code>Router.A</code>, the <code>ROUTER</code> log shows that <code>Router.B</code> is the next hop. It also shows the cost for <code>Router.A</code> to reach the other routers on the network:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 13:28:27 2016 ROUTER (trace) Node Router.C next hop set: Router.B
Tue Jun  7 13:28:27 2016 ROUTER (trace) Node Router.C valid origins: []
Tue Jun  7 13:28:27 2016 ROUTER (trace) Node Router.C cost: 2
Tue Jun  7 13:28:27 2016 ROUTER (trace) Node Router.B valid origins: []
Tue Jun  7 13:28:27 2016 ROUTER (trace) Node Router.B cost: 1</pre>
</div>
</div>
<div class="paragraph">
<p>On <code>Router.B</code>, the <code>ROUTER</code> log provides more information about valid origins:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 13:28:25 2016 ROUTER (trace) Node Router.C cost: 1
Tue Jun  7 13:28:26 2016 ROUTER (trace) Node Router.A created: maskbit=2
Tue Jun  7 13:28:26 2016 ROUTER (trace) Node Router.A link set: link_id=1
Tue Jun  7 13:28:26 2016 ROUTER (trace) Node Router.A valid origins: ['Router.C']
Tue Jun  7 13:28:26 2016 ROUTER (trace) Node Router.A cost: 1
Tue Jun  7 13:28:27 2016 ROUTER (trace) Node Router.C valid origins: ['Router.A']</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="the_code_router_core_code_logging_module">8.1.3. The <code>ROUTER_CORE</code> Logging Module</h4>
<div class="paragraph">
<p>This module provides information about the local router&#8217;s operations on active connections and links. This includes operations related to opened and closed connections, messages sent, deliveries, and flow control.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 13:42:07 2016 ROUTER_CORE (trace) Core action 'link_flow'
Tue Jun  7 13:42:08 2016 ROUTER_CORE (trace) Core action 'link_deliver'
Tue Jun  7 13:42:08 2016 ROUTER_CORE (trace) Core action 'send_to'
Tue Jun  7 13:42:08 2016 ROUTER_CORE (trace) Core action 'link_flow'</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="the_code_router_hello_code_logging_module">8.1.4. The <code>ROUTER_HELLO</code> Logging Module</h4>
<div class="paragraph">
<p>This module provides information about the <em>Hello</em> protocol used by interior routers to exchange Hello messages, which include information about the router&#8217;s ID and a list of its reachable neighbors (the other routers with which this router has bidirectional connectivity).</p>
</div>
<div class="paragraph">
<p>The logs for this module are helpful for monitoring or resolving issues in the network topology, and for determining to which other routers a router is connected, and the hop-cost for each of those connections.</p>
</div>
<div class="paragraph">
<p>In this example, on <code>Router.A</code>, the <code>ROUTER_HELLO</code> log shows that it is connected to <code>Router.B</code>, and that <code>Router.B</code> is connected to <code>Router.A</code> and <code>Router.C</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 13:50:21 2016 ROUTER_HELLO (trace) RCVD: HELLO(id=Router.B area=0 inst=1465307413 seen=['Router.A', 'Router.C']) <b class="conum">(1)</b>
Tue Jun  7 13:50:21 2016 ROUTER_HELLO (trace) SENT: HELLO(id=Router.A area=0 inst=1465307416 seen=['Router.B']) <b class="conum">(2)</b>
Tue Jun  7 13:50:22 2016 ROUTER_HELLO (trace) RCVD: HELLO(id=Router.B area=0 inst=1465307413 seen=['Router.A', 'Router.C'])
Tue Jun  7 13:50:22 2016 ROUTER_HELLO (trace) SENT: HELLO(id=Router.A area=0 inst=1465307416 seen=['Router.B'])</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p><code>Router.A</code> received a Hello message from <code>Router.B</code>, which can see <code>Router.A</code> and <code>Router.C</code>.</p>
</li>
<li>
<p><code>Router.A</code> sent a Hello message to <code>Router.B</code>, which is the only router it can see.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>On <code>Router.B</code>, the <code>ROUTER_HELLO</code> log shows the same router topology from a different perspective:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 13:50:18 2016 ROUTER_HELLO (trace) SENT: HELLO(id=Router.B area=0 inst=1465307413 seen=['Router.A', 'Router.C']) <b class="conum">(1)</b>
Tue Jun  7 13:50:18 2016 ROUTER_HELLO (trace) RCVD: HELLO(id=Router.A area=0 inst=1465307416 seen=['Router.B']) <b class="conum">(2)</b>
Tue Jun  7 13:50:19 2016 ROUTER_HELLO (trace) RCVD: HELLO(id=Router.C area=0 inst=1465307411 seen=['Router.B']) <b class="conum">(3)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p><code>Router.B</code> sent a Hello message to <code>Router.A</code> and <code>Router.C</code>.</p>
</li>
<li>
<p><code>Router.B</code> received a Hello message from <code>Router.A</code>, which can only see <code>Router.B</code>.</p>
</li>
<li>
<p><code>Router.B</code> received a Hello message from <code>Router.C</code>, which can only see <code>Router.B</code>.</p>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="the_code_router_ls_code_logging_module">8.1.5. The <code>ROUTER_LS</code> Logging Module</h4>
<div class="paragraph">
<p>This module provides information about link-state data between routers, including Router Advertisement (RA), Link State Request (LSR), and Link State Update (LSU) messages.</p>
</div>
<div class="paragraph">
<p>Periodically, each router sends an LSR to the other routers and receives an LSU with the requested information. Exchanging the above information, each router can compute the next hops in the topology, and the related costs.</p>
</div>
<div class="paragraph">
<p>This example shows the RA, LSR, and LSU messages sent between three routers:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) SENT: LSR(id=Router.A area=0) to: Router.C //
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) SENT: LSR(id=Router.A area=0) to: Router.B //
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) SENT: RA(id=Router.A area=0 inst=1465308600 ls_seq=1 mobile_seq=1) <b class="conum">(1)</b>
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) RCVD: LSU(id=Router.B area=0 inst=1465308595 ls_seq=2 ls=LS(id=Router.B area=0 ls_seq=2 peers={'Router.A': 1L, 'Router.C': 1L})) <b class="conum">(2)</b>
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) RCVD: LSR(id=Router.B area=0)
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) SENT: LSU(id=Router.A area=0 inst=1465308600 ls_seq=1 ls=LS(id=Router.A area=0 ls_seq=1 peers={'Router.B': 1}))
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) RCVD: RA(id=Router.C area=0 inst=1465308592 ls_seq=1 mobile_seq=0)
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) SENT: LSR(id=Router.A area=0) to: Router.C
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) RCVD: LSR(id=Router.C area=0) <b class="conum">(3)</b>
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) SENT: LSU(id=Router.A area=0 // inst=1465308600 ls_seq=1 ls=LS(id=Router.A area=0 ls_seq=1 peers={'Router.B': 1}))
Tue Jun  7 14:10:02 2016 ROUTER_LS (trace) RCVD: LSU(id=Router.C area=0 inst=1465308592 ls_seq=1 ls=LS(id=Router.C area=0 ls_seq=1 peers={'Router.B': 1L})) <b class="conum">(4)</b>
Tue Jun  7 14:10:03 2016 ROUTER_LS (trace) Computed next hops: {'Router.C': 'Router.B', 'Router.B': 'Router.B'} <b class="conum">(5)</b>
Tue Jun  7 14:10:03 2016 ROUTER_LS (trace) Computed costs: {'Router.C': 2L, 'Router.B': 1}
Tue Jun  7 14:10:03 2016 ROUTER_LS (trace) Computed valid origins: {'Router.C': [], 'Router.B': []}</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p><code>Router.A</code> sent LSR requests and an RA advertisement to the other routers on the network.</p>
</li>
<li>
<p><code>Router.A</code> received an LSU from <code>Router.B</code>, which has two peers: <code>Router.A</code>, and <code>Router.C</code> (with a cost of <code>1</code>).</p>
</li>
<li>
<p><code>Router.A</code> received an LSR from both <code>Router.B</code> and <code>Router.C</code>, and  replied with an LSU.</p>
</li>
<li>
<p><code>Router.A</code> received an LSU from <code>Router.C</code>, which only has one peer: <code>Router.B</code> (with a cost of <code>1</code>).</p>
</li>
<li>
<p>After the LSR and LSU messages are exchanged, <code>Router.A</code> computed the router topology with the related costs.</p>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="the_code_router_ma_code_logging_module">8.1.6. The <code>ROUTER_MA</code> Logging Module</h4>
<div class="paragraph">
<p>This module provides information about the exchange of mobile address information between routers, including Mobile Address Request (MAR) and Mobile Address Update (MAU) messages exchanged between routers. You can use this log to monitor the state of mobile addresses attached to each router.</p>
</div>
<div class="paragraph">
<p>This example shows the MAR and MAU messages sent between three routers:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 14:27:20 2016 ROUTER_MA (trace) SENT: MAU(id=Router.A area=0 mobile_seq=1 add=['Cmy_queue', 'Dmy_queue', 'M0my_queue_wp'] del=[]) <b class="conum">(1)</b>
Tue Jun  7 14:27:21 2016 ROUTER_MA (trace) RCVD: MAR(id=Router.C area=0 have_seq=0) <b class="conum">(2)</b>
Tue Jun  7 14:27:21 2016 ROUTER_MA (trace) SENT: MAU(id=Router.A area=0 mobile_seq=1 add=['Cmy_queue', 'Dmy_queue', 'M0my_queue_wp'] del=[])
Tue Jun  7 14:27:22 2016 ROUTER_MA (trace) RCVD: MAR(id=Router.B area=0 have_seq=0) <b class="conum">(3)</b>
Tue Jun  7 14:27:22 2016 ROUTER_MA (trace) SENT: MAU(id=Router.A area=0 mobile_seq=1 add=['Cmy_queue', 'Dmy_queue', 'M0my_queue_wp'] del=[])
Tue Jun  7 14:27:39 2016 ROUTER_MA (trace) RCVD: MAU(id=Router.C area=0 mobile_seq=1 add=['M0my_test'] del=[]) <b class="conum">(4)</b>
Tue Jun  7 14:27:51 2016 ROUTER_MA (trace) RCVD: MAU(id=Router.C area=0 mobile_seq=2 add=[] del=['M0my_test']) <b class="conum">(5)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p><code>Router.A</code> sent MAU messages to the other routers in the network to notify them about the addresses added for <code>my_queue</code> and <code>my_queue_wp</code>.</p>
</li>
<li>
<p><code>Router.A</code> received a MAR message in response from <code>Router.C</code>.</p>
</li>
<li>
<p><code>Router.A</code> received another MAR message in response from <code>Router.B</code>.</p>
</li>
<li>
<p><code>Router.C</code> sent a MAU message to notify the other routers that it added and address for <code>my_test</code>.</p>
</li>
<li>
<p><code>Router.C</code> sent another MAU message to notify the other routers that it deleted the address for <code>my_test</code> (because the receiver is detached).</p>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="the_code_message_code_logging_module">8.1.7. The <code>MESSAGE</code> Logging Module</h4>
<div class="paragraph">
<p>This module provides information about AMQP messages sent and received by the router, including information about the address, body, and link. You can use this log to find high-level information about messages on a particular router.</p>
</div>
<div class="paragraph">
<p>In this example, <code>Router.A</code> has sent and received some messages related to the Hello protocol, and sent and received some other messages on a link for a mobile address:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 14:36:54 2016 MESSAGE (trace) Sending Message{to='amqp:/_topo/0/Router.B/qdrouter' body='\d1\00\00\00\1b\00\00\00\04\a1\02id\a1\08R'} on link qdlink.p9XmBm19uDqx50R
Tue Jun  7 14:36:54 2016 MESSAGE (trace) Received Message{to='amqp:/_topo/0/Router.A/qdrouter' body='\d1\00\00\00\8e\00\00\00
\a1\06ls_se'} on link qdlink.phMsJOq7YaFsGAG
Tue Jun  7 14:36:54 2016 MESSAGE (trace) Received Message{ body='\d1\00\00\00\10\00\00\00\02\a1\08seque'} on link qdlink.FYHqBX+TtwXZHfV
Tue Jun  7 14:36:54 2016 MESSAGE (trace) Sending Message{ body='\d1\00\00\00\10\00\00\00\02\a1\08seque'} on link qdlink.yU1tnPs5KbMlieM
Tue Jun  7 14:36:54 2016 MESSAGE (trace) Sending Message{to='amqp:/_local/qdhello' body='\d1\00\00\00G\00\00\00\08\a1\04seen\d0'} on link qdlink.p9XmBm19uDqx50R
Tue Jun  7 14:36:54 2016 MESSAGE (trace) Sending Message{to='amqp:/_topo/0/Router.C/qdrouter' body='\d1\00\00\00\1b\00\00\00\04\a1\02id\a1\08R'} on link qdlink.p9XmBm19uDqx50R</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="the_code_server_code_logging_module">8.1.8. The <code>SERVER</code> Logging Module</h4>
<div class="paragraph">
<p>This module provides information about how the router is listening for and connecting to other containers in the network (such as clients, routers, and brokers). This includes the state of AMQP messages sent and received by the broker (open, begin, attach, transfer, flow, and so on), and the related content of those messages.</p>
</div>
<div class="paragraph">
<p>For example, this log shows details about how the router handled a link attachment:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 14:39:52 2016 SERVER (trace) [2]:  &lt;- AMQP
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:  &lt;- AMQP
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:0 &lt;- @open(16) [container-id="Router.B", max-frame-size=16384, channel-max=32767, idle-time-out=8000, offered-capabilities=:"ANONYMOUS-RELAY", properties={:product="qpid-dispatch-router", :version="0.6.0"}]
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:0 -&gt; @begin(17) [next-outgoing-id=0, incoming-window=15, outgoing-window=2147483647]
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:RAW: "\x00\x00\x00\x1e\x02\x00\x00\x00\x00S\x11\xd0\x00\x00\x00\x0e\x00\x00\x00\x04@R\x00R\x0fp\x7f\xff\xff\xff"
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:1 -&gt; @begin(17) [next-outgoing-id=0, incoming-window=15, outgoing-window=2147483647]
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:RAW: "\x00\x00\x00\x1e\x02\x00\x00\x01\x00S\x11\xd0\x00\x00\x00\x0e\x00\x00\x00\x04@R\x00R\x0fp\x7f\xff\xff\xff"
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:0 -&gt; @attach(18) [name="qdlink.uSSeXPSfTHhxo8d", handle=0, role=true, snd-settle-mode=2, rcv-settle-mode=0, source=@source(40) [durable=0, expiry-policy=:"link-detach", timeout=0, dynamic=false, capabilities=:"qd.router"], target=@target(41) [durable=0, expiry-policy=:"link-detach", timeout=0, dynamic=false, capabilities=:"qd.router"], initial-delivery-count=0]
Tue Jun  7 14:39:52 2016 SERVER (trace) [1]:RAW: "\x00\x00\x00\x91\x02\x00\x00\x00\x00S\x12\xd0\x00\x00\x00\x81\x00\x00\x00\x0a\xa1\x16qdlink.uSSeXPSfTHhxo8dR\x00AP\x02P\x00\x00S(\xd0\x00\x00\x00'\x00\x00\x00\x0b@R\x00\xa3\x0blink-detachR\x00B@@@@@\xa3\x09qd.router\x00S)\xd0\x00\x00\x00#\x00\x00\x00\x07@R\x00\xa3\x0blink-detachR\x00B@\xa3\x09qd.router@@R\x00"</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="the_code_agent_code_logging_module">8.1.9. The <code>AGENT</code> Logging Module</h4>
<div class="paragraph">
<p>This module provides information about configuration changes made to the router from either editing the router&#8217;s configuration file or using <code>qdmanage</code>.</p>
</div>
<div class="paragraph">
<p>In this example, on <code>Router.A</code>, <code>address</code>, <code>linkRoute</code>, and <code>autoLink</code> entities were added to the router&#8217;s configuration file. When the router was started, the <code>AGENT</code> module applied these changes, and they are now viewable in the log:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: ConnectorEntity(addr=127.0.0.1, allowRedirect=True, cost=1, host=127.0.0.1, identity=connector/127.0.0.1:5672:BROKER, idleTimeoutSeconds=16, maxFrameSize=65536, name=BROKER, port=5672, role=route-container, stripAnnotations=both, type=org.apache.qpid.dispatch.connector, verifyHostname=True)
Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: RouterConfigAddressEntity(distribution=closest, identity=router.config.address/0, name=router.config.address/0, prefix=my_address, type=org.apache.qpid.dispatch.router.config.address, waypoint=False)
Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: RouterConfigAddressEntity(distribution=balanced, identity=router.config.address/1, name=router.config.address/1, prefix=my_queue_wp, type=org.apache.qpid.dispatch.router.config.address, waypoint=True)
Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: RouterConfigLinkrouteEntity(connection=BROKER, direction=in, distribution=linkBalanced, identity=router.config.linkRoute/0, name=router.config.linkRoute/0, prefix=my_queue, type=org.apache.qpid.dispatch.router.config.linkRoute)
Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: RouterConfigLinkrouteEntity(connection=BROKER, direction=out, distribution=linkBalanced, identity=router.config.linkRoute/1, name=router.config.linkRoute/1, prefix=my_queue, type=org.apache.qpid.dispatch.router.config.linkRoute)
Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: RouterConfigAutolinkEntity(addr=my_queue_wp, connection=BROKER, direction=in, identity=router.config.autoLink/0, name=router.config.autoLink/0, type=org.apache.qpid.dispatch.router.config.autoLink)
Tue Jun  7 15:07:32 2016 AGENT (debug) Add entity: RouterConfigAutolinkEntity(addr=my_queue_wp, connection=BROKER, direction=out, identity=router.config.autoLink/1, name=router.config.autoLink/1, type=org.apache.qpid.dispatch.router.config.autoLink)</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="the_code_container_code_logging_module">8.1.10. The <code>CONTAINER</code> Logging Module</h4>
<div class="paragraph">
<p>This module provides information about the nodes related to the router. This includes only the AMQP relay node.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 14:46:18 2016 CONTAINER (trace) Container Initialized
Tue Jun  7 14:46:18 2016 CONTAINER (trace) Node Type Registered - router
Tue Jun  7 14:46:18 2016 CONTAINER (trace) Node of type 'router' installed as default node</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="the_code_error_code_logging_module">8.1.11. The <code>ERROR</code> Logging Module</h4>
<div class="paragraph">
<p>This module provides detailed information about error conditions encountered during execution.</p>
</div>
<div class="paragraph">
<p>In this example, <code>Router.A</code> failed to start when an incorrect path was specified for the router&#8217;s configuration file:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo qdrouterd --conf xxx
Wed Jun 15 09:53:28 2016 ERROR (error) Python: Exception: Cannot load configuration file xxx: [Errno 2] No such file or directory: 'xxx'
Wed Jun 15 09:53:28 2016 ERROR (error) Traceback (most recent call last):
  File "/usr/lib/qpid-dispatch/python/qpid_dispatch_internal/management/config.py", line 155, in configure_dispatch
    config = Config(filename)
  File "/usr/lib/qpid-dispatch/python/qpid_dispatch_internal/management/config.py", line 41, in __init__
    self.load(filename, raw_json)
  File "/usr/lib/qpid-dispatch/python/qpid_dispatch_internal/management/config.py", line 123, in load
    with open(source) as f:
Exception: Cannot load configuration file xxx: [Errno 2] No such file or directory: 'xxx'

Wed Jun 15 09:53:28 2016 MAIN (critical) Router start-up failed: Python: Exception: Cannot load configuration file xxx: [Errno 2] No such file or directory: 'xxx'
qdrouterd: Python: Exception: Cannot load configuration file xxx: [Errno 2] No such file or directory: 'xxx'</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="the_code_policy_code_logging_module">8.1.12. The <code>POLICY</code> Logging Module</h4>
<div class="paragraph">
<p>This module provides information about policies that have been configured for the router.</p>
</div>
<div class="paragraph">
<p>In this example, <code>Router.A</code> has no limits on maximum connections, and the default application policy is disabled:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">Tue Jun  7 15:07:32 2016 POLICY (info) Policy configured maximumConnections: 0, policyFolder: '', access rules enabled: 'false'
Tue Jun  7 15:07:32 2016 POLICY (info) Policy fallback defaultApplication is disabled</pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="configure-default-logging">8.2. Configuring Logging</h3>
<div class="paragraph">
<p>You can specify the types of events that should be logged, the format of the log entries, and where those entries should be sent.</p>
</div>
<div class="olist arabic">
<div class="title">Procedure</div>
<ol class="arabic">
<li>
<p>In the router&#8217;s configuration file, add a <code>log</code> section to set the default logging properties:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">log {
    module: DEFAULT
    enable: <em>LOGGING_LEVEL</em>
    includeTimestamp: yes
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>module</code></dt>
<dd>
<p>Specify <code>DEFAULT</code>.</p>
</dd>
<dt class="hdlist1"><code>enable</code></dt>
<dd>
<p>The logging level. You can specify any of the following levels (from lowest to highest):</p>
<div class="ulist">
<ul>
<li>
<p><code>trace</code> - provides the most information, but significantly affects system performance</p>
</li>
<li>
<p><code>debug</code> - useful for debugging, but affects system performance</p>
</li>
<li>
<p><code>info</code> - provides general information without affecting system performance</p>
</li>
<li>
<p><code>notice</code> - provides general information, but is less verbose than <code>info</code></p>
</li>
<li>
<p><code>warning</code> - provides information about issues you should be aware of, but which are not errors</p>
</li>
<li>
<p><code>error</code> - error conditions that you should address</p>
</li>
<li>
<p><code>critical</code> - critical system issues that you must address immediately</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>To specify multiple levels, use a comma-separated list. You can also use <code>+</code> to specify a level and all levels above it. For example, <code>trace,debug,warning+</code> enables trace, debug, warning, error, and critical levels. For default logging, you should typically use the <code>info+</code> or <code>notice+</code> level. These levels will provide general information, warnings, and errors for all modules without affecting the performance of Dispatch Router.</p>
</div>
</dd>
<dt class="hdlist1"><code>includeTimestamp</code></dt>
<dd>
<p>Set this to <code>yes</code> to include the timestamp in all logs.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional log attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_log">log</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
<li>
<p>Add an additional <code>log</code> section for each logging module that should not follow the default logging configuration:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">log {
    module: <em>MODULE_NAME</em>
    enable: <em>LOGGING_LEVEL</em>
    ...
}</pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>module</code></dt>
<dd>
<p>The name of the module for which you are configuring logging. For a list of valid modules, see <a href="#logging-modules-you-can-configure">Logging Modules</a>.</p>
</dd>
<dt class="hdlist1"><code>enable</code></dt>
<dd>
<p>The logging level. You can specify any of the following levels (from lowest to highest):</p>
<div class="ulist">
<ul>
<li>
<p><code>trace</code> - provides the most information, but significantly affects system performance</p>
</li>
<li>
<p><code>debug</code> - useful for debugging, but affects system performance</p>
</li>
<li>
<p><code>info</code> - provides general information without affecting system performance</p>
</li>
<li>
<p><code>notice</code> - provides general information, but is less verbose than <code>info</code></p>
</li>
<li>
<p><code>warning</code> - provides information about issues you should be aware of, but which are not errors</p>
</li>
<li>
<p><code>error</code> - error conditions that you should address</p>
</li>
<li>
<p><code>critical</code> - critical system issues that you must address immediately</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>To specify multiple levels, use a comma-separated list. You can also use <code>+</code> to specify a level and all levels above it. For example, <code>trace,debug,warning+</code> enables trace, debug, warning, error, and critical levels. For default logging, you should typically use the <code>info+</code> or <code>notice+</code> level. These levels will provide general information, warnings, and errors for all modules without affecting the performance of Dispatch Router.</p>
</div>
</dd>
</dl>
</div>
<div class="paragraph">
<p>For information about additional log attributes, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_log">log</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="viewing_log_entries">8.3. Viewing Log Entries</h3>
<div class="paragraph">
<p>You may need to view log entries to diagnose errors, performance problems, and other important issues. A log entry consists of an optional timestamp, the logging module, the logging level, and the log message.</p>
</div>
<div class="sect3">
<h4 id="viewing_log_entries_on_the_console">8.3.1. Viewing Log Entries on the Console</h4>
<div class="paragraph">
<p>By default, log entries are logged to the console, and you can view them there. However, if the <code>output</code> attribute is set for a particular logging module, then you can find those log entries in the specified location (<code>stderr</code>, <code>syslog</code>, or a file).</p>
</div>
</div>
<div class="sect3">
<h4 id="viewing_log_entries_on_the_cli">8.3.2. Viewing Log Entries on the CLI</h4>
<div class="paragraph">
<p>You can use the <code>qdstat</code> tool to view a list of recent log entries.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use the <strong><code>qdstat --log</code></strong> command to view recent log entries.</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>You can use the <code>--limit</code> parameter to limit the number of log entries that are displayed. For more information about <code>qdstat</code>, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdstat.html" target="_blank" rel="noopener">qdstat man page</a>.</p>
</div>
<div class="paragraph">
<p>This example displays the last three log entries for <code>Router.A</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --log --limit=3 -r ROUTER.A
Wed Jun  7 17:49:32 2017 ROUTER_CORE (none) Core action 'link_deliver'
Wed Jun  7 17:49:32 2017 ROUTER_CORE (none) Core action 'send_to'
Wed Jun  7 17:49:32 2017 SERVER (none) [2]:0 -&gt; @flow(19) [next-incoming-id=1, incoming-window=61, next-outgoing-id=0, outgoing-window=2147483647, handle=0, delivery-count=1, link-credit=250, drain=false]</pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="management">9. Management</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can manage Dispatch Router using both graphical and command-line tools.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Apache Qpid Dispatch Router Console</dt>
<dd>
<p>A graphical tool for monitoring and managing Dispatch Router routers.</p>
</dd>
<dt class="hdlist1"><code>qdstat</code></dt>
<dd>
<p>A command-line tool for monitoring the status of Dispatch Router routers.</p>
</dd>
<dt class="hdlist1"><code>qdmanage</code></dt>
<dd>
<p>A command-line tool for viewing and updating the configuration of Dispatch Router routers.</p>
</dd>
</dl>
</div>
<div class="sect2">
<h3 id="using_apache_qpid_dispatch_router_console">9.1. Using Apache Qpid Dispatch Router Console</h3>
<div class="sect3">
<h4 id="console-overview">9.1.1. Console Overview</h4>
<div class="paragraph">
<p>The console is an HTML based web site that displays information about a qpid dispatch router network.</p>
</div>
<div class="paragraph">
<p>The console requires an HTML web server that can serve static html, javascript, style sheets, and images.</p>
</div>
<div class="paragraph">
<p>The console only provides limited information about the clients that are attached to the router network and is therfore more appropriate for administrators needing to know the layout and health of the router network.</p>
</div>
</div>
<div class="sect3">
<h4 id="console-installation">9.1.2. Console Installation</h4>
<h5 id="prerequisites" class="discrete">Prerequisites</h5>
<div class="paragraph">
<p>The following need to be installed before running a console:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>One or more dispatch routers. See the documentation for the dispatch
router for help in starting a router network.</p>
</li>
<li>
<p>A websockets to tcp proxy.</p>
</li>
<li>
<p>A web server. This can be any server capable of serving static
html/js/css/image files.</p>
</li>
</ul>
</div>
<h5 id="procedure" class="discrete">Procedure</h5>
<div class="paragraph">
<p>To install a websockets to tcp proxy:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>sudo dnf install python-websockify
websockify localhost:5673 localhost:5672</pre>
</div>
</div>
<div class="paragraph">
<p>This will start the proxy listening to ws traffic on port 5673 and
translating it to tcp on port 5672. One of the routers in the network
needs to have a listener configured on port 5672. That listener&#8217;s role
should be 'normal'. For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>listener {
   host: 0.0.0.0
   role: normal
   port: amqp
   saslMechanisms: ANONYMOUS
}</pre>
</div>
</div>
<div class="sect4">
<h5 id="the-console-files">The Console Files</h5>
<div class="paragraph">
<p>The files for the console are located under the console/stand-alone
directory in the source tree
*  'index.html'
*  'plugin/'</p>
</div>
<div class="paragraph">
<p>Copy these files to a directory under the the html or webapps directory
of your web server. For example, for apache tomcat the files should be
under webapps/dispatch. Then the console is available as 'http://localhost:8080/dispatch'</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="console-operation">9.1.3. Console Operation</h4>
<div class="sect4">
<h5 id="logging-in-to-a-router-network">Logging into a Router Network</h5>
<div class="paragraph">
<p><span class="image"><img src="images/console_login.png" alt="image"></span></p>
</div>
<div class="paragraph">
<p>Enter the address of the websockets to tcp proxy that is connected to a router in the network.</p>
</div>
<div class="paragraph">
<p>The Autostart checkbox, when checked, will automatically log in with the previous host:port the next time you start the console.</p>
</div>
</div>
<div class="sect4">
<h5 id="overview-page">Overview Page</h5>
<div class="paragraph">
<p><span class="image"><img src="images/console_overview.png" alt="image"></span></p>
</div>
<div class="paragraph">
<p>On the overview page, aggregate information about routers, addresses, and connections is displayed.</p>
</div>
</div>
<div class="sect4">
<h5 id="topology-page">Topology Page</h5>
<div class="paragraph">
<p><span class="image"><img src="images/console_topology.png" alt="image"></span></p>
</div>
<div class="paragraph">
<p>This page displays the router network in a graphical form showing how the routers are connected and information about the individual routers and links.</p>
</div>
</div>
<div class="sect4">
<h5 id="list-page">List Page</h5>
<div class="paragraph">
<p><span class="image"><img src="images/console_entity.png" alt="image"></span></p>
</div>
<div class="paragraph">
<p>Displays detailed information about entities such as routers, links, addresses, memory.</p>
</div>
</div>
<div class="sect4">
<h5 id="charts-page">Charts Page</h5>
<div class="paragraph">
<p><span class="image"><img src="images/console_charts.png" alt="image"></span></p>
</div>
<div class="paragraph">
<p>This page displays graphs of numeric values that are on the list page.</p>
</div>
</div>
<div class="sect4">
<h5 id="schema-page">Schema Page</h5>
<div class="paragraph">
<p><span class="image"><img src="images/console_schema.png" alt="image"></span></p>
</div>
<div class="paragraph">
<p>This page displays the json schema that is used to manage the router network.</p>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="monitoring-using-qdstat">9.2. Monitoring Dispatch Router Using <code>qdstat</code></h3>
<div class="paragraph">
<p>You can use <code>qdstat</code> to view the status of routers on your router network. For example, you can view information about the attached links and configured addresses, available connections, and nodes in the router network.</p>
</div>
<div class="sect3">
<h4 id="syntax_for_using_code_qdstat_code">9.2.1. Syntax for Using <code>qdstat</code></h4>
<div class="paragraph">
<p>You can use <code>qdstat</code> with the following syntax:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat <em>OPTION</em> [<em>CONNECTION_OPTIONS</em>] [<em>SECURE_CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>This specifies:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>An <code>option</code> for the type of information to view.</p>
</li>
<li>
<p>One or more optional <code>connection_options</code> to specify a router for which to view the information.</p>
<div class="paragraph">
<p>If you do not specify a connection option, <code>qdstat</code> connects to the router listening on localhost and the default AMQP port (5672).</p>
</div>
</li>
<li>
<p>The <code>secure_connection_options</code> if the router for which you want to view information only accepts secure connections.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For more information about <code>qdstat</code>, see the <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdstat.html" target="_blank" rel="noopener">qdstat man page</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="viewing_general_statistics_for_a_router">9.2.2. Viewing General Statistics for a Router</h4>
<div class="paragraph">
<p>You can view information about a router in the router network, such as its working mode and ID.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use the following command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -g [<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>This example shows general statistics for the local router:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -g
Router Statistics
  attr                             value
  =============================================
  Version                          1.2.0
  Mode                             standalone
  Router Id                        Router.A
  Link Routes                      0
  Auto Links                       0
  Links                            2
  Nodes                            0
  Addresses                        4
  Connections                      1
  Presettled Count                 0
  Dropped Presettled Count         0
  Accepted Count                   2
  Rejected Count                   0
  Released Count                   0
  Modified Count                   0
  Ingress Count                    2
  Egress Count                     1
  Transit Count                    0
  Deliveries from Route Container  0
  Deliveries to Route Container    0</pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_a_list_of_connections_to_a_router">9.2.3. Viewing a List of Connections to a Router</h4>
<div class="paragraph">
<p>You can view:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Connections from clients (sender/receiver)</p>
</li>
<li>
<p>Connections from and to other routers in the network</p>
</li>
<li>
<p>Connections to other containers (such as brokers)</p>
</li>
<li>
<p>Connections from the tool itself</p>
</li>
</ul>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use this command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -c [<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about the fields displayed by this command, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdstat.html#_qdstat_c" target="_blank" rel="noopener">the qdstat -c output columns</a>.</p>
</div>
<div class="paragraph">
<p>In this example, two clients are connected to <code>Router.A</code>. <code>Router.A</code> is connected to <code>Router.B</code> and a broker.</p>
</div>
<div class="paragraph">
<p>Viewing the connections on Router.A displays the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -c -r Router.A
Connections
id    host                        container                              role             dir  security     authentication  tenant
==================================================================================================================================
  2   127.0.0.1:5672                                                     route-container  out  no-security  anonymous-user   <b class="conum">(1)</b>
  10  127.0.0.1:5001               Router.B                              inter-router     out  no-security  anonymous-user   <b class="conum">(2)</b>
  12  localhost.localdomain:42972  161211fe-ba9e-4726-9996-52d6962d1276  normal           in   no-security  anonymous-user   <b class="conum">(3)</b>
  14  localhost.localdomain:42980  a35fcc78-63d9-4bed-b57c-053969c38fda  normal           in   no-security  anonymous-user   <b class="conum">(3)</b>
  15  localhost.localdomain:42982  0a03aa5b-7c45-4500-8b38-db81d01ce651  normal           in   no-security  anonymous-user   <b class="conum">(4)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>This connection shows that <code>Router.A</code> is connected to a broker, because the <code>role</code> is <code>route-container</code>, and the <code>dir</code> is <code>out</code>.</p>
</li>
<li>
<p><code>Router.A</code> is also connected to another router on the network (the <code>role</code> is <code>inter-router</code>), establishing an output connection (the <code>dir</code> is <code>out</code>).</p>
</li>
<li>
<p>These connections show that two clients are connected to <code>Router.A</code>, because the <code>role</code> is <code>normal</code>, and the <code>dir</code> is <code>in</code>.</p>
</li>
<li>
<p>The connection from <code>qdstat</code> to <code>Router.A</code>. This is the connection that <code>qdstat</code> uses to query <code>Router.A</code> and display the command output.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p><code>Router.A</code> is connected to <code>Router.B</code>. Viewing the connections on <code>Router.B</code> displays the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -c -r Router.B
Connections
id    host                         container  role          dir  security     authentication  tenant
====================================================================================================
  1   localhost.localdomain:51848  Router.A   inter-router  in   no-security  anonymous-user    <b class="conum">(1)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>This connection shows that <code>Router.B</code> is connected to <code>Router.A</code> through an incoming connection (the <code>role</code> is <code>inter-router</code> and the <code>dir</code> is <code>in</code>). There is not a connection from <code>qdstat</code> to <code>Router.B</code>, because the command was run from <code>Router.A</code> and forwarded to <code>Router.B</code>.</p>
</li>
</ol>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_amqp_links_attached_to_a_router">9.2.4. Viewing AMQP Links Attached to a Router</h4>
<div class="paragraph">
<p>You can view a list of AMQP links attached to the router from clients (sender/receiver), from or to other routers into the network, to other containers (for example, brokers), and from the tool itself.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use this command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -l [<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about the fields displayed by this command, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdstat.html#_qdstat_l" target="_blank" rel="noopener">the qdstat -l output columns</a>.</p>
</div>
<div class="paragraph">
<p>In this example, <code>Router.A</code> is connected to both <code>Router.B</code> and a broker. A link route is configured for the <code>my_queue</code> queue and waypoint (with autolinks), and for the <code>my_queue_wp</code> queue on the broker. In addition, there is a receiver connected to <code>my_address</code> (message routing based), another to <code>my_queue</code>, and the a third one to <code>my_queue_wp</code>.</p>
</div>
<div class="paragraph">
<p>In this configuration, the router uses only one connection to the broker for both the waypoints (related to <code>my_queue_wp</code>) and the link route (related to <code>my_queue</code>).</p>
</div>
<div class="paragraph">
<p>Viewing the links displays the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -l
Router Links
  type            dir  conn id  id  peer  class   addr                  phs  cap  undel  unsett  del  presett  psdrop  acc  rej  rel  mod  admin    oper
  ======================================================================================================================================================
  router-control  in   2        7                                            250  0      0       2876 0        0       0    0    0    0    enabled  up <b class="conum">(1)</b>
  router-control  out  2        8         local   qdhello                    250  0      0       2716 0        0       0    0    0    0    enabled  up
  inter-router    in   2        9                                            250  0      0       1    0        0       0    0    0    0    enabled  up
  inter-router    out  2        10                                           250  0      0       1    0        0       0    0    0    0    enabled  up
  endpoint        in   1        11        mobile  my_queue_wp           1    250  0      0       3    0        0       0    0    0    0    enabled  up <b class="conum">(2)</b>
  endpoint        out  1        12        mobile  my_queue_wp           0    250  0      0       3    0        0       0    0    0    0    enabled  up
  endpoint        out  4        15        mobile  my_address            0    250  0      0       0    0        0       0    0    0    0    enabled  up <b class="conum">(3)</b>
  endpoint        out  6        18  19                                       250  0      0       1    0        0       0    0    0    0    enabled  up <b class="conum">(4)</b>
  endpoint        in   1        19  18                                       0    0      0       1    0        0       0    0    0    0    enabled  up <b class="conum">(5)</b>
  endpoint        out  19       40        mobile  my_queue_wp           1    250  0      0       1    0        0       0    0    0    0    enabled  up <b class="conum">(6)</b>
  endpoint        in   24       48        mobile  $management           0    250  0      0       1    0        0       0    0    0    0    enabled  up
  endpoint        out  24       49        local   temp.mx5HxzUe2Eddw_s       250  0      0       0    0        0       0    0    0    0    enabled  up</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The <code>conn id</code> 2 connection has four links (in both directions) for inter-router communications with <code>Router.B</code>, such as control messages and normal message-routed deliveries.</p>
</li>
<li>
<p>There are two autolinks (<code>conn id 1</code>) for the waypoint for <code>my_queue_wp</code>. There is an incoming (<code>id 11</code>) and outgoing (<code>id 12</code>) link to the broker, and another <code>out</code> link (<code>id 40</code>) to the receiver.</p>
</li>
<li>
<p>A <code>mobile</code> link for <code>my_address</code>. The <code>dir</code> is <code>out</code> related to the receiver attached to it.</p>
</li>
<li>
<p>The <code>out</code> link from the router to the receiver for <code>my_queue</code>. This enables the router to deliver messages to the receiver.</p>
</li>
<li>
<p>The <code>in</code> link to the router for <code>my_queue</code>. This enables the router to get messages from <code>my_queue</code> so that they can be sent to the receiver on the <code>out</code> link.</p>
</li>
<li>
<p>The remaining links are related to the <code>$management</code> address and are used by <code>qdstat</code> to receive the information that is displayed by this command.</p>
</li>
</ol>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_known_routers_on_a_network">9.2.5. Viewing Known Routers on a Network</h4>
<div class="paragraph">
<p>To see the topology of the router network, you can view known routers on the network.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use this command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -n [<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about the fields displayed by this command, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdstat.html#_qdstat_n" target="_blank" rel="noopener">the qdstat -n output columns</a>.</p>
</div>
<div class="paragraph">
<p>In this example, <code>Router.A</code> is connected to <code>Router.B</code>, which is connected to <code>Router.C</code>. Viewing the router topology on <code>Router.A</code> shows the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -n -r Router.A
Routers in the Network
  router-id  next-hop  link  cost  neighbors                 valid-origins
  ==========================================================================
  Router.A   (self)    -           ['Router.B']              [] <b class="conum">(1)</b>
  Router.B   -         0     1     ['Router.A', 'Router.C']  [] <b class="conum">(2)</b>
  Router.C   Router.B  -     2     ['Router.B']              [] <b class="conum">(3)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p><code>Router.A</code> has one neighbor: <code>Router.B</code>.</p>
</li>
<li>
<p><code>Router.B</code> is connected to <code>Router.A</code> and <code>Router.C</code> over <code>link</code> 0. The <code>cost</code> for <code>Router.A</code> to reach <code>Router.B</code> is 1, because the two routers are connected directly.</p>
</li>
<li>
<p><code>Router.C</code> is connected to <code>Router.B</code>, but not to <code>Router.A</code>. The <code>cost</code> for <code>Router.A</code> to reach <code>Router.C</code> is 2, because messages would have to pass through <code>Router.B</code> as the <code>next-hop</code>.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p><code>Router.B</code> shows a different view of the router topology:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -n -v -r Router.B
Routers in the Network
  router-id  next-hop  link  cost  neighbors                 valid-origins
  ==========================================================================
  Router.A   -         0     1     ['Router.B']              ['Router.C']
  Router.B   (self)    -           ['Router.A', 'Router.C']  []
  Router.C   -         1     1     ['Router.B']              ['Router.A']</pre>
</div>
</div>
<div class="paragraph">
<p>The <code>neighbors</code> list is the same when viewed on <code>Router.B</code>. However, from the perspective of <code>Router.B</code>, the destinations on <code>Router.A</code> and <code>Router.C</code> both have a <code>cost</code> of <code>1</code>. This is because <code>Router.B</code> is connected to <code>Router.A</code> and <code>Router.C</code> through links.</p>
</div>
<div class="paragraph">
<p>The <code>valid-origins</code> column shows that starting from <code>Router.C</code>, <code>Router.B</code> has the best path to reach <code>Router.A</code>. Likewise, starting from <code>Router.A</code>, <code>Router.B</code> has the best path to reach <code>Router.C</code>.</p>
</div>
<div class="paragraph">
<p>Finally, <code>Router.C</code> shows the following details about the router topology:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -n -v -r Router.C
Routers in the Network
  router-id  next-hop  link  cost  neighbors                 valid-origins
  ==========================================================================
  Router.A   Router.B  -     2     ['Router.B']              []
  Router.B   -         0     1     ['Router.A', 'Router.C']  []
  Router.C   (self)    -           ['Router.B']              []</pre>
</div>
</div>
<div class="paragraph">
<p>Due to a symmetric topology, the <code>Router.C</code> perspective of the topology is very similar to the <code>Router.A</code> perspective. The primary difference is the <code>cost</code>: the cost to reach <code>Router.B</code> is <code>1</code>, because the two routers are connected. However, the cost to reach <code>Router.A</code> is <code>2</code>, because the messages would have to pass through <code>Router.B</code> as the <code>next-hop</code>.</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_addresses_known_to_a_router">9.2.6. Viewing Addresses Known to a Router</h4>
<div class="paragraph">
<p>You can view message-routed and link-routed addresses known to a router.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use the following command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -a [<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about the fields displayed by this command, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdstat.html#_qdstat_a" target="_blank" rel="noopener">the qdstat -a output columns</a>.</p>
</div>
<div class="paragraph">
<p>In this example, <code>Router.A</code> is connected to both <code>Router.B</code> and a broker. The broker has two queues:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>my_queue</code> (with a link route on <code>Router.A</code>)</p>
</li>
<li>
<p><code>my_queue_wp</code> (with a waypoint and autolinks configured on <code>Router.A</code>)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In addition, there are three receivers: one connected to <code>my_address</code> for message routing, another connected to <code>my_queue</code>, and the last one connected to <code>my_queue_wp</code>.</p>
</div>
<div class="paragraph">
<p>Viewing the addresses displays the following information:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -a
Router Addresses
  class     addr                   phs  distrib       in-proc  local  remote  cntnr  in  out  thru  to-proc  from-proc
  ======================================================================================================================
  local     $_management_internal       closest       1        0      0       0      0   0    0     0        0
  local     $displayname                closest       1        0      0       0      0   0    0     0        0
  mobile    $management            0    closest       1        0      0       0      8   0    0     8        0
  local     $management                 closest       1        0      0       0      0   0    0     0        0
  router    Router.B                    closest       0        0      1       0      0   0    5     0        5 <b class="conum">(1)</b>
  mobile    my_address             0    closest       0        1      0       0      1   1    0     0        0 <b class="conum">(2)</b>
  link-in   my_queue                    linkBalanced  0        0      0       1      0   0    0     0        0 <b class="conum">(3)</b>
  link-out  my_queue                    linkBalanced  0        0      0       1      0   0    0     0        0
  mobile    my_queue_wp            1    balanced      0        1      0       0      1   1    0     0        0 <b class="conum">(4)</b>
  mobile    my_queue_wp            0    balanced      0        1      0       0      1   1    0     0        0
  local     qdhello                     flood         1        1      0       0      0   0    0     741      706 <b class="conum">(5)</b>
  local     qdrouter                    flood         1        0      0       0      0   0    0     4        0
  topo      qdrouter                    flood         1        0      1       0      0   0    27    28       28
  local     qdrouter.ma                 multicast     1        0      0       0      0   0    0     1        0
  topo      qdrouter.ma                 multicast     1        0      1       0      0   0    2     0        3
  local     temp.IJSoXoY_lX0TiDE        closest       0        1      0       0      0   0    0     0        0</pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>An address related to <code>Router.B</code> with a <code>remote</code> at 1. This is the consumer from <code>Router.B</code>.</p>
</li>
<li>
<p>The <code>my_address</code> address has one local consumer, which is related to the single receiver attached on that address. The <code>in</code> and <code>out</code> fields are both 1, which means that one message has traveled through this address using the <code>closest</code> distribution method.</p>
</li>
<li>
<p>The incoming link route for the <code>my_queue</code> address. This address has one locally-attached container (<code>cntnr</code>) as a destination (in this case, the broker). The following entry is the outgoing link for the same address.</p>
</li>
<li>
<p>The incoming autolink for the <code>my_queue_wp</code> address and configured waypoint. There is one local consumer (<code>local</code>) for the attached receiver. The following entry is the outgoing autolink for the same address. A single message has traveled through the autolinks.</p>
</li>
<li>
<p>The <code>qdhello</code>, <code>qdrouter</code>, and <code>qdrouter.ma</code> addresses are used to periodically update the network topology and deliver router control messages. These updates are made automatically through the inter-router protocol, and are based on all of the messages the routers have exchanged. In this case, the distribution method (<code>distrib</code>) for each address is either flood or multicast to ensure the control messages reach all of the routers in the network.</p>
</li>
</ol>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_a_router_s_autolinks">9.2.7. Viewing a Router&#8217;s Autolinks</h4>
<div class="paragraph">
<p>You can view a list of the autolinks that are associated with waypoint addresses for a node on another container (such as a broker).</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use the following command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --autolinks [<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about the fields displayed by this command, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdstat.html#_qdstat_autolinks" target="_blank" rel="noopener">the qdstat --autolinks output columns</a>.</p>
</div>
<div class="paragraph">
<p>In this example, a router is connected to a broker. The broker has a queue called <code>my_queue_wp</code>, to which the router is configured with a waypoint and autolinks. Viewing the autolinks displays the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --autolinks
AutoLinks
  addr         dir  phs  link  status  lastErr
  ==============================================
  my_queue_wp  in   1    4     active <b class="conum">(1)</b>
  my_queue_wp  out  0    5     active <b class="conum">(2)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The incoming autolink from <code>my_queue_wp</code>. As indicated by the <code>status</code> field, the link is active, because the broker is running and the connection for the link is already established (as indicated by the <code>link</code> field).</p>
</li>
<li>
<p>The outgoing autlink to <code>my_queue_wp</code>. Like the incoming link, it is active and has an established connection.</p>
</li>
</ol>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_the_status_of_a_router_s_link_routes">9.2.8. Viewing the Status of a Router&#8217;s Link Routes</h4>
<div class="paragraph">
<p>You can view the status of each incoming and outgoing link route.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use the following command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --linkroutes [<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about the fields displayed by this command, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdstat.html#_qdstat_linkroutes" target="_blank" rel="noopener">the qdstat --linkroutes output columns</a>.</p>
</div>
<div class="paragraph">
<p>In this example, a router is connected to a broker. The router is configured with a link route to the <code>my_queue</code> queue on the broker. Viewing the link routes displays the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat --linkroutes
Link Routes
  prefix    dir  distrib       status
  =====================================
  my_queue  in   linkBalanced  active <b class="conum">(1)</b>
  my_queue  out  linkBalanced  active <b class="conum">(2)</b></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The incoming link route from <code>my_queue</code> to the router. This route is currently active, because the broker is running.</p>
</li>
<li>
<p>The outgoing link from the router to <code>my_queue</code>. This route is also currently active.</p>
</li>
</ol>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="viewing_memory_consumption_information">9.2.9. Viewing Memory Consumption Information</h4>
<div class="paragraph">
<p>If you need to perform debugging or tracing for a router, you can view information about its memory consumption.</p>
</div>
<div class="ulist">
<div class="title">Procedure</div>
<ul>
<li>
<p>Use the following command:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -m [<em>CONNECTION_OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>This command displays information about allocated objects, their size, and their usage by application threads:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdstat -m
Types
  type                     size   batch  thread-max  total  in-threads  rebal-in  rebal-out
  ===========================================================================================
  qd_bitmask_t             24     64     128         64     64          0         0
  qd_buffer_t              536    16     32          80     80          0         0
  qd_composed_field_t      64     64     128         256    256         0         0
  qd_composite_t           112    64     128         320    320         0         0
  ...</pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="managing-router">9.3. Managing Dispatch Router Using <code>qdmanage</code></h3>
<div class="paragraph">
<p>You can use <code>qdmanage</code> to view and modify the configuration of a running router at runtime. Specifically, <code>qdmanage</code> enables you to create, read, update, and delete the sections and attributes in the router&#8217;s configuration file without having to restart the router.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The <code>qdmanage</code> tool implements the AMQP management specification, which means that you can use it with any standard AMQP-managed endpoint, not just with Dispatch Router.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sect3">
<h4 id="syntax_for_using_code_qdmanage_code">9.3.1. Syntax for Using <code>qdmanage</code></h4>
<div class="paragraph">
<p>You can use <code>qdmanage</code> with the following syntax:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdmanage [<em>CONNECTION_OPTIONS</em>] <em>OPERATION</em> [<em>OPTIONS</em>]</pre>
</div>
</div>
<div class="paragraph">
<p>This specifies:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>One or more optional <code>connection_options</code> to specify the router on which to perform the operation, or to supply security credentials if the router only accepts secure connections.</p>
<div class="paragraph">
<p>If you do not specify any connection options, <code>qdmanage</code> connects to the router listening on localhost and the default AMQP port (5672).</p>
</div>
</li>
<li>
<p>The <code>operation</code> to perform on the router.</p>
</li>
<li>
<p>One or more optional <code>options</code> to specify a configuration entity on which to perform the operation or how to format the command output.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>When you enter a <code>qdmanage</code> command, it is executed as an AMQP management operation request, and then the response is returned as command output in JSON format.</p>
</div>
<div class="paragraph">
<p>For example, the following command executes a query operation on a router, and then returns the response in JSON format:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ qdmanage query --type listener
[
  {
    "stripAnnotations": "both",
    "addr": "127.0.0.1",
    "multiTenant": false,
    "requireSsl": false,
    "idleTimeoutSeconds": 16,
    "saslMechanisms": "ANONYMOUS",
    "maxFrameSize": 16384,
    "requireEncryption": false,
    "host": "0.0.0.0",
    "cost": 1,
    "role": "normal",
    "http": false,
    "maxSessions": 32768,
    "authenticatePeer": false,
    "type": "org.apache.qpid.dispatch.listener",
    "port": "amqp",
    "identity": "listener/0.0.0.0:amqp",
    "name": "listener/0.0.0.0:amqp"
  }
]</pre>
</div>
</div>
<div class="paragraph">
<p>For more information about <code>qdmanage</code>, see the <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdmanage.html" target="_blank" rel="noopener">qdmanage man page</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="managing_network_connections">9.3.2. Managing Network Connections</h4>
<div class="paragraph">
<p>You can use <code>qdmanage</code> to view, create, update, and delete listeners and connectors for any router in your router network.</p>
</div>
<div class="sect4">
<h5 id="managing_listeners">Managing Listeners</h5>
<div class="paragraph">
<p>Listeners define how clients can connect to a router. The following table lists the <code>qdmanage</code> commands you can use to perform common operations on listeners.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_listener">listener</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the router’s listeners</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=listener</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the roles and ports on which the router is listening</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query role port --type=listener</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the attributes configured for a listener</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage read --name=<em>LISTENER_NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Create a listener</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --type=listener --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Create multiple listeners</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --stdin</pre>
</div>
</div>
</li>
<li>
<p>Configure the listeners using a JSON map:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type"="listener", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}, {"type"="listener", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}...]</pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>These commands use a JSON map to create two listeners.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update a listener</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=listener --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update multiple listeners</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --stdin</pre>
</div>
</div>
</li>
<li>
<p>Configure the listeners using a JSON map:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type"="listener", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}, {"type"="listener", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}...]</pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>These commands use a JSON map to update two listeners.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete an attribute from a listener</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=listener --<em>ATTRIBUTE</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete a listener</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage delete --name=<em>LISTENER_NAME</em></pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sect4">
<h5 id="managing-connectors">Managing Connectors</h5>
<div class="paragraph">
<p>Connectors define how the router can connect to other endpoints in your messaging network, such as brokers and other routers. The following table lists the <code>qdmanage</code> commands you can use to perform common operations on connectors.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_connector">connector</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the router’s connectors</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=connector</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the roles and ports on which the router can connect to other endpoints</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query role port --type=connector</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">If the router is connected to a broker, view the alternate URLs on which the router can connect to the broker if the primary connection fails</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query failoverUrls --type=connector --name=CONNECTOR_NAME</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the attributes configured for a connector</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage read --name=<em>CONNECTOR_NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Create a connector</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --type=connector --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Create multiple connectors</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --stdin</pre>
</div>
</div>
</li>
<li>
<p>Configure the connectors using a JSON map:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type"="connector", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}, {"type"="connector", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}...]</pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>These commands use a JSON map to create two connectors.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update a connector</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=connector --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update multiple connectors</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --stdin</pre>
</div>
</div>
</li>
<li>
<p>Configure the connectors using a JSON map:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type"="connector", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}, {"type"="connector", "<em>ATTRIBUTE</em>":"<em>VALUE</em>"...}...]</pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>These commands use a JSON map to update two connectors.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete an attribute from a connector</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=connector --<em>ATTRIBUTE</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete a connector</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage delete --name=<em>CONNECTOR_NAME</em></pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect3">
<h4 id="managing_security">9.3.3. Managing Security</h4>
<div class="paragraph">
<p>Dispatch Router supports both SSL/TLS and SASL security protocols for encrypting and authenticating incoming and outgoing connections for your routers. You can use <code>qdmanage</code> to view, create, update, and delete security policies for any router in your router network.</p>
</div>
<div class="sect4">
<h5 id="managing_ssl_tls_encryption_and_authentication">Managing SSL/TLS Encryption and Authentication</h5>
<div class="paragraph">
<p>Dispatch Router supports SSL/TLS for certificate-level encryption and mutual authentication. The following table lists the common <code>qdmanage</code> commands you can use to secure incoming and outgoing connections for a router in your router network.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_sslprofile">sslProfile</a> and <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_listener">listener</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the router’s SSL/TLS configuration</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=sslProfile</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Set up SSL/TLS for the router</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --type=sslProfile --name=<em>NAME</em> --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Add SSL/TLS encryption to an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --sslProfile=<em>NAME</em> --requireSsl=yes</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Change SSL/TLS encryption on an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Add SSL/TLS client authentication to an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --authenticatePeer=yes</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Remove SSL/TLS client authentication from an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --authenticatePeer=no</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Add SSL/TLS client authentication to an outgoing connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>CONNECTOR_NAME</em> --sslProfile=<em>NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Remove SSL/TLS client authentication from an outgoing connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>CONNECTOR_NAME</em> --sslProfile</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete an SSL profile</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage delete --name=<em>SSL_PROFILE_NAME</em></pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sect4">
<h5 id="managing_sasl_encryption_and_authentication">Managing SASL Encryption and Authentication</h5>
<div class="paragraph">
<p>Dispatch Router supports SASL for authentication and payload encryption. The following table lists the common <code>qdmanage</code> commands you can use to secure incoming and outgoing connections for a router in your router network.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_router">router</a> and <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_listener">listener</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Set up SASL for the router</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=router --saslConfigDir=<em>PATH</em> --saslConfigName=<em>NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Add SASL authentication to an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --authenticatePeer=yes --saslMechanisms=<em>MECHANISMS</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Change SASL mechanisms for an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --saslMechanisms=<em>MECHANISMS</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Add SASL authentication to an outgoing connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>CONNECTOR_NAME</em> --saslMechanisms=<em>MECHANISMS</em> --saslUsername=<em>USERNAME</em> --saslPassword=<em>PASSWORD</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Change SASL mechanisms for an outgoing connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>CONNECTOR_NAME</em> --saslMechanisms=<em>MECHANISMS</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Add SASL payload encryption to an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --requireEncryption=yes --saslMechanisms=<em>MECHANISMS</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Change SASL mechanisms for an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --saslMechanisms=<em>MECHANISMS</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Remove SASL payload encryption from an incoming connection</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LISTENER_NAME</em> --requireEncryption=no --saslMechanisms</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete a SASL configuration</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=router --saslConfigDir --saslConfigName</pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect3">
<h4 id="managing_routing">9.3.4. Managing Routing</h4>
<div class="paragraph">
<p>Dispatch Router supports both message routing and link routing for distributing messages between senders and receivers. You can use <code>qdmanage</code> to view how addresses and link routes are configured in your environment, and define how a router should distribute messages.</p>
</div>
<div class="sect4">
<h5 id="managing_message_routing">Managing Message Routing</h5>
<div class="paragraph">
<p>Message routing involves configuring addresses to define how Dispatch Router should distribute messages. The following table lists the common <code>qdmanage</code> commands you can use to configure addresses for a router in your router network.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_address">address</a> and <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_autolink">autolink</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View addresses</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=address</pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage read --name=<em>ADDRESS_NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View address distribution patterns</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query prefix distribution --type=address</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View waypoints to broker queues</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query prefix --type=address --waypoint=yes</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View autolinks</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=autolink</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Set a distribution pattern for an address</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --type=address --prefix=<em>ADDRESS_PREFIX</em> --distribution=<em>DISTRIBUTION_PATTERN</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Set distribution patterns for multiple addresses</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --stdin</pre>
</div>
</div>
</li>
<li>
<p>Configure the addresses using a JSON map:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type":"address", "prefix":"<em>ADDRESS_PREFIX</em>", "distribution":"<em>DISTRIBUTION_PATTERN</em>", "<em>ATTRIBUTE</em>":"<em>VALUE</em>", ...}, {"type":"address", "prefix":"<em>ADDRESS_PREFIX</em>", "distribution":"<em>DISTRIBUTION_PATTERN</em>", "<em>ATTRIBUTE</em>":"<em>VALUE</em>", ...} ...]</pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>These commands configure two addresses.</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Connect an address to a broker queue</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --stdin</pre>
</div>
</div>
</li>
<li>
<p>Create an address waypoint, an incoming autolink, and an outgoing autolink:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type":"address", "prefix":"<em>ADDRESS_PREFIX</em>", "waypoint":"yes"}, {"type":"autolink", "addr":"<em>ADDRESS_NAME</em>", "connection":"<em>CONNECTOR/LISTENER_NAME</em>", "direction":"in"}, {"type":"autolink", "addr":"<em>ADDRESS_NAME</em>", "connection":"<em>CONNECTOR/LISTENER_NAME</em>", "direction":"out"}]</pre>
</div>
</div>
</li>
</ol>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update an address configuration</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>ADDRESS_NAME</em> --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update an autolink</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>AUTOLINK_NAME</em> --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete an address configuration</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage delete --name=<em>ADDRESS_NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete an autolink</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage delete --name=<em>AUTOLINK_NAME</em></pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sect4">
<h5 id="managing_link_routing">Managing Link Routing</h5>
<div class="paragraph">
<p>A link route is a chain of links between a sender and receiver that provides a private messaging path. The following table lists the common <code>qdmanage</code> commands you can use to view, create, update, and delete link routes.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see the <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_linkroute">linkRoute</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View link routes</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=linkRoute</pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage read --name=<em>LINK_ROUTE_NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Create a link route</p></td>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>Enter this command:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage create --stdin</pre>
</div>
</div>
</li>
<li>
<p>Create an incoming and outgoing link route:</p>
<div class="listingblock">
<div class="content">
<pre class="nowrap">[{"type":"linkRoute", "prefix":"<em>ADDRESS_PREFIX</em>", "connection":"<em>CONNECTOR/LISTENER_NAME</em>", "direction":"in", ...}, {"type":"linkRoute", "prefix":"<em>ADDRESS_PREFIX</em>", "connection":"<em>CONNECTOR/LISTENER_NAME</em>", "direction":"out", ...}]</pre>
</div>
</div>
</li>
</ol>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Update a link route</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --name=<em>LINK_ROUTE_NAME</em> --<em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete a link route</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage delete --name=<em>INCOMING_LINK_ROUTE_NAME</em>
qdmanage delete --name=<em>OUTGOING_LINK_ROUTE_NAME</em></pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect3">
<h4 id="managing_logging">9.3.5. Managing Logging</h4>
<div class="paragraph">
<p>Dispatch Router logs are broken into different categories called logging modules. Each module provides important information about a particular aspect of a router. The following table lists the common <code>qdmanage</code> commands you can use to view and change the configuration of a logging module.</p>
</div>
<div class="paragraph">
<p>For more information about the attributes you can use with these commands, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdrouterd.conf.html#_log">log</a> in the <code>qdrouterd.conf</code> man page.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>The commands in this table demonstrate operations on the local router listening on localhost and the default AMQP port (5672). If you want to perform an operation on a different router in the router network, you must specify the necessary connection options. For more information, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/qdmanage.html#_connection_options">Connection Options</a> in the qdmanage man page.</p>
</div>
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 70%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">To&#8230;&#8203;</th>
<th class="tableblock halign-left valign-top">Use this command&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the logging configuration</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage query --type=log</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">View the logging configuration for a logging module</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage read --type=log --name=log/<em>LOGGING_MODULE_NAME</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Set the default logging configuration</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=log --name=log/DEFAULT enable=<em>LOGGING_LEVEL</em> includeTimestamp=yes <em>ATTRIBUTE</em>=<em>VALUE</em></pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Enable logging for a logging module</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=log --name=log/<em>LOGGING_MODULE_NAME</em> enable=<em>LOGGING_LEVEL</em> <em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Change the logging configuration for a logging module</p></td>
<td class="tableblock halign-left valign-top"><div><div class="listingblock">
<div class="content">
<pre class="nowrap">qdmanage update --type=log --name=log/<em>LOGGING_MODULE_NAME</em> <em>ATTRIBUTE</em>=<em>VALUE</em> ...</pre>
</div>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect2">
<h3 id="management_entities">9.4. Management Entities</h3>
<div class="paragraph">
<p>The Dispatch Router management schema provides a set of management entities that you can use to configure and operate a router.</p>
</div>
<div class="paragraph">
<p>For details about the management entities, see <a href="https://qpid.apache.org/releases/qpid-dispatch-1.0.1/man/managementschema.html" target="_blank" rel="noopener">Dispatch Router Management Schema</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="reliability">10. Reliability</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In general, in a broker based architecture, the reliability feature is strictly related to the "store and forward" mechanism offered by each broker. Thanks to persistent journals, a broker can offer fault tolerance thus avoiding message loss; of course, it is not so true when messages are stored only in a volatile memory.</p>
</div>
<div class="paragraph">
<p>This is completely different using Dispatch Router, because each router neither takes ownership of messages nor stores them in a persistent storage. In this case, the reliability feature is offered by <strong>path redundancy</strong> which provides the possibility to reach the destination on different paths through the router network. In normal conditions, the best path is always chosen in terms of lowest cost but, when one or more routers go down, the topology is revisited by all remained routers and new paths are processed in order to reach always each destination. Of course, it means that the reliability is strictly related to the network topology the user chooses for his solution.</p>
</div>
<div class="paragraph">
<p>Because a solution based on Dispatch Router could be made not only by routers but by brokers too, the reliability is improved with persistent storage on them which add not only fault tolerance but temporal decoupling as well; without "store and forward" feature offered by brokers, the temporal decoupling is not possible only with routers and direct peers, both senders and receivers; the receiver must be online at same time of the sender in order to receive messages.</p>
</div>
<div class="sect2">
<h3 id="path_redundancy">10.1. Path Redundancy</h3>
<div class="paragraph">
<p>Offering path redundancy means designing the network topology in a way that even when one or more routers go down or even connections between them, each destination is always reachable following alternate paths through the routers that are still part of the network.</p>
</div>
<div class="paragraph">
<p>Consider the following simple scenario :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>a network with three routers "Router.A", "Router.B" and "Router.C".</p>
</li>
<li>
<p>the "Router.A" is connected to both "Router.B" and "Router.C".</p>
</li>
<li>
<p>the "Router.C is connected to the "Router.B".</p>
</li>
<li>
<p>all three routers listen for client connections.</p>
</li>
<li>
<p>a sender client connects to the "Router.A" in order to send messages to a receiver client.</p>
</li>
<li>
<p>a receiver client connects to the "Router.B" initially in order to receive messages from the sender peer.</p>
</li>
</ul>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/path-redundancy-01.png" alt="Path Redundancy Enabled Topology">
</div>
<div class="title">Figure 9. Path Redundancy Enabled Topology</div>
</div>
<div class="paragraph">
<p>The "Router.A" configuration is something like following.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">router {
    mode: interior
    id: Router.A
}

listener {
    host: 0.0.0.0
    port: 6000
    authenticatePeer: no
}

connector {
    name: INTER_ROUTER_B
    addr: 127.0.0.1
    port: 5001
    role: inter-router
}

connector {
    name: INTER_ROUTER_C
    addr: 127.0.0.1
    port: 5002
    role: inter-router
}</pre>
</div>
</div>
<div class="paragraph">
<p>There is only one <em>listener</em> in order to accept client connections and two <em>connector</em> entities for connecting to the other two routers.</p>
</div>
<div class="paragraph">
<p>The "Router.B" configuration is the following.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">router {
    mode: interior
    id: Router.B
}

listener {
    addr: 0.0.0.0
    port: 5001
    authenticatePeer: no
    role: inter-router
}

listener {
    host: 0.0.0.0
    port: 6001
    authenticatePeer: no
}</pre>
</div>
</div>
<div class="paragraph">
<p>It has two <em>listener</em> entities in order to listen for connections from clients and from other routers in the network (in this case from the "Router.A" and "Router.C").</p>
</div>
<div class="paragraph">
<p>Finally, quite similar is the "Router.C" configuration.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">router {
    mode: interior
    id: Router.C
}

listener {
    addr: 0.0.0.0
    port: 5002
    authenticatePeer: no
    role: inter-router
}

listener {
    host: 0.0.0.0
    port: 6002
    authenticatePeer: no
}

connector {
    name: INTER_ROUTER_B
    addr: 127.0.0.1
    port: 5001
    role: inter-router
}</pre>
</div>
</div>
<div class="paragraph">
<p>It has two <em>listener</em> entities in order to listen for connections from clients and from other routers in the network (in this case from the "Router.A") and finally it has a <em>connector</em> (for connecting to the "Router.B")</p>
</div>
<div class="paragraph">
<p>Consider a sender client connected to "Router.A" and attached to <code>my_address</code> address which start to send messages (that is, 10 messages) and a receiver client connected to the "Router.B" and attached to the same address.</p>
</div>
<div class="paragraph">
<p>Starting the receiver, it waits for messages with no output on the console.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo python simple_recv.py -a localhost:6001/my_queue -m 10</pre>
</div>
</div>
<div class="paragraph">
<p>Starting the sender, all the messages flow through "Router.A" and "Router.B" reaching the receiver; at this point the messages are all confirmed at sender side.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo python simple_send.py -a localhost:6001/my_queue -m 10
all messages confirmed</pre>
</div>
</div>
<div class="paragraph">
<p>At same time, the receivers shows the messages received through the "Router.B".</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">{u'sequence': 1L}
{u'sequence': 2L}
{u'sequence': 3L}
{u'sequence': 4L}
{u'sequence': 5L}
{u'sequence': 6L}
{u'sequence': 7L}
{u'sequence': 8L}
{u'sequence': 9L}
{u'sequence': 10L}</pre>
</div>
</div>
<div class="paragraph">
<p>The path redundancy is provided by the other available path through the "Router.A", "Router.C" and then "Router.B". It means that if the connection between "Router.A" and "Router.B" goes down, the alternative path is used to reach the receiver.</p>
</div>
<div class="paragraph">
<p>Now, consider a fault on the "Router.B"; the receiver is not reachable anymore on that path but it can connect to the "Router.C" in order to continue to receive messages from the sender which does not know what&#8217;s happened and it can continue to send messages to the "Router.A" in order to reach the receiver.</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/path-redundancy-02.png" alt="Path Redundancy after Router Failure">
</div>
<div class="title">Figure 10. Path Redundancy after Router Failure</div>
</div>
<div class="paragraph">
<p>The receiver is still reachable in order to get messages from the sender as displayed in the console output.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo python simple_recv.py -a localhost:6002/my_queue -m 10
{u'sequence': 1L}
{u'sequence': 2L}
{u'sequence': 3L}
{u'sequence': 4L}
{u'sequence': 5L}
{u'sequence': 6L}
{u'sequence': 7L}
{u'sequence': 8L}
{u'sequence': 9L}
{u'sequence': 10L}</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="path_redundancy_and_temporal_decoupling">10.2. Path Redundancy and Temporal Decoupling</h3>
<div class="paragraph">
<p>In order to have temporal decoupling in a solution based on Dispatch Router, adding one or more brokers is a must for its "store and forward" feature. Choosing the right topology, it is possible to have a solution which offers reliability with both path redundancy and permanent storing for messages.</p>
</div>
<div class="paragraph">
<p>Consider the following simple scenario :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>a network with three routers "Router.A", "Router.B" and "Router.C" and finally a broker.</p>
</li>
<li>
<p>the "Router.A" is connected to both "Router.B" and "Router.C".</p>
</li>
<li>
<p>initially only the "Router.B" is connected to the broker.</p>
</li>
<li>
<p>all three routers listen for client connections.</p>
</li>
<li>
<p>a sender client connects to the "Router.A" in order to send messages to a queue in the broker.</p>
</li>
<li>
<p>a receiver client connects to the "Router.A" in order to get messages from the queue in the broker.</p>
</li>
</ul>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/path-redundancy-temp-decoupling-01.png" alt="Path Redundancy and Temporal Decoupling Enabled Topology">
</div>
<div class="title">Figure 11. Path Redundancy and Temporal Decoupling Enabled Topology</div>
</div>
<div class="paragraph">
<p>The receiver client can be offline when the sender starts to send messages because they&#8217;ll be stored into the queue permanently; coming back online, the receiver can get messages from the queue itself without message loss.</p>
</div>
<div class="paragraph">
<p>The "Router.A" configuration is something like following.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">router {
    mode: interior
    id: Router.A
}

listener {
    host: 0.0.0.0
    port: 6000
    authenticatePeer: no
}

connector {
    name: INTER_ROUTER_B
    addr: 127.0.0.1
    port: 5001
    role: inter-router
}

connector {
    name: INTER_ROUTER_C
    addr: 127.0.0.1
    port: 5002
    role: inter-router
}

address {
    prefix: my_queue
    waypoint: yes
}</pre>
</div>
</div>
<div class="paragraph">
<p>It has a <em>listener</em> for accepting incoming connections from clients and two <em>connector</em> entities in order to connect to the other routers. The queue named <code>my_queue</code> on the broker is exposed by a waypoint.</p>
</div>
<div class="paragraph">
<p>The "Router.B" configuration is the following.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">router {
    mode: interior
    id: Router.B
}

listener {
    addr: 0.0.0.0
    port: 5001
    authenticatePeer: no
    role: inter-router
}

listener {
    host: 0.0.0.0
    port: 6001
    authenticatePeer: no
}

connector {
    name: BROKER
    addr: 127.0.0.1
    port: 5672
    role: route-container
}

address {
    prefix: my_queue
    waypoint: yes
}

autoLink {
    addr: my_queue
    connection: BROKER
    direction: in
}

autoLink {
    addr: my_queue
    connection: BROKER
    direction: out
}</pre>
</div>
</div>
<div class="paragraph">
<p>It can accept incoming connections from clients and from other routers (in this case the "Router.A") and connects to the broker. The queue named <code>my_queue</code> on the broker is exposed by a waypoint with the related auto-links in both directions in order to send and receive messages to/from the queue itself.</p>
</div>
<div class="paragraph">
<p>Finally, the simple "Router.C" configuration.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">router {
    mode: interior
    id: Router.C
}

listener {
    addr: 0.0.0.0
    port: 5002
    authenticatePeer: no
    role: inter-router
}

listener {
    host: 0.0.0.0
    port: 6002
    authenticatePeer: no
}</pre>
</div>
</div>
<div class="paragraph">
<p>It can accept incoming connections from clients and from other routers (in this case the "Router.A"). Initially there is no connection between this router and the broker.</p>
</div>
<div class="paragraph">
<p>First of all, thanks to the broker and its "store and forward" feature, the sender can connect to the "Router.A" and start to send messages even if the receiver is not online in that moment. Using the Python sample from the Qpid Proton library, the console output is like following.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo python simple_send.py -a localhost:6000/my_queue -m 10
all messages confirmed</pre>
</div>
</div>
<div class="paragraph">
<p>All messages are confirmed because they reached the queue inside the broker through "Router.A" and "Router.B"; it is confirmed using the <code>qdstat</code> tool.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo qdstat -b localhost:6001 -a
Router Addresses
  class   addr                   phs  distrib    in-proc  local  remote  cntnr  in  out  thru  to-proc  from-proc
  =================================================================================================================
  local   $_management_internal       closest    1        0      0       0      0   0    0     0        0
  local   $displayname                closest    1        0      0       0      0   0    0     0        0
  mobile  $management            0    closest    1        0      0       0      1   0    0     1        0
  local   $management                 closest    1        0      0       0      0   0    0     0        0
  router  Router.A                    closest    0        0      1       0      0   0    6     0        6
  router  Router.C                    closest    0        0      1       0      0   0    4     0        4
  mobile  my_queue               1    balanced   0        0      0       0      0   0    0     0        0
  mobile  my_queue               0    balanced   0        1      0       0      0   10   0     0        0
  local   qdhello                     flood      1        1      0       0      0   0    0     97       117
  local   qdrouter                    flood      1        0      0       0      0   0    0     7        0
  topo    qdrouter                    flood      1        0      2       0      0   0    8     13       9
  local   qdrouter.ma                 multicast  1        0      0       0      0   0    0     2        0
  topo    qdrouter.ma                 multicast  1        0      2       0      0   0    0     0        1
  local   temp.7f2u0zv9_U6QC5e        closest    0        1      0       0      0   0    0     0        0</pre>
</div>
</div>
<div class="paragraph">
<p>For the "Router.B", there are 10 messages as output (from the router to the broker) on the <code>my_queue</code> address.</p>
</div>
<div class="paragraph">
<p>Starting the receiver connected to the "Router.A", it gets all the available messages from the queue.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo python simple_recv.py -a localhost:6000/my_queue -m 10
{u'sequence': 1L}
{u'sequence': 2L}
{u'sequence': 3L}
{u'sequence': 4L}
{u'sequence': 5L}
{u'sequence': 6L}
{u'sequence': 7L}
{u'sequence': 8L}
{u'sequence': 9L}
{u'sequence': 10L}</pre>
</div>
</div>
<div class="paragraph">
<p>Using the <code>qdstat</code> tool on the "Router.B" another time, the output is like following.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo qdstat -b localhost:6001 -a
Router Addresses
  class   addr                   phs  distrib    in-proc  local  remote  cntnr  in  out  thru  to-proc  from-proc
  =================================================================================================================
  local   $_management_internal       closest    1        0      0       0      0   0    0     0        0
  local   $displayname                closest    1        0      0       0      0   0    0     0        0
  mobile  $management            0    closest    1        0      0       0      2   0    0     2        0
  local   $management                 closest    1        0      0       0      0   0    0     0        0
  router  Router.A                    closest    0        0      1       0      0   0    6     0        6
  router  Router.C                    closest    0        0      1       0      0   0    4     0        4
  mobile  my_queue               1    balanced   0        0      0       0      10  0    10    0        0
  mobile  my_queue               0    balanced   0        1      0       0      0   10   0     0        0
  local   qdhello                     flood      1        1      0       0      0   0    0     156      182
  local   qdrouter                    flood      1        0      0       0      0   0    0     7        0
  topo    qdrouter                    flood      1        0      2       0      0   0    10    18       11
  local   qdrouter.ma                 multicast  1        0      0       0      0   0    0     2        0
  topo    qdrouter.ma                 multicast  1        0      2       0      0   0    0     2        1
  local   temp.Xov_ZUcyti3jjXY        closest    0        1      0       0      0   0    0     0        0</pre>
</div>
</div>
<div class="paragraph">
<p>For the "Router.B", there are 10 messages as input (from the broker to the router) on the <code>my_queue</code> address.</p>
</div>
<div class="paragraph">
<p>Now, consider a fault on the "Router.B"; in this case the broker is not reachable but it is possible to set up path redundancy through the "Router.C".</p>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/path-redundancy-temp-decoupling-02.png" alt="Path Redundancy and Temporal Decoupling after Router Failure">
</div>
<div class="title">Figure 12. Path Redundancy and Temporal Decoupling after Router Failure</div>
</div>
<div class="paragraph">
<p>Using the <code>qdmanage</code> tool, it is possible to configure the waypoint on <code>my_queue</code> address, the related auto-links in both directions and finally the <em>connector</em> instance in order to enable the connection to the broker.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo qdmanage -b localhost:6002 create --stdin
[
{ "type":"connector", "name":"BROKER", "port":5672, "role":"route-container" },
{ "type":"address", "prefix":"my_queue", "waypoint":"yes" },
{ "type":"autoLink", "addr":"my_queue", "connection":"BROKER", "direction":"in" },
{ "type":"autoLink", "addr":"my_queue", "connection":"BROKER", "direction":"out" }
]
[
  {
    "verifyHostname": true,
    "stripAnnotations": "both",
    "name": "BROKER",
    "allowRedirect": true,
    "idleTimeoutSeconds": 16,
    "maxFrameSize": 65536,
    "host": "127.0.0.1",
    "cost": 1,
    "role": "route-container",
    "maxSessions": 32768,
    "type": "org.apache.qpid.dispatch.connector",
    "port": "5672",
    "identity": "connector/127.0.0.1:5672:BROKER",
    "addr": "127.0.0.1"
  },
  {
    "name": null,
    "prefix": "my_queue",
    "ingressPhase": 0,
    "waypoint": false,
    "distribution": "balanced",
    "type": "org.apache.qpid.dispatch.router.config.address",
    "identity": "7",
    "egressPhase": 0
  },
  {
    "addr": "my_queue",
    "name": null,
    "linkRef": null,
    "type": "org.apache.qpid.dispatch.router.config.autoLink",
    "operStatus": "inactive",
    "connection": "BROKER",
    "direction": "in",
    "phase": 1,
    "lastError": null,
    "externalAddr": null,
    "identity": "8",
    "containerId": null
  },
  {
    "addr": "my_queue",
    "name": null,
    "linkRef": null,
    "type": "org.apache.qpid.dispatch.router.config.autoLink",
    "operStatus": "inactive",
    "connection": "BROKER",
    "direction": "out",
    "phase": 0,
    "lastError": null,
    "externalAddr": null,
    "identity": "9",
    "containerId": null
  }
]</pre>
</div>
</div>
<div class="paragraph">
<p>The "Router.C" configuration changes in the same way as "Router.B". It can accept incoming connections from clients and from other routers (in this case the "Router.A") and connects to the broker. The queue named <code>my_queue</code> on the broker is exposed by a waypoint with the related auto-links in both directions in order to send and receive messages to/from the queue itself.</p>
</div>
<div class="paragraph">
<p>At this point, the sender can connect to the "Router.A" for sending messages to the queue in the broker thanks to the "Router.C".</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo python simple_send.py -a localhost:6000/my_queue -m 10
all messages confirmed</pre>
</div>
</div>
<div class="paragraph">
<p>All messages are confirmed because they reached the queue inside the broker through "Router.A" and "Router.C"; it is confirmed using the <code>qdstat</code> tool.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo qdstat -b localhost:6002 -a
Router Addresses
  class   addr                   phs  distrib    in-proc  local  remote  cntnr  in  out  thru  to-proc  from-proc
  =================================================================================================================
  local   $_management_internal       closest    1        0      0       0      0   0    0     1        1
  local   $displayname                closest    1        0      0       0      0   0    0     0        0
  mobile  $management            0    closest    1        0      0       0      5   0    0     5        0
  local   $management                 closest    1        0      0       0      0   0    0     0        0
  router  Router.A                    closest    0        0      1       0      0   0    5     0        5
  mobile  my_queue               0    balanced   0        1      0       0      0   10   0     0        0
  mobile  my_queue               1    balanced   0        0      0       0      0   0    0     0        0
  local   qdhello                     flood      1        1      0       0      0   0    0     665      647
  local   qdrouter                    flood      1        0      0       0      0   0    0     8        0
  topo    qdrouter                    flood      1        0      1       0      0   0    31    52       32
  local   qdrouter.ma                 multicast  1        0      0       0      0   0    0     1        0
  topo    qdrouter.ma                 multicast  1        0      1       0      0   0    1     2        1
  local   temp.k6UMaS4P0JmtSlL        closest    0        1      0       0      0   0    0     0        0</pre>
</div>
</div>
<div class="paragraph">
<p>For the "Router.C", there are 10 messages as output (from the router to the broker) on the <code>my_queue</code> address.</p>
</div>
<div class="paragraph">
<p>Starting the receiver connected to the "Router.A", it gets all the available messages from the queue.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo python simple_recv.py -a localhost:6000/my_queue -m 10
{u'sequence': 1L}
{u'sequence': 2L}
{u'sequence': 3L}
{u'sequence': 4L}
{u'sequence': 5L}
{u'sequence': 6L}
{u'sequence': 7L}
{u'sequence': 8L}
{u'sequence': 9L}
{u'sequence': 10L}</pre>
</div>
</div>
<div class="paragraph">
<p>Using the <code>qdstat</code> tool on the "Router.C" another time, the output is like following.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo qdstat -b localhost:6002 -a
Router Addresses
  class   addr                   phs  distrib    in-proc  local  remote  cntnr  in  out  thru  to-proc  from-proc
  =================================================================================================================
  local   $_management_internal       closest    1        0      0       0      0   0    0     1        1
  local   $displayname                closest    1        0      0       0      0   0    0     0        0
  mobile  $management            0    closest    1        0      0       0      6   0    0     6        0
  local   $management                 closest    1        0      0       0      0   0    0     0        0
  router  Router.A                    closest    0        0      1       0      0   0    5     0        5
  mobile  my_queue               0    balanced   0        1      0       0      0   10   0     0        0
  mobile  my_queue               1    balanced   0        0      0       0      10  0    10    0        0
  local   qdhello                     flood      1        1      0       0      0   0    0     746      726
  local   qdrouter                    flood      1        0      0       0      0   0    0     8        0
  topo    qdrouter                    flood      1        0      1       0      0   0    34    55       35
  local   qdrouter.ma                 multicast  1        0      0       0      0   0    0     1        0
  topo    qdrouter.ma                 multicast  1        0      1       0      0   0    1     4        1
  local   temp.Hso3moy3l+Sn+Fy        closest    0        1      0       0      0   0    0     0        0</pre>
</div>
</div>
<div class="paragraph">
<p>For the "Router.C", there are 10 messages as input (from the broker to the router) on the <code>my_queue</code> address.</p>
</div>
</div>
<div class="sect2">
<h3 id="sharded_queue">10.3. Sharded Queue</h3>
<div class="paragraph">
<p>Every broker has limits in terms of queue size but in order to overcome this problem, one possible solution is "sharding" queues : in that way a single queue is divided in more "shards" (chunks) each on a different broker. It means that such solution needs more than one broker instance in order to host a shard on each of them. Of course, a sender connected to one of these brokers can send messages to the shard hosted only on that broker. At same time, a receiver connected to a broker can get messages from the shard that is hosted on that broker and can not see available messages in the shards hosted on the other brokers, even if they are all parts of the same queue.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Even if speaking about shards it is obvious that they are real queues all with same name but on different brokers. The "shard" concept is an abstract one because finally a shard is a real queue stored on a broker.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The big problem in this scenario, designed only with brokers, is that a receiver can be stucked on an empty shard without reading any messages while the shards on the other brokers have messages to deliver. it is a real problem because the receiver is interested in receiving messages from the whole queue and it does not take care if it is shared or not. Because of this problem, the receiver sees the queue as empty even if it is not so true due to the sharding and the messages available on the other shards.</p>
</div>
<div class="paragraph">
<p>The above problem can be solved adding a Dispatch Router instance in the network in front of the brokers and leverage on its waypoint feature with related auto-links.</p>
</div>
<div class="paragraph">
<p>Consider the following simple scenario :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>a network with one router "Router.A" and two brokers.</p>
</li>
<li>
<p>the "Router.A" listens for clients connections and it is connected to both brokers.</p>
</li>
<li>
<p>the brokers host shards for a queue; each broker has one shard.</p>
</li>
<li>
<p>a sender client connects to the "Router.A" in order to send messages to the queue.</p>
</li>
<li>
<p>a receiver client connects to the "Router.A" in order to get messages from the queue.</p>
</li>
</ul>
</div>
<div class="imageblock" style="text-align: center">
<div class="content">
<img src="images/sharded-queue-01.png" alt="Sharded Queue Enabled Topology">
</div>
<div class="title">Figure 13. Sharded Queue Enabled Topology</div>
</div>
<div class="paragraph">
<p>With such solution and connecting to the "Router.A", sender and receiver do not know anything about sharding; they want send and receive messages to/from the whole queue that is the only thing they are aware of. They are both connected to the router and see only one address (related to the queue).</p>
</div>
<div class="paragraph">
<p>The "Router.A" configuration is something like following.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">router {
    mode: standalone
    id: Router.A
}

listener {
    host: 0.0.0.0
    port: 6000
    authenticatePeer: no
}

connector {
    name: BROKER1
    addr: 127.0.0.1
    port: 5672
    role: route-container
}

connector {
    name: BROKER2
    addr: 127.0.0.1
    port: 5673
    role: route-container
}

address {
    prefix: my_queue
    waypoint: yes
}

autoLink {
    addr: my_queue
    connection: BROKER1
    direction: in
}

autoLink {
    addr: my_queue
    connection: BROKER1
    direction: out
}

autoLink {
    addr: my_queue
    connection: BROKER2
    direction: in
}

autoLink {
    addr: my_queue
    connection: BROKER2
    direction: out
}</pre>
</div>
</div>
<div class="paragraph">
<p>The router has a <em>listener</em> for incoming connection from clients and two <em>connector</em> instances in order to connect to both brokers. The whole queue is named <code>my_queue</code> hosted in terms of shards on both brokers and the router is configured with a waypoint for that address. Finally, there are two auto-links in both directions for that queue on both brokers.</p>
</div>
<div class="paragraph">
<p>Using the Python sample from the Qpid Proton library, the sender can connect to the "Router.A" and start to send messages to the queue; the console output is like following.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo python simple_send.py -a localhost:6000/my_queue -m 10
all messages confirmed</pre>
</div>
</div>
<div class="paragraph">
<p>All messages are confirmed because they reached the queue and, thanks to the default <code>balanced</code> distribution on the address, the messages are delivered to both shards on the brokers (5 messages per shard). Using the <code>qdstat</code> tool on the router, the distribution is clear.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo qdstat -b localhost:6000 -l
Router Links
  type      dir  conn id  id  peer  class   addr                  phs  cap  undel  unsettled  deliveries  admin    oper
  =======================================================================================================================
  endpoint  in   1        6         mobile  my_queue              1    250  0      0          0           enabled  up
  endpoint  out  1        7         mobile  my_queue              0    250  0      0          5           enabled  up
  endpoint  in   2        8         mobile  my_queue              1    250  0      0          0           enabled  up
  endpoint  out  2        9         mobile  my_queue              0    250  0      0          5           enabled  up
  endpoint  in   8        19        mobile  $management           0    250  0      0          1           enabled  up
  endpoint  out  8        20        local   temp.qCGHruCa4UIvYrS       250  0      0          0           enabled  up</pre>
</div>
</div>
<div class="paragraph">
<p>There are the <code>out</code> links (from router to brokers) for the <code>my_queue</code> address (<em>id</em> values <code>7</code> and <code>9</code>) which have each 5 deliveries. It shows messages distributed across brokers and related shards for the queue; it is confirmed by the different connections they are tied (<em>conn id</em> values <code>1</code> and <code>2</code>).</p>
</div>
<div class="paragraph">
<p>Starting the receiver connected to the "Router.A", it gets all the available messages from the queue.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo python simple_recv.py -a localhost:6000/my_queue -m 10
{u'sequence': 1L}
{u'sequence': 2L}
{u'sequence': 3L}
{u'sequence': 4L}
{u'sequence': 5L}
{u'sequence': 6L}
{u'sequence': 7L}
{u'sequence': 8L}
{u'sequence': 9L}
{u'sequence': 10L}</pre>
</div>
</div>
<div class="paragraph">
<p>As for the sender, they are received through both the brokers and related shards. it is confirmed using the <code>qdstat</code> tool.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo qdstat -b localhost:6000 -l
Router Links
  type      dir  conn id  id  peer  class   addr                  phs  cap  undel  unsettled  deliveries  admin    oper
  =======================================================================================================================
  endpoint  in   1        6         mobile  my_queue              1    250  0      0          5           enabled  up
  endpoint  out  1        7         mobile  my_queue              0    250  0      0          5           enabled  up
  endpoint  in   2        8         mobile  my_queue              1    250  0      0          5           enabled  up
  endpoint  out  2        9         mobile  my_queue              0    250  0      0          5           enabled  up
  endpoint  in   10       22        mobile  $management           0    250  0      0          1           enabled  up
  endpoint  out  10       23        local   temp.HT+f3ZilGP5o3wo       250  0      0          0           enabled  up</pre>
</div>
</div>
<div class="paragraph">
<p>There are the <code>in</code> links (from brokers to router) for the <code>my_queue</code> address (<em>id</em> values <code>6</code> and <code>8</code>) which have each 5 deliveries. It shows messages distributed across brokers and related shards for the queue; it is confirmed by the different connections they are tied (<em>conn id</em> values <code>1</code> and <code>2</code>).</p>
</div>
<div class="paragraph">
<p>One disadvantage of sharded queues is that the receiver might receive messages "out of order" even with very good performance.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="technical-details-specifications">11. Technical Details and Specifications</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="client-compatibility">11.1. Client Compatibility</h3>
<div class="paragraph">
<p>Dispatch Router should, in theory, work with any client that is
compatible with AMQP 1.0. The following clients have been tested:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 22%;">
<col style="width: 78%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><em>Client</em></th>
<th class="tableblock halign-left valign-top"><em>Notes</em></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">qpid::messaging</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The Qpid messaging clients work with Dispatch Router
as long as they are configured to use the 1.0 version of the protocol.
To enable AMQP 1.0 in the C++ client, use the \{protocol:amqp1.0}
connection option.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Proton Reactor</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The Proton Reactor API is compatible with Dispatch Router.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Proton Messenger</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Messenger works with Dispatch Router.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="amqp-mapping">11.2. AMQP Mapping</h3>
<div class="paragraph">
<p>Dispatch Router is an AMQP router and as such, it provides extensions,
code-points, and semantics for routing over AMQP. This page documents the
details of Dispatch Router&#8217;s use of AMQP.</p>
</div>
<div class="sect3">
<h4 id="message-annotations">11.2.1. Message Annotations</h4>
<div class="paragraph">
<p>The following Message Annotation fields are defined by Dispatch Router:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 23%;">
<col style="width: 19%;">
<col style="width: 58.0%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><em>Field</em></th>
<th class="tableblock halign-left valign-top"><em>Type</em></th>
<th class="tableblock halign-left valign-top"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">x-opt-qd.ingress</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The identity of the ingress router for a
message-routed message. The ingress router is the first router
encountered by a transiting message. The router will, if this field is
present, leave it unaltered. If the field is not present, the router
shall insert the field with its own identity.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">x-opt-qd.trace</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">list of string</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The list of routers through which this
message-routed message has transited. If this field is not present, the
router shall do nothing. If the field is present, the router shall
append its own identity to the end of the list.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">x-opt-qd.to</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">string</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">To-Override for message-routed messages. If this
field is present, the address in this field shall be used for routing in
lieu of the <em>to</em> field in the message properties. A router may append,
remove, or modify this annotation field depending on the policy in place
for routing the message.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">x-opt-qd.phase</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">integer</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The address-phase, if not zero, for messages
flowing between routers.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="sourcetarget-capabilities">11.2.2. Source/Target Capabilities</h4>
<div class="paragraph">
<p>The following Capability values are used in Sources and Targets.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 19%;">
<col style="width: 81%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><em>Capability</em></th>
<th class="tableblock halign-left valign-top"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">qd.router</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">This capability is added to sources and targets that are
used for inter-router message exchange. This capability denotes a link
used for router-control messages flowing between routers.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">qd.router-data</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">This capability is added to sources and targets that
are used for inter-router message exchange. This capability denotes a
link used for user messages being message-routed across an inter-router
connection.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="dynamic-node-properties">11.2.3. Dynamic-Node-Properties</h4>
<div class="paragraph">
<p>The following dynamic-node-properties are used by Dispatch Router in Sources.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 23%;">
<col style="width: 77%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><em>Property</em></th>
<th class="tableblock halign-left valign-top"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">x-opt-qd.address</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The node address describing the destination desired
for a dynamic source. If this is absent, the router will terminate any
dynamic receivers. If this address is present, the router will use the
address to route the dynamic link attach to the proper destination
container.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="addresses-and-address-formats">11.2.4. Addresses and Address Formats</h4>
<div class="paragraph">
<p>The following AMQP addresses and address patterns are used within
Dispatch Router.</p>
</div>
<div class="sect4">
<h5 id="address-patterns">Address Patterns</h5>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 38%;">
<col style="width: 62%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><em>Pattern</em></th>
<th class="tableblock halign-left valign-top"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_local/&lt;addr&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">An address that references a locally attached endpoint.
Messages using this address pattern shall not be routed over more than
one link.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_topo/0/&lt;router&gt;/&lt;addr&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">An address that references an endpoint attached to a specific router
node in the network topology. Messages with addresses that follow this
pattern shall be routed along the shortest path to the specified router.
Note that addresses of this form are a-priori routable in that the
address itself contains enough information to route the message to its
destination.</p>
<p class="tableblock">The <code>0</code> component immediately preceding the router-id is a placeholder
for an <em>area</em> which may be used in the future if area routing is
implemented.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;addr&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A mobile address. An address of this format represents an
endpoint or a set of distinct endpoints that are attached to the network
in arbitrary locations. It is the responsibility of the router network
to determine which router nodes are valid destinations for mobile
addresses.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect4">
<h5 id="supported-addresses">Supported Addresses</h5>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 36%;">
<col style="width: 64%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><em>Address</em></th>
<th class="tableblock halign-left valign-top"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>$management</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The management agent on the attached router/container.
This address would be used by an endpoint that is a management
client/console/tool wishing to access management data from the attached
container.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_topo/0/Router.E/$management</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The management agent at Router.E in area
0. This address would be used by a management client wishing to access
management data from a specific container that is reachable within the
network.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_local/qdhello</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The router entity in each of the connected routers.
This address is used to communicate with neighbor routers and is
exclusively for the <code>HELLO</code> discovery protocol.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_local/qdrouter</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The router entity in each of the connected routers.
This address is used by a router to communicate with other routers in
the network.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>_topo/0/Router.E/qdrouter</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The router entity at the specifically
indicated router. This address form is used by a router to communicate
with a specific router that may or may not be a neighbor.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect3">
<h4 id="implementation-of-the-amqp-management-specification">11.2.5. Implementation of the AMQP Management Specification</h4>
<div class="paragraph">
<p>Dispatch Router is manageable remotely via AMQP. It is compliant with the
emerging AMQP Management specification (draft 9).</p>
</div>
<div class="paragraph">
<p>Differences from the specification:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>name</code> attribute is not required when an entity is created. If
not supplied it will be set to the same value as the system-generated
"identity" attribute. Otherwise it is treated as per the standard.</p>
</li>
<li>
<p>The <code>REGISTER</code> and <code>DEREGISTER</code> operations are not implemented. The router
automatically discovers peer routers via the router network and makes
their management addresses available via the standard <code>GET-MGMT-NODES</code>
operation.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cyrus-sasl">Appendix A: Using Cyrus SASL to Provide Authentication</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dispatch Router uses the Cyrus SASL library for SASL authentication. Therefore, if you want to use SASL, you must set up the Cyrus SASL database and configure it.</p>
</div>
<div class="sect2">
<h3 id="generating-sasl-database">A.1. Generating a SASL Database</h3>
<div class="paragraph">
<p>To generate a SASL database to store credentials, enter the following command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo saslpasswd2 -c -f <em>SASL_DATABASE_NAME</em>.sasldb -u <em>DOMAIN_NAME</em> <em>USER_NAME</em></pre>
</div>
</div>
<div class="paragraph">
<p>This command creates or updates the specified SASL database, and adds the specified user name to it. The command also prompts you for the user name&#8217;s password.</p>
</div>
<div class="paragraph">
<p>The full user name is the user name you entered plus the domain name (<code><em>USER_NAME</em></code>@<code><em>DOMAIN_NAME</em></code>). Providing a domain name is not required when you add a user to the database, but if you do not provide one, a default domain will be added automatically (the hostname of the machine on which the tool is running). For example, in the command above, the full user name would be <code>user1@domain.com</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="viewing_users_in_a_sasl_database">A.2. Viewing Users in a SASL Database</h3>
<div class="paragraph">
<p>To view the user names stored in the SASL database:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">$ sudo sasldblistusers2 -f qdrouterd.sasldb
user2@domain.com: <em>PASSWORD</em>
user1@domain.com: <em>PASSWORD</em></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="configuring-sasl-database">A.3. Configuring a SASL Database</h3>
<div class="paragraph">
<p>To use the SASL database to provide authentication in Dispatch Router:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Open the <code>/etc/sasl2/qdrouterd.conf</code> configuration file.</p>
</li>
<li>
<p>Set the following attributes:</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="nowrap">pwcheck_method: auxprop
auxprop_plugin: sasldb
sasldb_path: <em>SASL_DATABASE_NAME</em>
mech_list: <em>MECHANISM1 ...</em></pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>sasldb_path</code></dt>
<dd>
<p>The name of the SASL database to use.</p>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">sasldb_path: qdrouterd.sasldb</pre>
</div>
</div>
</dd>
<dt class="hdlist1"><code>mech_list</code></dt>
<dd>
<p>The SASL mechanisms to enable for authentication. To add multiple mechanisms, separate each entry with a space.</p>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="nowrap">mech_list: ANONYMOUS DIGEST-MD5 EXTERNAL PLAIN</pre>
</div>
</div>
</dd>
</dl>
</div>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p><em>Revised on 2018-10-16 09:26:08 EDT</em></p>
</div>
</div>
</div>
</div>