
<h1>options.hpp</h1>
<div class="highlight"><pre><span></span><span class="cp">#ifndef OPTIONS_HPP</span>
<span class="cp">#define OPTIONS_HPP</span>


<span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;sstream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;ostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;stdexcept&gt;</span><span class="cp"></span>

<span class="k">namespace</span> <span class="n">example</span> <span class="p">{</span>

<span class="k">struct</span> <span class="nl">bad_option</span> <span class="p">:</span> <span class="k">public</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span> <span class="p">{</span>
    <span class="n">bad_option</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span> <span class="o">:</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">};</span>


<span class="k">class</span> <span class="nc">options</span> <span class="p">{</span>
  <span class="k">public</span><span class="o">:</span>

    <span class="n">options</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span> <span class="k">const</span> <span class="o">*</span> <span class="n">argv</span><span class="p">)</span> <span class="o">:</span> <span class="n">argc_</span><span class="p">(</span><span class="n">argc</span><span class="p">),</span> <span class="n">argv_</span><span class="p">(</span><span class="n">argv</span><span class="p">),</span> <span class="n">prog_</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">help_</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">size_t</span> <span class="n">slash</span> <span class="o">=</span> <span class="n">prog_</span><span class="p">.</span><span class="n">find_last_of</span><span class="p">(</span><span class="s">&quot;/</span><span class="se">\\</span><span class="s">&quot;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">slash</span> <span class="o">!=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">npos</span><span class="p">)</span>
            <span class="n">prog_</span> <span class="o">=</span> <span class="n">prog_</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">slash</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// Extract prog name from path</span>
        <span class="n">add_flag</span><span class="p">(</span><span class="n">help_</span><span class="p">,</span> <span class="sc">&#39;h&#39;</span><span class="p">,</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;Print the help message&quot;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="o">~</span><span class="n">options</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">opts</span><span class="o">::</span><span class="n">iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">opts_</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">opts_</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
            <span class="k">delete</span> <span class="o">*</span><span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>

    
    <span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
    <span class="kt">void</span> <span class="n">add_value</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">,</span> <span class="kt">char</span> <span class="n">short_name</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">long_name</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">description</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">var</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">opts_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="k">new</span> <span class="n">option_value</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">short_name</span><span class="p">,</span> <span class="n">long_name</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span> <span class="n">var</span><span class="p">));</span>
    <span class="p">}</span>

    
    <span class="kt">void</span> <span class="n">add_flag</span><span class="p">(</span><span class="kt">bool</span><span class="o">&amp;</span> <span class="n">flag</span><span class="p">,</span> <span class="kt">char</span> <span class="n">short_name</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">long_name</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">description</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">opts_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="k">new</span> <span class="n">option_flag</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">short_name</span><span class="p">,</span> <span class="n">long_name</span><span class="p">,</span> <span class="n">description</span><span class="p">));</span>
    <span class="p">}</span>

    
    <span class="kt">int</span> <span class="n">parse</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">arg</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(;</span> <span class="n">arg</span> <span class="o">&lt;</span> <span class="n">argc_</span> <span class="o">&amp;&amp;</span> <span class="n">argv_</span><span class="p">[</span><span class="n">arg</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">;</span> <span class="o">++</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">opts</span><span class="o">::</span><span class="n">iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">opts_</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">opts_</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="o">*</span><span class="n">i</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">parse</span><span class="p">(</span><span class="n">argc_</span><span class="p">,</span> <span class="n">argv_</span><span class="p">,</span> <span class="n">arg</span><span class="p">))</span>
                <span class="o">++</span><span class="n">i</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">opts_</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
                <span class="k">throw</span> <span class="n">bad_option</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;unknown option &quot;</span><span class="p">)</span> <span class="o">+</span> <span class="n">argv_</span><span class="p">[</span><span class="n">arg</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">help_</span><span class="p">)</span> <span class="k">throw</span> <span class="n">bad_option</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">arg</span><span class="p">;</span>
    <span class="p">}</span>

    
  <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">options</span><span class="o">&amp;</span> <span class="n">op</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;usage: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">op</span><span class="p">.</span><span class="n">prog_</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; [options]&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
      <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;options:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">opts</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">op</span><span class="p">.</span><span class="n">opts_</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">op</span><span class="p">.</span><span class="n">opts_</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="o">**</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
  <span class="p">}</span>

 <span class="k">private</span><span class="o">:</span>
    <span class="k">class</span> <span class="nc">option</span> <span class="p">{</span>
      <span class="k">public</span><span class="o">:</span>
        <span class="n">option</span><span class="p">(</span><span class="kt">char</span> <span class="n">s</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">l</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">d</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">v</span><span class="p">)</span> <span class="o">:</span>
            <span class="n">short_</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;-&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="n">s</span><span class="p">),</span> <span class="n">long_</span><span class="p">(</span><span class="s">&quot;--&quot;</span> <span class="o">+</span> <span class="n">l</span><span class="p">),</span> <span class="n">desc_</span><span class="p">(</span><span class="n">d</span><span class="p">),</span> <span class="n">var_</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="p">{}</span>
        <span class="k">virtual</span> <span class="o">~</span><span class="n">option</span><span class="p">()</span> <span class="p">{}</span>

        <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">parse</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span> <span class="k">const</span> <span class="o">*</span> <span class="n">argv</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">print_default</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span><span class="p">)</span> <span class="k">const</span> <span class="p">{}</span>

      <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">option</span><span class="o">&amp;</span> <span class="n">op</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;  &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">op</span><span class="p">.</span><span class="n">short_</span><span class="p">;</span>
          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">op</span><span class="p">.</span><span class="n">var_</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">op</span><span class="p">.</span><span class="n">var_</span><span class="p">;</span>
          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">op</span><span class="p">.</span><span class="n">long_</span><span class="p">;</span>
          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">op</span><span class="p">.</span><span class="n">var_</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;=&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">op</span><span class="p">.</span><span class="n">var_</span><span class="p">;</span>
          <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;        &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">op</span><span class="p">.</span><span class="n">desc_</span><span class="p">;</span>
          <span class="n">op</span><span class="p">.</span><span class="n">print_default</span><span class="p">(</span><span class="n">os</span><span class="p">);</span>
          <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">protected</span><span class="o">:</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">short_</span><span class="p">,</span> <span class="n">long_</span><span class="p">,</span> <span class="n">desc_</span><span class="p">,</span> <span class="n">var_</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
    <span class="k">class</span> <span class="nc">option_value</span> <span class="o">:</span> <span class="k">public</span> <span class="n">option</span> <span class="p">{</span>
      <span class="k">public</span><span class="o">:</span>
        <span class="n">option_value</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">,</span> <span class="kt">char</span> <span class="n">s</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">l</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">d</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">v</span><span class="p">)</span> <span class="o">:</span>
            <span class="n">option</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">v</span><span class="p">),</span> <span class="n">value_</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{}</span>

        <span class="kt">bool</span> <span class="n">parse</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span> <span class="k">const</span> <span class="o">*</span> <span class="n">argv</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">arg</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">arg</span> <span class="o">==</span> <span class="n">short_</span> <span class="o">||</span> <span class="n">arg</span> <span class="o">==</span> <span class="n">long_</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">set_value</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="o">++</span><span class="n">i</span><span class="p">]);</span>
                    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="k">throw</span> <span class="n">bad_option</span><span class="p">(</span><span class="s">&quot;missing value for &quot;</span> <span class="o">+</span> <span class="n">arg</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">arg</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">long_</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">long_</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">arg</span><span class="p">[</span><span class="n">long_</span><span class="p">.</span><span class="n">size</span><span class="p">()]</span> <span class="o">==</span> <span class="sc">&#39;=&#39;</span> <span class="p">)</span> <span class="p">{</span>
                <span class="n">set_value</span><span class="p">(</span><span class="n">long_</span><span class="p">,</span> <span class="n">arg</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">long_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
                <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">print_default</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; (default &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">value_</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span><span class="p">;</span> <span class="p">}</span>

        <span class="kt">void</span> <span class="n">set_value</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">opt</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">istringstream</span> <span class="n">is</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
            <span class="n">is</span> <span class="o">&gt;&gt;</span> <span class="n">value_</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">is</span><span class="p">.</span><span class="n">fail</span><span class="p">()</span> <span class="o">||</span> <span class="n">is</span><span class="p">.</span><span class="n">bad</span><span class="p">())</span>
                <span class="k">throw</span> <span class="n">bad_option</span><span class="p">(</span><span class="s">&quot;bad value for &quot;</span> <span class="o">+</span> <span class="n">opt</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">s</span><span class="p">);</span>
        <span class="p">}</span>

      <span class="k">private</span><span class="o">:</span>
        <span class="n">T</span><span class="o">&amp;</span> <span class="n">value_</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="k">class</span> <span class="nc">option_flag</span><span class="o">:</span> <span class="k">public</span> <span class="n">option</span> <span class="p">{</span>
      <span class="k">public</span><span class="o">:</span>
        <span class="n">option_flag</span><span class="p">(</span><span class="kt">bool</span><span class="o">&amp;</span> <span class="n">flag</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="n">s</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">l</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">d</span><span class="p">)</span> <span class="o">:</span>
            <span class="n">option</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">),</span> <span class="n">flag_</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
        <span class="p">{</span> <span class="n">flag_</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span> <span class="p">}</span>

        <span class="kt">bool</span> <span class="n">parse</span><span class="p">(</span><span class="kt">int</span> <span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span> <span class="k">const</span> <span class="o">*</span> <span class="n">argv</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">short_</span> <span class="o">||</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">long_</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">flag_</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

      <span class="k">private</span><span class="o">:</span>
        <span class="kt">bool</span> <span class="o">&amp;</span><span class="n">flag_</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">option</span><span class="o">*&gt;</span> <span class="n">opts</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">argc_</span><span class="p">;</span>
    <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span> <span class="k">const</span> <span class="o">*</span> <span class="n">argv_</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">prog_</span><span class="p">;</span>
    <span class="n">opts</span> <span class="n">opts_</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">help_</span><span class="p">;</span>
<span class="p">};</span>
<span class="p">}</span>

<span class="cp">#endif </span><span class="c1">// OPTIONS_HPP</span>
</pre></div>

<p><a href="options.hpp">Download this file</a></p>
