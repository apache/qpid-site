
<h1>reconnect_client.cpp</h1>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&quot;options.hpp&quot;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;proton/connection.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/connection_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/container.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/delivery.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/link.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/message.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/message_id.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/messaging_handler.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/reconnect_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/value.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/types.hpp&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;map&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&quot;fake_cpp11.hpp&quot;</span><span class="cp"></span>

<span class="k">class</span> <span class="nc">reconnect_client</span> <span class="o">:</span> <span class="k">public</span> <span class="n">proton</span><span class="o">::</span><span class="n">messaging_handler</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">url</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">address</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">failovers</span><span class="p">;</span>
    <span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="n">sender</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">sent</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">expected</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">received</span><span class="p">;</span>

  <span class="k">public</span><span class="o">:</span>
    <span class="n">reconnect_client</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">u</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">f</span><span class="p">)</span> <span class="o">:</span>
        <span class="n">url</span><span class="p">(</span><span class="n">u</span><span class="p">),</span> <span class="n">address</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">failovers</span><span class="p">(</span><span class="n">f</span><span class="p">),</span> <span class="n">sent</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">expected</span><span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="n">received</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>

  <span class="k">private</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">on_container_start</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">container</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">connection_options</span> <span class="n">co</span><span class="p">;</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">reconnect_options</span> <span class="n">ro</span><span class="p">;</span>

        <span class="n">ro</span><span class="p">.</span><span class="n">failover_urls</span><span class="p">(</span><span class="n">failovers</span><span class="p">);</span>
        <span class="n">co</span><span class="p">.</span><span class="n">reconnect</span><span class="p">(</span><span class="n">ro</span><span class="p">);</span>
        <span class="n">c</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">co</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_connection_open</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">connection</span> <span class="o">&amp;</span> <span class="n">c</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">c</span><span class="p">.</span><span class="n">open_receiver</span><span class="p">(</span><span class="n">address</span><span class="p">);</span>
        <span class="n">c</span><span class="p">.</span><span class="n">open_sender</span><span class="p">(</span><span class="n">address</span><span class="p">);</span>
        <span class="c1">// reconnect we probably lost the last message sent</span>
        <span class="n">sent</span> <span class="o">=</span> <span class="n">received</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;simple_recv listening on &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">url</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_message</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">delivery</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">,</span> <span class="n">proton</span><span class="o">::</span><span class="n">message</span> <span class="o">&amp;</span><span class="n">msg</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">coerce</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">id</span><span class="p">())</span> <span class="o">&lt;</span> <span class="n">received</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span> <span class="c1">// Ignore duplicate</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">expected</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">received</span> <span class="o">&lt;</span> <span class="n">expected</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">msg</span><span class="p">.</span><span class="n">body</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
            <span class="n">received</span><span class="o">++</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">received</span> <span class="o">==</span> <span class="n">expected</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">d</span><span class="p">.</span><span class="n">receiver</span><span class="p">().</span><span class="n">close</span><span class="p">();</span>
                <span class="n">sender</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
                <span class="n">d</span><span class="p">.</span><span class="n">connection</span><span class="p">().</span><span class="n">close</span><span class="p">();</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="c1">// See if we can send any messages now</span>
                <span class="n">send</span><span class="p">(</span><span class="n">sender</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">send</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Only send with credit and only allow one outstanding message</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">credit</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">sent</span> <span class="o">&lt;</span> <span class="n">received</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">;</span>
            <span class="n">m</span><span class="p">[</span><span class="s">&quot;sequence&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">sent</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

            <span class="n">proton</span><span class="o">::</span><span class="n">message</span> <span class="n">msg</span><span class="p">;</span>
            <span class="n">msg</span><span class="p">.</span><span class="n">id</span><span class="p">(</span><span class="n">sent</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
            <span class="n">msg</span><span class="p">.</span><span class="n">body</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>

            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Sending: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">sent</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
            <span class="n">s</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
            <span class="n">sent</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_sender_open</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">sender</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_sendable</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">sender</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">send</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span> <span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span>
                <span class="s">&quot;Usage: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; CONNECTION-URL AMQP-ADDRESS MESSAGE-COUNT FAILOVER-URL...</span><span class="se">\n</span><span class="s">&quot;</span>
                <span class="s">&quot;CONNECTION-URL: connection address, e.g.&#39;amqp://127.0.0.1&#39;</span><span class="se">\n</span><span class="s">&quot;</span>
                <span class="s">&quot;AMQP-ADDRESS: AMQP node address, e.g. &#39;examples&#39;</span><span class="se">\n</span><span class="s">&quot;</span>
                <span class="s">&quot;MESSAGE-COUNT: number of messages to receive</span><span class="se">\n</span><span class="s">&quot;</span>
                <span class="s">&quot;FAILOVER_URL...: zero or more failover urls</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">address</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">message_count</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">failovers</span><span class="p">(</span><span class="o">&amp;</span><span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">argv</span><span class="p">[</span><span class="n">argc</span><span class="p">]);</span>

        <span class="n">reconnect_client</span> <span class="n">client</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="n">message_count</span><span class="p">,</span> <span class="n">failovers</span><span class="p">);</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">container</span><span class="p">(</span><span class="n">client</span><span class="p">).</span><span class="n">run</span><span class="p">();</span>

        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="reconnect_client.cpp">Download this file</a></p>
