
<h1>selected_recv.cpp</h1>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&lt;proton/connection.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/container.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/message.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/messaging_handler.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/receiver_options.hpp&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;proton/source_options.hpp&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>

<span class="cp">#include</span> <span class="cpf">&quot;fake_cpp11.hpp&quot;</span><span class="cp"></span>

<span class="k">namespace</span> <span class="p">{</span>

    <span class="c1">// Example custom function to configure an AMQP filter,</span>
    <span class="c1">// specifically an APACHE.ORG:SELECTOR</span>
    <span class="c1">// (http://www.amqp.org/specification/1.0/filters)</span>

    <span class="kt">void</span> <span class="n">set_filter</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">source_options</span> <span class="o">&amp;</span><span class="n">opts</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">selector_str</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">source</span><span class="o">::</span><span class="n">filter_map</span> <span class="n">map</span><span class="p">;</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">symbol</span> <span class="n">filter_key</span><span class="p">(</span><span class="s">&quot;selector&quot;</span><span class="p">);</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">value</span> <span class="n">filter_value</span><span class="p">;</span>
        <span class="c1">// The value is a specific AMQP &quot;described type&quot;: binary string with symbolic descriptor</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">codec</span><span class="o">::</span><span class="n">encoder</span> <span class="n">enc</span><span class="p">(</span><span class="n">filter_value</span><span class="p">);</span>
        <span class="n">enc</span> <span class="o">&lt;&lt;</span> <span class="n">proton</span><span class="o">::</span><span class="n">codec</span><span class="o">::</span><span class="n">start</span><span class="o">::</span><span class="n">described</span><span class="p">()</span>
            <span class="o">&lt;&lt;</span> <span class="n">proton</span><span class="o">::</span><span class="n">symbol</span><span class="p">(</span><span class="s">&quot;apache.org:selector-filter:string&quot;</span><span class="p">)</span>
            <span class="o">&lt;&lt;</span> <span class="n">selector_str</span>
            <span class="o">&lt;&lt;</span> <span class="n">proton</span><span class="o">::</span><span class="n">codec</span><span class="o">::</span><span class="n">finish</span><span class="p">();</span>
        <span class="c1">// In our case, the map has this one element</span>
        <span class="n">map</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">filter_key</span><span class="p">,</span> <span class="n">filter_value</span><span class="p">);</span>
        <span class="n">opts</span><span class="p">.</span><span class="n">filters</span><span class="p">(</span><span class="n">map</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="k">class</span> <span class="nc">selected_recv</span> <span class="o">:</span> <span class="k">public</span> <span class="n">proton</span><span class="o">::</span><span class="n">messaging_handler</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">conn_url_</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">addr_</span><span class="p">;</span>

  <span class="k">public</span><span class="o">:</span>
    <span class="n">selected_recv</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">u</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">)</span> <span class="o">:</span>
        <span class="n">conn_url_</span><span class="p">(</span><span class="n">u</span><span class="p">),</span> <span class="n">addr_</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="p">{}</span>

    <span class="kt">void</span> <span class="n">on_container_start</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">container</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">source_options</span> <span class="n">opts</span><span class="p">;</span>
        <span class="n">set_filter</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="s">&quot;colour = &#39;green&#39;&quot;</span><span class="p">);</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="n">conn_url_</span><span class="p">);</span>
        <span class="n">conn</span><span class="p">.</span><span class="n">open_receiver</span><span class="p">(</span><span class="n">addr_</span><span class="p">,</span> <span class="n">proton</span><span class="o">::</span><span class="n">receiver_options</span><span class="p">().</span><span class="n">source</span><span class="p">(</span><span class="n">opts</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">on_message</span><span class="p">(</span><span class="n">proton</span><span class="o">::</span><span class="n">delivery</span> <span class="o">&amp;</span><span class="p">,</span> <span class="n">proton</span><span class="o">::</span><span class="n">message</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span> <span class="n">OVERRIDE</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m</span><span class="p">.</span><span class="n">body</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">conn_url</span> <span class="o">=</span> <span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">:</span> <span class="s">&quot;//127.0.0.1:5672&quot;</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="o">?</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">:</span> <span class="s">&quot;examples&quot;</span><span class="p">;</span>

        <span class="n">selected_recv</span> <span class="n">recv</span><span class="p">(</span><span class="n">conn_url</span><span class="p">,</span> <span class="n">addr</span><span class="p">);</span>
        <span class="n">proton</span><span class="o">::</span><span class="n">container</span><span class="p">(</span><span class="n">recv</span><span class="p">).</span><span class="n">run</span><span class="p">();</span>

        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="selected_recv.cpp">Download this file</a></p>
