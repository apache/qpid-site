
<h1>broker.rb</h1>
<div class="highlight"><pre><span></span><span class="nb">require</span> <span class="s1">&#39;qpid_proton&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;optparse&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;pathname&#39;</span>

<span class="c1"># Thread safe message queue that notifies waiting senders when messages arrive.</span>
<span class="k">class</span> <span class="nc">MessageQueue</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@lock</span> <span class="o">=</span> <span class="no">Mutex</span><span class="o">.</span><span class="n">new</span>           <span class="c1"># Make ations on the queue atomic</span>
    <span class="vi">@messages</span> <span class="o">=</span> <span class="o">[]</span>              <span class="c1"># Messages on the queue</span>
    <span class="vi">@waiting</span> <span class="o">=</span> <span class="o">[]</span>               <span class="c1"># Senders that are waiting for messages</span>
  <span class="k">end</span>

  <span class="c1"># Push a message onto the queue and notify any waiting senders</span>
  <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="vi">@lock</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
      <span class="vi">@messages</span> <span class="o">&lt;&lt;</span> <span class="n">message</span>
      <span class="k">unless</span> <span class="vi">@waiting</span><span class="o">.</span><span class="n">empty?</span>    <span class="c1"># Notify waiting senders</span>
        <span class="c1"># NOTE: the call to self.send_to is added to the sender&#39;s work_queue,</span>
        <span class="c1"># and will be executed in the sender&#39;s thread</span>
        <span class="vi">@waiting</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">work_queue</span><span class="o">.</span><span class="n">add</span> <span class="p">{</span> <span class="nb">self</span><span class="o">.</span><span class="n">send_to</span><span class="p">(</span><span class="n">s</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span>
        <span class="vi">@waiting</span><span class="o">.</span><span class="n">clear</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># Pop a message off the queue.</span>
  <span class="c1"># If no messages available, record sender as waiting and return nil.</span>
  <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
    <span class="vi">@lock</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
      <span class="k">if</span> <span class="vi">@messages</span><span class="o">.</span><span class="n">empty?</span>
        <span class="vi">@waiting</span> <span class="o">&lt;&lt;</span> <span class="n">sender</span>
        <span class="kp">nil</span>
      <span class="k">else</span>
        <span class="vi">@messages</span><span class="o">.</span><span class="n">shift</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># NOTE: Called in sender&#39;s thread.</span>
  <span class="c1"># Pull messages from the queue as long as sender has credit.</span>
  <span class="c1"># If queue runs out of messages, record sender as waiting.</span>
  <span class="k">def</span> <span class="nf">send_to</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">sender</span><span class="o">.</span><span class="n">credit</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">message</span> <span class="o">=</span> <span class="n">pop</span><span class="p">(</span><span class="n">sender</span><span class="p">))</span>
      <span class="n">sender</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">forget</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
    <span class="vi">@lock</span><span class="o">.</span><span class="n">synchronize</span> <span class="p">{</span> <span class="vi">@waiting</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Handler for broker connections. In a multi-threaded application you should</span>
<span class="c1"># normally create a separate handler instance for each connection.</span>
<span class="k">class</span> <span class="nc">BrokerHandler</span> <span class="o">&lt;</span> <span class="no">Qpid</span><span class="o">::</span><span class="no">Proton</span><span class="o">::</span><span class="no">MessagingHandler</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">broker</span><span class="p">)</span>
    <span class="vi">@broker</span> <span class="o">=</span> <span class="n">broker</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">on_sender_open</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">sender</span><span class="o">.</span><span class="n">remote_source</span><span class="o">.</span><span class="n">dynamic?</span>
      <span class="n">sender</span><span class="o">.</span><span class="n">source</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">uuid</span>
    <span class="k">elsif</span> <span class="n">sender</span><span class="o">.</span><span class="n">remote_source</span><span class="o">.</span><span class="n">address</span>
      <span class="n">sender</span><span class="o">.</span><span class="n">source</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">sender</span><span class="o">.</span><span class="n">remote_source</span><span class="o">.</span><span class="n">address</span>
    <span class="k">else</span>
      <span class="n">sender</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="s2">&quot;no source address&quot;</span><span class="p">)</span>
      <span class="k">return</span>
    <span class="k">end</span>
    <span class="n">q</span> <span class="o">=</span> <span class="vi">@broker</span><span class="o">.</span><span class="n">queue</span><span class="p">(</span><span class="n">sender</span><span class="o">.</span><span class="n">source</span><span class="o">.</span><span class="n">address</span><span class="p">)</span>
    <span class="n">q</span><span class="o">.</span><span class="n">send_to</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">on_receiver_open</span><span class="p">(</span><span class="n">receiver</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">receiver</span><span class="o">.</span><span class="n">remote_target</span><span class="o">.</span><span class="n">address</span>
      <span class="n">receiver</span><span class="o">.</span><span class="n">target</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">receiver</span><span class="o">.</span><span class="n">remote_target</span><span class="o">.</span><span class="n">address</span>
    <span class="k">else</span>
      <span class="n">receiver</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="s2">&quot;no target address&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">on_sender_close</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
    <span class="n">q</span> <span class="o">=</span> <span class="vi">@broker</span><span class="o">.</span><span class="n">queue</span><span class="p">(</span><span class="n">sender</span><span class="o">.</span><span class="n">source</span><span class="o">.</span><span class="n">address</span><span class="p">)</span>
    <span class="n">q</span><span class="o">.</span><span class="n">forget</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span> <span class="k">if</span> <span class="n">q</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">on_connection_close</span><span class="p">(</span><span class="n">connection</span><span class="p">)</span>
    <span class="n">connection</span><span class="o">.</span><span class="n">each_sender</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">on_sender_close</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">on_transport_close</span><span class="p">(</span><span class="n">transport</span><span class="p">)</span>
    <span class="n">transport</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">each_sender</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">on_sender_close</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">on_sendable</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
    <span class="vi">@broker</span><span class="o">.</span><span class="n">queue</span><span class="p">(</span><span class="n">sender</span><span class="o">.</span><span class="n">source</span><span class="o">.</span><span class="n">address</span><span class="p">)</span><span class="o">.</span><span class="n">send_to</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">delivery</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
    <span class="vi">@broker</span><span class="o">.</span><span class="n">queue</span><span class="p">(</span><span class="n">delivery</span><span class="o">.</span><span class="n">receiver</span><span class="o">.</span><span class="n">target</span><span class="o">.</span><span class="n">address</span><span class="p">)</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Broker manages the queues and accepts incoming connections.</span>
<span class="k">class</span> <span class="nc">Broker</span> <span class="o">&lt;</span> <span class="no">Qpid</span><span class="o">::</span><span class="no">Proton</span><span class="o">::</span><span class="no">Listener</span><span class="o">::</span><span class="no">Handler</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@queues</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="vi">@connection_options</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">ssl_setup</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">ssl_setup</span>
    <span class="c1"># Optional SSL setup</span>
    <span class="n">ssl</span> <span class="o">=</span> <span class="no">Qpid</span><span class="o">::</span><span class="no">Proton</span><span class="o">::</span><span class="no">SSLDomain</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Qpid</span><span class="o">::</span><span class="no">Proton</span><span class="o">::</span><span class="no">SSLDomain</span><span class="o">::</span><span class="no">MODE_SERVER</span><span class="p">)</span>
    <span class="n">cert_passsword</span> <span class="o">=</span> <span class="s2">&quot;tserverpw&quot;</span>
    <span class="k">if</span> <span class="no">Gem</span><span class="o">.</span><span class="n">win_platform?</span>       <span class="c1"># Use P12 certs for windows schannel</span>
      <span class="n">ssl</span><span class="o">.</span><span class="n">credentials</span><span class="p">(</span><span class="s2">&quot;ssl-certs/tserver-certificate.p12&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">cert_passsword</span><span class="p">)</span>
    <span class="k">else</span>
      <span class="n">ssl</span><span class="o">.</span><span class="n">credentials</span><span class="p">(</span><span class="s2">&quot;ssl-certs/tserver-certificate.pem&quot;</span><span class="p">,</span> <span class="s2">&quot;ssl-certs/tserver-private-key.pem&quot;</span><span class="p">,</span> <span class="n">cert_passsword</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="n">ssl</span><span class="o">.</span><span class="n">allow_unsecured_client</span> <span class="c1"># SSL is optional, this is not secure.</span>
    <span class="vi">@connection_options</span><span class="o">[</span><span class="ss">:ssl_domain</span><span class="o">]</span> <span class="o">=</span> <span class="n">ssl</span> <span class="k">if</span> <span class="n">ssl</span>
  <span class="k">rescue</span>
    <span class="c1"># Don&#39;t worry if we can&#39;t set up SSL.</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">on_open</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
    <span class="no">STDOUT</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Listening on </span><span class="si">#{</span><span class="n">l</span><span class="o">.</span><span class="n">port</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span> <span class="no">STDOUT</span><span class="o">.</span><span class="n">flush</span>
  <span class="k">end</span>

  <span class="c1"># Create a new BrokerHandler instance for each connection we accept</span>
  <span class="k">def</span> <span class="nf">on_accept</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
    <span class="p">{</span> <span class="ss">:handler</span> <span class="o">=&gt;</span> <span class="no">BrokerHandler</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="vi">@connection_options</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">queue</span><span class="p">(</span><span class="n">address</span><span class="p">)</span>
    <span class="vi">@queues</span><span class="o">[</span><span class="n">address</span><span class="o">]</span> <span class="o">||=</span> <span class="no">MessageQueue</span><span class="o">.</span><span class="n">new</span>
  <span class="k">end</span>

<span class="k">end</span>

<span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">1</span>
  <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Usage: </span><span class="si">#{</span><span class="bp">__FILE__</span><span class="si">}</span><span class="s2"> URL</span>
<span class="s2">Start an example broker listening on URL&quot;</span>
  <span class="k">return</span> <span class="mi">1</span>
<span class="k">end</span>
<span class="n">url</span><span class="p">,</span> <span class="o">=</span> <span class="no">ARGV</span>
<span class="n">container</span> <span class="o">=</span> <span class="no">Qpid</span><span class="o">::</span><span class="no">Proton</span><span class="o">::</span><span class="no">Container</span><span class="o">.</span><span class="n">new</span>
<span class="n">container</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="no">Broker</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>

<span class="c1"># Run the container in multiple threads.</span>
<span class="n">threads</span> <span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span>  <span class="n">container</span><span class="o">.</span><span class="n">run</span> <span class="p">}}</span>
<span class="n">threads</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">join</span> <span class="p">}</span>
</pre></div>

<p><a href="broker.rb">Download this file</a></p>
